author,number,labels,title,state,date,body,URL,files_changed,merged_at,issue,comments_authors,comments,comments_review
honzik666,709,New BIP,BIP 310: Stratum protocol extensions,closed,2018-09-07 05:04:21,"Hi,

This proposal went formally through the mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-May/015978.html without any further discussion. Currently, this extension has been implemented by multiple pools. I would like to kindly ask for BIP # assignment and have this merged into upstream bips.

Best regards,

Jan Capek",https://github.com/bitcoin/bips/pull/709,['bip-0310.mediawiki'],2018-09-07T05:04:21Z,,"['achow101', 'luke-jr']","As an aside, perhaps the stratum protocol itself should be specified in BIP documents as well so that people don't have to go to other sites to learn about the stratum protocol itself before reading the extensions BIP. The Stratum protocol has BIPs 40 and 41 but there are no documents for those present in the repo.That is a good point, we can compile a stratum BIP from the spec that we published here: http://stratumprotocol.org/Please use BIP number 310.

Also, while this does address backward compatibility to a limited degree, it should ideally be discussed in a dedicated section of the document. Ideally, even if you insist on breaking compatibility with the established (and technically superior) `mining.capabilities` for some reason, it would be nice to document that incompatibility there as well.On Thu, 09 Aug 2018 11:11:22 -0700
Luke Dashjr <notifications@github.com> wrote:

> Please use BIP number 310.
> 
> Also, while this does address backward compatibility to a limited
> degree, it should ideally be discussed in a dedicated section of the
> document. Ideally, even if you insist on breaking compatibility with
> the established (and technically superior) `mining.capabilities` for
> some reason, it would be nice to document that incompatibility there
> as well.
> 
Thank you for assigning it, I will try to document this, that is a good
point.


-- 
CEO Braiins Systems | Slushpool.com
email: jan.capek@braiins.cz
http://braiins.cz
http://slushpool.com
@luke-jr let me know if there is anything else that needs to be cleaned up.","It has no defined response, but it would have been trivial to add one...Shouldn't have a leading zero here"
jimpo,718,Proposed BIP modification,Bip 158 updates,closed,2018-09-07 04:52:10,Add test vectors and other minor fixes.,https://github.com/bitcoin/bips/pull/718,"['bip-0158.mediawiki', 'bip-0158/gentestvectors.go', 'bip-0158/testnet-19.json']",2018-09-07T04:52:10Z,,['luke-jr'],@Roasbeef @aakselrod ,
jonathancross,716,,BIP-158: Fixing list formatting and spelling of 'license',closed,2018-09-07 04:51:33,@Roasbeef @jimpo @aakselrod,https://github.com/bitcoin/bips/pull/716,['bip-0158.mediawiki'],2018-09-07T04:51:33Z,,,,
polydin,698,Proposed BIP modification,BIP 158: fix incorrect bullet formatting (typo),closed,2018-09-07 04:50:57,,https://github.com/bitcoin/bips/pull/698,['bip-0158.mediawiki'],2018-09-07T04:50:57Z,,['luke-jr'],@Roasbeef @aakselrod ,
afk11,719,Proposed BIP modification,bip174: typo in some fixtures (using wrong magic prefix),closed,2018-08-30 13:20:44,"`bin2hex(""psbt\xff"") = 70736274ff`

A few of the invalid PSBT cases have been serialized using the wrong magic, but only in their base64 encodings.

ping @achow101 ",https://github.com/bitcoin/bips/pull/719,['bip-0174.mediawiki'],2018-08-30T13:20:44Z,,"['achow101', 'luke-jr']",@achow101 ACK 2b7b95996a8e5f3f81d4a746969f9a123ba7b999,"This doesn't appear to match the hexThanks, amended the commit"
fedsten,681,Proposed BIP modification,BIP 112: fix typo ,closed,2018-08-26 22:43:41,"The sequence is relative to the input, not the transaction. This may cause confusion",https://github.com/bitcoin/bips/pull/681,['bip-0112.mediawiki'],2018-08-26T22:43:41Z,,"['btcdrak', 'jnewbery', 'maaku', 'afk11']","I tried to get this fixed in https://github.com/bitcoin/bips/pull/452. Ping @maaku @luke-jr @jl2012 Ping one of the other authors or editors. I relinquish any duty here and have disabled notifications.@CodeShark @btcdrak this change is pretty agreeable, care to ACK this?ACK",
mytwocentimes,712,,[Trivial]Typos & links fix BIP 151,closed,2018-08-26 22:41:53,Came to learn - fixed a few things [trivial],https://github.com/bitcoin/bips/pull/712,['bip-0151.mediawiki'],2018-08-26T22:41:53Z,,['jonasschnelli'],"ACK, thanks!",
jonathancross,711,Proposed BIP modification,"Minor typo fix for ""reservedbits"" BIP",closed,2018-08-19 21:43:33,"This was overlooked in #661
@odarboe @btcdrak @luke-jr ",https://github.com/bitcoin/bips/pull/711,['bip-reservedbits.mediawiki'],2018-08-19T21:43:33Z,,['btcdrak'],ACK,
gfanti,710,,BIP 156: rename figure filenames [trivial],closed,2018-08-15 04:21:11,Updating path to BIP figures,https://github.com/bitcoin/bips/pull/710,['bip-0156.mediawiki'],2018-08-15T04:21:11Z,,,,
btcdrak,661,New BIP,BIP to reserve nversion bits in blockheader,closed,2018-08-15 04:18:34,,https://github.com/bitcoin/bips/pull/661,['bip-reservedbits.mediawiki'],2018-08-15T04:18:34Z,,"['luke-jr', 'odarboe', 'jonathancross', 'timohanke', 'bitkevin']","[poolin.com](https://poolin.com) already use `0x1FFFE000` as the default version mask for weeks, right now miners which enabled asicboost seems works well.ACK. 

This matches what is already in use by hardware and software. It makes sense to formalize it as a BIP.@luke-jr Updated for your nits. Please can I have a BIP number assignment.@btcdrak check the word in the last sentence. ""....bits for activation **sinalling**.""","Please format using a `*` at the beginning of the line so this list renders correctly in mediawiki markup. Eg. code should be:
```
* [[bip-0008.mediawiki|BIP8]]
* [[bip-0009.mediawiki|BIP9]]
* [https://arxiv.org/pdf/1604.00575.pdf AsicBoost white paper]
* [https://github.com/BlockheaderNonce2/bitcoin/wiki nNonce2 proposal]
* [http://stratumprotocol.org/ Stratum protocol extension for version-rolling]
```Should be `Standards Track`It's not backwards compatible, since software interprets these bits to indicate softforks."
gfanti,703,New BIP,BIP 156: Dandelion - Privacy Enhancing Routing,closed,2018-08-14 04:18:41,Pull request for draft BIP of Dandelion. ,https://github.com/bitcoin/bips/pull/703,"['README.mediawiki', 'bip-0156.mediawiki', 'bip-0156/1-dandelion.png', 'bip-0156/2-attack.png', 'bip-0156/3-attack-plot.png', 'bip-0156/4-dandelion-plot.png', 'bip-0156/bitcoin.conf', 'bip-0156/dandelion-debug-logs-example.pdf', 'bip-0156/dandelion-reference-documentation.pdf']",2018-08-14T04:18:41Z,,"['achow101', 'luke-jr', 'MarcoFalke']","@luke-jr I think this is ready to get a BIP number assignedSorry for the delay, please use BIP number 156.Also, can you provide me with a list of GitHub usernames of the authors?@luke-jr Here's a list: 

Brad Denby - mablem8
Giulia Fanti - gfanti
Andrew Miller - amiller
Surya Bakshi - sbaks0820
Shaileshh Bojja Venkatakrishnan - shaileshhbv
Pramod Viswanath - no github account@gfanti Please update the documents to use the assigned bip number (156)The file also needs to be renamed, and added to the README.mediawiki index.Travis failure is because the README has ""Bradley"" and BIP has ""Brad""",This should simply be `CC0-1.0` here.
esneider,704,Proposed BIP modification,[trivial] correct typo in bip173 (bech32),closed,2018-08-09 20:12:00,,https://github.com/bitcoin/bips/pull/704,['bip-0173.mediawiki'],2018-08-09T20:12:00Z,,"['sipa', 'luke-jr']",@sipa @gmaxwell ACK,
nym-zone,622,Proposed BIP modification,Fix two errors in the BIP 39 French wordlist,closed,2018-08-09 18:22:54,"The BIP 39 French wordlist contains two significant technical errors:

 - Byte Order Marker (BOM) U+FEFF at the beginning of the first line, preceding the word “abaisser”.

 - No newline '\n' char terminating the last line, after “zoologie”.

The former may cause user loss of funds.  An implementation which generates a mnemonic phrase and also turns it into a BIP 39 seed value may feed the string ""<U+FEFF>abaisser"" to the KDF, while displaying the word “abaisser” to the user.  Of course, it cannot be expected that the user would enter ""<U+FEFF>abaisser"" upon attempt to restore a wallet.  In the face of a buggy wordlist, whitespace handling and normalization cannot be absolutely relied on to remove a notoriously mischievous character.  Those who provide technical support may be well advised to ask French users with unrestorable wallets, “Did your mnemonic phrase contain the word ‘abaisser’?”

The latter broke the shell script I use to massage wordlists into C sources when building [easyseed](https://github.com/nym-zone/easyseed).

I know of only one commonplace platform where software regularly prepends UTF-8 files with a spurious U+FEFF, and oftentimes omits a line terminator on the last line even when asked to create a Unix ('\n') text file.  It is RECOMMENDED that new wordlists be examined for correctness using standard shell tools on a sane platform.",https://github.com/bitcoin/bips/pull/622,['bip-0039/french.txt'],2018-08-09T18:22:54Z,,"['NicolasDorier', 'voisine', 'Kirvx', 'dabura667', 'cornfeedhobo', 'luke-jr', 'evoskuil']","ACK 50c4f1255eed6b1c08ca9c20b4d8f380879ed2f5

I checked all other current wordlists and they all:

1. Did not have the BOM
2. Did have a trailing LF line break

I pulled @nym-zone 's branch locally and inspected the file using a hex editor to double check the new french.txt is fixed.

As for @nym-zone's concerns: 

The only wallet I know of that shows users French phrases is Copay, and they don't use the files as-is from the BIP.
https://github.com/bitpay/bitcore-mnemonic/blob/master/lib/words/french.js

If there is a wallet that uses the exact file from the BIP that shows french users phrases in French. That warning applies... but I don't think any wallet does so.Thanks, @dabura667.  I should have clarified, I discovered this when writing a mnemonic phrase generator tool which embeds all eight wordlists currently in the BIP repository.  I reported French, because that’s what was broken.  Insofar as I could when dealing with multiple languages I do not know, I exercised reasonable care to assure the integrity of all the wordlists.

(Then I wrote an automated battery of runtime tests against the compile-time SHA-256 hashes of the files, in case somebody out there may have buggy tools which mangle UTF-8 when building...)

I just hexdumped Copay’s french.js to double-check; and its string representation is fine as for the ironically self-abasing “abaisser”.Checking additional implementations in the wild, I have not (yet?) found any which carry the spurious U+FEFF.  But it is not only a matter of Copay.

From a popular implementation, widely used because it [runs in a web browser](https://iancoleman.io/bip39/):  https://github.com/iancoleman/bip39/commit/3a8dbe99b4be2084794d1191a06eadc38db0917b, checking [wordlist_french.js](https://github.com/iancoleman/bip39/blob/3a8dbe99b4be2084794d1191a06eadc38db0917b/src/js/wordlist_french.js):

```
00000030  20 3a 20 57 4f 52 44 4c  49 53 54 53 3b 0a 57 4f  | : WORDLISTS;.WO|
00000040  52 44 4c 49 53 54 53 5b  22 66 72 65 6e 63 68 22  |RDLISTS[""french""|
00000050  5d 20 3d 20 5b 0a 22 61  62 61 69 73 73 65 72 22  |] = [.""abaisser""|
```

From https://github.com/NovaCrypto/BIP39/pull/4/commits/5ecf5687564e2c0af0bae133e1fe66095e80ad98 ([see also](https://github.com/NovaCrypto/BIP39/pull/4)), checking [French.java](https://github.com/NovaCrypto/BIP39/blob/5ecf5687564e2c0af0bae133e1fe66095e80ad98/src/main/java/io/github/novacrypto/bip39/wordlists/French.java):

```
00000520  20 6e 65 77 20 53 74 72  69 6e 67 5b 5d 7b 0a 20  | new String[]{. |
00000530  20 20 20 20 20 20 20 20  20 20 20 22 61 62 61 69  |           ""abai|
00000540  73 73 65 72 22 2c 0a 20  20 20 20 20 20 20 20 20  |sser"",.         |
```

I will keep my eye out for other French-supporting BIP 39 implementations.ping @Kirvx @NicolasDorier @vosine @luke-jr

Bugfix on #152, fbe7196.

This is a simple technical fix which changes no functionality in correct implementations, but can help prevent implementation errors.ACK.
Thanks @nym-zone and @dabura667.

@voisine Are breadwallet french users affected?Thanks, @Kirvx.

I didn’t mean to imply anything about Breadwallet; I was simply trying to get the attention of persons with significant involvement in #152 and/or maintenance of BIP 39 wordlists and/or BIP maintenance.  But, good idea!  Now, I checked the only Breadwallet French file I could find on a brief search, `BreadWallet/fr.lproj/BIP39Words.plist` from breadwallet/breadwallet-legacy@fd14d42; and it is fine:

```
$ hd -s 173 -n 16 BIP39Words.plist
000000ad  3c 73 74 72 69 6e 67 3e  61 62 61 69 73 73 65 72  |<string>abaisser|
000000bd
```

(That file is delimited by XML, not newlines; so as long as “zoologie” is there, that’s fine also.)

By the way, thank you for your work creating this list.  I strongly urge that BIP 39 should have broad language support; and French is an important language.  I can see in #152 how much work was put in to make and refine the list.  Too bad, it seems *abaisser* wanted to abase itself.😃 

Thank you for checking breadwallet @nym-zone 👍 @slush0 @prusnak @voisine @ebfull would be nice to add a test vector. NBitcoin also has [french hard coded](https://github.com/MetacoSA/NBitcoin/blob/master/NBitcoin/BIP39/IWordlistSource.cs)... I could not find a proper tool on windows (sublime, and vscode don't work for some reason) showing me hidden characters though.Try notepad++@NicolasDorier:

>would be nice to add a test vector.

From the nym-zone/easyseed@c7d698a set of a dozen languages’ test vectors, I give you [French test vectors](https://github.com/nym-zone/easyseed/blob/c7d698a35f01362030715d7244ebba2008004b10/test/bip39_vectors.fr.json) in a convenient JSON format.  Please run them with your implementation.

As stated in the preceding commit log from two days ago (nym-zone/easyseed@5f35cd0, *q.v.*), these vectors are specifically designed to flunk implementations which do not perform proper Unicode NFKD normalization—even with words not containing diacritics (including the English wordlist, too).

(I may rename or modify things; but the versioned link will obviously remain stable.)Pertinent to the below, but also as a general point:  `U+FEFF` is *not* removed or otherwise affected by Unicode NFKD normalization.  To shortcut discussion of Unicode character properties, here is an empirical object demonstration with an ICU utility:

```
$ echo -n $'a\ufeffb' | uconv -x '::nfkd;' | hd
00000000  61 ef bb bf 62                                    |a...b|
00000005
```

Of course, due to its double-personality as “ZERO WIDTH NO-BREAK SPACE” (ZWNBSP), it’s also zero-width—and therefore invisible on any display which supports Unicode:

```
$ echo $'a\ufeffb'
a﻿b
```

(Check, there is an extra character in between there.)

Thus if it gets fed to PBKDF2 for BIP 39 seed generation, and the user is shown the corresponding mnemonic, then the user will write down a phrase which will not restore the wallet.  That’s why I panicked when I saw this:

```
$ head -c16 french.txt | hd
00000000  ef bb bf 61 62 61 69 73  73 65 72 0a 61 62 61 6e  |...abaisser.aban|
00000010
```

----

@NicolasDorier, [IWordlistSource.cs](https://github.com/MetacoSA/NBitcoin/blob/45a0ad9e32c95a37ef6b3f0b4151145eaeadd240/NBitcoin/BIP39/IWordlistSource.cs) from MetacoSA/NBitcoin@45a0ad9 does not contain this bug:

```
$ hd -s 80771 -n 19 IWordlistSource.cs
00013b83  22 66 72 65 6e 63 68 22  2c 20 22 61 62 61 69 73  |""french"", ""abais|
00013b93  73 65 72                                          |ser|
00013b96
```

If you used a Windows text editor to somehow copypaste that, I would not expect it to have picked up the `U+FEFF`.  AFAIK, the Windows tools which (unnecessarily) produce a Byte Order Marker for octet-stream UTF-8 tend to not consider it part of the text.  But then, I also would not rely on this.

My greater concern is automatically processed text.  I know for a fact that the `U+FEFF` can be slurped up from `french.txt`, because that’s what happened to me.  In my `Makefile`, I use Unix shell tools to turn the wordlist `.txt` files into C `const char *` arrays.  The resulting French C array did contain the `U+FEFF` before I fixed it.

Had I foisted that on users, somebody would have lost funds sooner or later.

(Apologies for the double post.  My bad.)@nym-zone I dodged a bullet.

In .NET, the default encoding is UTF8 BOM: when reading a file it checks BOM, and if present, remove it from the string.

When writing to the file, the default UTF8 BOM bytes is added.

However, `UTF8Encoding.GetBytes()` does not emit it, even if the `UTF8Encoding` objects has BOM setting set, for that a call to `UTF8Encoding.GetPreamble()` is needed.

TL;DR: My implementation is conform... by chance. (Tested against your vector)
Hopefully the test vectors of BIP39 (which I added since beginning) should have caught the bug though.@NicolasDorier the test vector generator included with Trezor-mnemonic library has all 0x00 as a vector generator for edge cases which results in all first words except the last.Can we get a resolution here? My understanding of these wordlist definitions negates the need for the BOM, and it is [not recommended for use](https://en.wikipedia.org/wiki/UTF-8#Byte_order_mark).why this has not been merged?ACK@Kirvx Could we get your ACK on this?ACK@luke-jr Anything else needed to get this merged?",
jimpo,699,,Tweaks to BIP 157/158,closed,2018-08-09 18:17:42,"With filter sizes at ~2% of block size, reducing `getcfilter` request size to 100 corresponds to a response with equal bandwidth to ~2 blocks.",https://github.com/bitcoin/bips/pull/699,"['bip-0157.mediawiki', 'bip-0158.mediawiki']",2018-08-09T18:17:42Z,,,@Roasbeef ,
jamesob,701,,Trivial typo fixes to bip-0118,closed,2018-08-09 18:16:51,@cdecker,https://github.com/bitcoin/bips/pull/701,['bip-0118.mediawiki'],2018-08-09T18:16:51Z,,['cdecker'],"ACK

Thanks @jamesob ",
azuchi,707,,[BIP174] Fix to unify Test Vector in key order of PSBT Input.,closed,2018-08-09 18:14:46,"Only Test Vector for the updater that sets the SIGHASH Type, the position of the SIGHASH type of the generated PSBT payload deviates from the other Test Vector, it making testing difficult in the program.

Therefore, like other Test Vector, it will better to change the Test Vector to payload generated in  order of PSBT keys.
",https://github.com/bitcoin/bips/pull/707,['bip-0174.mediawiki'],2018-08-09T18:14:46Z,,['achow101'],ACK 72e60d2116b34f7be5a893794cf88117e36a9ae8,
achow101,702,,Additional tests for BIP 174,closed,2018-08-09 17:56:40,,https://github.com/bitcoin/bips/pull/702,['bip-0174.mediawiki'],2018-08-09T17:56:40Z,,"['sipa', 'jb55']","I was meaning to mention this on the previous PRs. Is there any point to including the base64 encoding as well? The translation from hex is pretty straightforward. Just thinking it would cut down on the verbosity a bit.> Is there any point to including the base64 encoding as well? The translation from hex is pretty straightforward.

The point was to effectively provide the two forms that a PSBT would be found in: as a binary file or as a Base64 string. It helps those who are writing tests to know exactly what to expect especially since there are (apparently) multiple ways of doing Base 64.> there are (apparently) multiple ways of doing Base 64

https://en.wikipedia.org/wiki/Base64#Variants_summary_table

so it seems... seems reasonable to include it in that case, or alternatively an explicit mention of which variant is used.@luke-jr This is ready.I updated this with some parts that specify what signers should look out for and an algorithm for a simple signer. Also more tests for those.","typo: ""its"".write `prevhash` as `psbt.tx.input[i].prevout.hash`?Write as `non_witness_utxo.vout[psbt.tx.input[i].prevout.n].scriptPubKey` ?Perhaps write this as ""If a witness UTXO is provided, no non-witness signature may be created""? The current language sounds like a signature must be created.Typo: ""witness_utxos"".You can't really convert a script to P2PKH. What about `P2PKH(script[2:])`?DoneDoneDoneDoneFixedDone"
achow101,700,,BIP 174 clarifications and move to proposed,closed,2018-07-12 01:54:32,"Adds a few more clarifications that came up on the mailing list following the merge of the previous PR.

Transitions BIP 174 to the proposed state.",https://github.com/bitcoin/bips/pull/700,"['README.mediawiki', 'bip-0174.mediawiki', 'bip-0174/coinjoin-workflow.png', 'bip-0174/coinjoin-workflow.svg', 'bip-0174/coinjoin-workflow.tex', 'bip-0174/multisig-workflow.png', 'bip-0174/multisig-workflow.svg', 'bip-0174/multisig-workflow.tex']",2018-07-12T01:54:32Z,,['sipa'],LGTMI have added updated graphics from https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016246.html. The text of the graphics have also been updated to match the current roles.,
jonathancross,585,Proposed BIP modification,BIP-199 Fix list formatting,closed,2018-07-06 15:40:23,"The sentence ""Both parties can now construct the script and P2SH address for the HTLC."" was broken with part appearing below the list item.",https://github.com/bitcoin/bips/pull/585,['bip-0199.mediawiki'],2018-07-06T15:40:23Z,,"['ebfull', 'luke-jr']",@ebfullFriendly ping: @daira @ebfull@daira @ebfullACKPing @luke-jr : any issues with this still?,
jonathancross,605,Proposed BIP modification,BIP141: Add BIP173 to references.,closed,2018-07-06 15:39:30,@sipa @CodeShark @jl2012 ,https://github.com/bitcoin/bips/pull/605,['bip-0141.mediawiki'],2018-07-06T15:39:30Z,,['sipa'],ACK@luke-jr any issues you see here?,
achow101,694,,Revisions to BIP 174,closed,2018-07-06 08:24:56,"Describes the changes to BIP 174 as discussed on the [bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016150.html). There are new tests, updated formatting, and clarifications.",https://github.com/bitcoin/bips/pull/694,['bip-0174.mediawiki'],2018-07-06T08:24:56Z,,"['sipa', 'jb55', 'luke-jr', 'nvk']","We will start implementing as soon as this gets merged.
Thanks for sorting it out so fast 👍 Clarified that keys must match the format. Clarified that combiners may check for inconsistencies in known types.@achow101 Ready to merge then?@achow101 I'm having trouble with my deserializer, as far as I can tell, there is no way to tell when the array of input kv maps stops and the array of kv output maps starts?

with this psbt I got from the revised bip:

```
70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000
```
my parser spits out:
```
GLOBAL_UNSIGNED_TX (0)                                                                                 
	020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000
IN_NON_WITNESS_UTXO (0)
	0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000
IN_REDEEM_SCRIPT (4)
	5221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae
IN_BIP32_DERIVATION (6)
	029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f: d90c6a4f000000800000008000000080
IN_BIP32_DERIVATION (6)
	02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7: d90c6a4f000000800000008001000080
OUT_WITNESS_SCRIPT (1)
	00c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887
UNKNOWN_OUTPUT_TYPE (4)
	00208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903
UNKNOWN_OUTPUT_TYPE (5)
	522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae
UNKNOWN_OUTPUT_TYPE (6)
	023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73: d90c6a4f000000800000008003000080
UNKNOWN_OUTPUT_TYPE (6)
	03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc: d90c6a4f000000800000008002000080
```

it looks like it see's a zero byte after 

```
IN_BIP32_DERIVATION (6)
	02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7: d90c6a4f000000800000008001000080
```

at this point my parser assumes the input kv-map has ended, and starts interpreting the new kv-map as the output map. but perhaps this is wrong, since we could be in the second input kv-map in the input kv-map array. given this, as far as I can tell, there's no way to tell when we have switched to the output key value map array? am I missing something?@jb55 The number of inputs and outputs are specified by the unsigned tx itself. You will need to partially deserialize it to know how many inputs and outputs.

@luke-jr I'm not sure. There's still discussion on the mailing list about this.@achow101 ah right. that makes sense, that was next on my todo. thanks!I have added a few changes that clarify that signers must check input txids for non-witness utxos and that a map must be provided for every input and output.

@luke-jr I think this is ready to be merged.","Typo: containsSpecify that it can pick arbitrarily in case of conflicts.Specify that it should leave unknown fields untouched (these may serve a similar purpose to UTXOs in extensions).Perhaps mention that if ever the number of field types may run out, new extensions could start defining multi-byte type identifiers.I don't think you can just start using a mime type without registration.

Practices around mime types are defined in https://tools.ietf.org/html/rfc6838, but I think it may be too early to go through the registration processes. I'm not sure what to do here, but perhaps just write ""A mime type name will be added to this document after blabla""?If all witnesses are empty, BIP144 does not permit using extended serialization.Add a note that it may only be present for inputs which spend non-segwit outputs.Add a note that it may only be present for inputs which spend segwit outputs (including P2SH embedded ones).""that do not use"" is confusing here. Perhaps ""If present, finalizers must fail to finalize inputs which have signatures that don't match the specified sighash type"" ?Maybe explain that the term 'fingerprint' is used here as defined by BIP32.

I don't understand ""This must omit the index of the master key"".FixedFixedDoneFixedFixedDoneFixedDoneDoneDoneAfter discussing this more, perhaps it should be legal to include a non-witness UTXO even for witness inputs. The entity that adds the UTXO may not know it's a witness one (especially when it's P2SH embedded). But the entity that does know can always convert a `PSBT_IN_NON_WITNESS_UTXO` into a `PSBT_IN_WITNESS_UTXO` by extracting the right output.DonePerhaps add that a Combiner is allowed to detect inconsistencies in known fields when combining, but cannot do this for unknown fields.Typo: hsCould this be written as a table that includes the name or one-line description of the field? I expect that needing looking things up across BIPs may end up being a pain.DoneFixedDoneSpecify that this is only the case for signers which support SIGHASH_ALL signing for both P2PKH and P2WPKH spends, and use RFC6979 nonce generation.Done"
clarkmoody,553,Proposed BIP modification,BIP 173: Adds link to SLIP-0173,closed,2018-07-05 19:53:28,"SLIP-0173 lists registered human-readable parts for BIP-0173, keeping the BIPs free of other cryptocurrency information. This echoes SLIP/BIP-0044 with registered coin types for HD wallet derivation paths.",https://github.com/bitcoin/bips/pull/553,['bip-0173.mediawiki'],2018-07-05T19:53:28Z,,"['sipa', 'jonathancross', 'luke-jr']","@sipa @gmaxwell Rebased on top of `master`.

Coming up on one-year anniversary of this PR. Can we get some forward motion here?ACK","""maintians"" => ""maintains""Thanks. Updated.Thanks, please squash into single commit.Squashed"
erikarvstedt,684,Proposed BIP modification,Trivial: Fix typos in BIP-118,closed,2018-07-05 05:15:51,,https://github.com/bitcoin/bips/pull/684,['bip-0118.mediawiki'],2018-07-05T05:15:51Z,,"['cdecker', 'luke-jr']",@cdecker LGTM :+1: ,"This doesn't look like a typo fix...Yeah, sorry, the Github in-line editor messed it all up.
I've pushed a fixed version."
jamesob,692,,Fix typo in BIP 125,closed,2018-07-05 05:09:38,,https://github.com/bitcoin/bips/pull/692,['bip-0125.mediawiki'],2018-07-05T05:09:38Z,,"['harding', 'Empact']",ACK 8a34d16ACK 8a34d1661ba5bfbb05bb35045e9eb6724302f88d Thanks!,
sipa,696,,Move BIP42 and BIP173 to Final,closed,2018-07-05 05:06:14,,https://github.com/bitcoin/bips/pull/696,['README.mediawiki'],2018-07-05T05:06:14Z,,"['ken2812221', 'moneyball']",ACKChange bip-0042.mediawiki bip-0173.mediawiki  as well?,
Roasbeef,687,,"BIP-0158: remove extended filter, remove txid from regular filter, reparameterize gcs params ",closed,2018-07-05 05:03:51,"In this PR, we propose a set of changes to BIP 158 (block filter digests) to reduce the size of the filters, while maintaining the same level of utility for wallets and applications that seek to utilize this new(ish) BIP. A rundown of the new changes follows:

  * The txid has been removed from the regular filter, as in many cases just matching on the pkScript, then checking the block locally after it matches for the _precise_ txid match is enough. I've implemented this new logic in `lnd` (as we're the primary user of this new functionality), and the changes were rather contained, so it shouldn't be a big change application logic wise.
   * The extended filter has been removed as there isn't really a _clear_ use case for them atm, and they increase the index size for a full node.
   * The gcs parameters have been re-parameterized, to set the fp rate independently from the modulus used when hashing the set of `N` items down to a single range. As a result, the filter sizes have shrunk a bit as we can save a bit or two for each element. ",https://github.com/bitcoin/bips/pull/687,"['bip-0158.mediawiki', 'bip-0158/gentestvectors.go', 'bip-0158/testnet-19.json']",2018-07-05T05:03:51Z,,"['sipa', 'tamasblummer', 'lontivero', 'jimpo', 'Sjors']","@Roasbeef I do not see any reference of the M value in https://github.com/Roasbeef/btcutil
The test vectors also do not match my independent calculation with P=19 M=784931@tamasblummer the code to generate those test vectors (the gcs stuff) is found at: https://github.com/Roasbeef/btcutil/commits/gcs-modifications

How do your generated test vectors differ? Are you excluding the `txid` in them now?@Roasbeef fixed my range mapping. Now we are aligned.There are still `N << P` instead of `N * M` in `hashed_set_construct` and `gcs_match` pseudocode.@jimpo fixed in latest version, squashed the fix up commits. Need to call `hashed_set_construct` with `M` in the `construct_gcs` pseudocode.Maybe add a Discussion section like [here](https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki#discussion) with links to the main dev list threads? I recall having difficulty finding the first one after seeing your presentation (because I searched for ""neutrino"").

","Q: Given the filter for the genesis block has to contain two elements (the txid and the coinbase scriptPubKey) and that `019dfca8` is the basic filter serialized as [varint(N) | filterbytes], shouldn't N be 02 instead of 01? Read the PR title: ""remove txid"".Currently the referenced gcs builder github.com/btcsuite/btcutil/gcs/builder add the txid.
Is this the new version https://github.com/Roasbeef/btcutil/blob/gcs-modifications/gcs/builder/builder.go?Hmm, we'll actually need to tighten the restriction on N to ensure F doesn't overflow 64 bits. Might be enough to say that N MUST be `< 2^64 / M`.Drop the sentence `Customarily, M is set to 2^P`. It's not adding anything and just raises questions. You can simply say that parameters are selected to maximize compression efficiency and link to the analysis.s/Q/P/nit: s/gcs/GCS/ for consistency with the rest of the document.The code used to generate these test vectors can be found here: https://github.com/Roasbeef/btcutil/commits/gcs-modifications. It'll be merged back into `btcsuite` proper once this PR lands. Isn't it enough to just state that both `N` and `M` are < 2^32? As the product of those two values (with this constraint) will be < 2^64. IMO it does add something as if one if familiar with the regular selection of parameters, why might wonder why we didn't just set M to 2^P. Fixed!Fixed in all areas other than the pseudocode.If someone is really curious, that's what the link is for. But I guess leave it if you feel strongly."
kallewoof,683,,"BIP-178: Reword abstract to indicate it's a bitcoin address type, not…",closed,2018-05-21 23:26:21,… a public key type,https://github.com/bitcoin/bips/pull/683,['bip-0178.mediawiki'],2018-05-21T23:26:21Z,,,,
cdecker,682,New BIP,BIP 118: SIGHASH_NOINPUT,closed,2018-05-21 05:19:23,"> This BIP describes a new signature hash flag (sighash-flag) for
> segwit transactions. It removes any commitment to the output being
> spent from the signature verification mechanism. This enables dynamic
> binding of transactions to outputs, predicated solely on the
> compatibility of output scripts to input scripts.

Opening a PR in order to get a number assigned, as pointed out by @luke-jr. I'll update the PR upon receiving a number.",https://github.com/bitcoin/bips/pull/682,"['README.mediawiki', 'bip-0118.mediawiki']",2018-05-21T05:19:23Z,,['luke-jr'],"Missing a `Copyright` sectionPlease use BIP number 118Thanks @luke-jr, I updated the proposal with your comments and squashed it into two commits.",Formatting issue: this should be in a <pre> with double space indentation.Missing closing `>`PD is not an acceptable license for new BIPs. Please choose one from [this list](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#Recommended_licenses)
kallewoof,673,New BIP,BIP 178: Version Extended WIF,closed,2018-05-20 23:41:13,,https://github.com/bitcoin/bips/pull/673,"['README.mediawiki', 'bip-0178.mediawiki']",2018-05-20T23:41:13Z,,"['afk11', 'dcousens', 'laanwj', 'clarkmoody', 'Janaka-Steph', 'NicolasDorier', 'sipa', 'luke-jr']","~~ACK (we should probably summarize the disucssion on IRC here)~~

Changing this to a Concept ACK for now, as there may also be a good argument to switch to a deliberately incompatible WIF format for the new key types: because other implementations handle non-1 suffix bytes in different ways. They don't all explicitly reject them, or even treat them as compressed.

For example bitcoin-python https://github.com/petertodd/python-bitcoinlib/blob/master/bitcoin/wallet.py#L253 treats only keys with suffix byte AND suffix byte=1 as compressed and the rest as uncompressed. @petertodd 

Not sure how much of a problem this is, but it seems like an edge case that might result in fund loss (or temporary panic at least...).(It may be desirable to change Title?)@luke-jr You mean ""Typed Private Keys""? It seemed good enough to me, but maybe ""Extended Wallet Import Format""?An alternative to this approach is to use bech32 for the private keys as well, i.e. switch to a whole new format and skip trying to be backwards-compatibility.

* Pro: clean new format with benefits.
* Con: may take time, as I believe @sipa is still researching how to do this in optimal ways.
> An alternative to this approach is to use bech32 for the private keys as well, i.e. switch to a whole new format and skip trying to be backwards-compatibility.

Pro: potential HD key support

I know this is the source of my contention,  and as a library implementor,  users would love this BIP,  but complain about no standard solution for BIP32 wallets.I think there is no reason users would need to deal with individual private key anymore.

Though a standard for this for HD private and public keys would be useful. The way I am dealing with it now is by requesting users to specify the HD key + the first address of his wallet, and I try to know what type of derivation to use.I was importing private keys from one node into another, which is what made me interested in this in the first place, so I think this is still a useful feature. Electrum added their own suffixes for keys, and other wallet software may follow suite, so a BIP for this seems reasonable.

Current wallet implementations (incomplete list):
* python-bitcoinlib: incompatible, but trivially fixed (`compressed == len>32 && value[32] == 0x01`)
* btcd: incompatible, but trivially fixed (same assumption)
* NBitcoin: incompatible, but trivially fixed (same assumption)
Npm package [`wif`](https://github.com/bitcoinjs/wif/blob/b8806df61c91b20a83c8adea7ed6be128396399c/index.js#L20-L21) would be trivial too.

If the alternative to this BIP is 100 years of bike-shedding over BIP32 structures, I'd rather not.  This BIP is still useful in isolation,  and it might at least set a standard for the compression/script template encoding which _could_ be used for BIP32 structures, if desired.I would support it on NBitcoin side.Nit: Use MediaWiki formatting for the `*is*`

Concept ACK from me, and keep the BIP focused on single-address keys. [SLIP-0032](https://github.com/satoshilabs/slips/blob/master/slip-0032.md) already proposes a solution for an upgrade to HD seeds.It does seem there's a dependency between the prefix spec for BIP32, and this BIP. I guess implementations should fail if someone attempts to use BIP32 a SLIP132 prefix for which there is no WIF prefix?

If someone were to export a WIF from a SLIP132 key, they would need to be in sync.@clarkmoody 

> Nit: Use MediaWiki formatting for the `*is*`

I'm not sure what you mean.With the limited scope limited only to N=1 public-key scripts,  I do wonder if a different format (bech32 encoded maybe) wouldn't be simpler and safer for implementations compared to incompatibly changing the WIF format.
The UX for old software might be immensely confusing.@dcousens The idea is to make an upgrade to WIF that is fairly simple to do (one line change in all cases I've seen so far). I was hoping 0-line but most people seem to do ""len > 32 & v[32] == 0x01"". If they dropped the latter part for ""compressed"" it would be compatible.@kallewoof Surrounding text with asterisks does not produce any different formatting under MediaWiki rules. I suggest changing depending on what formatting you wish to achieve.@clarkmoody D'oh. Thanks, fixed!Hmm, any reason against including the script types exposed in slip132? It's possible people would be dumping WIF's for those keys, and lacking a defined script type for them (P2SH_P2WSH_P2PKH and P2WSH_P2PKH) people would just use \x01

I did see discussion about script-hash types, but it the discussion seemed to be against arbitrary redeem & witness script types, these would explicitly be P2PKH.@afk11 I would like the list to be complete for types which represent a single key, so yes, these should be added I think. Are there any other combinations?

Edit: I can't find these in [slip-132](https://github.com/satoshilabs/slips/blob/master/slip-0132.md) anywhere. What are they used for, anyway? Seems redundant, but maybe I'm missing something.@kallewoof sorry for the delay! thought I'd got back to this already. First I was sure `P2SH` and `P2SH_P2WSH` meant P2PKH, but it seems electrum uses those for multi-signature scripts https://github.com/spesmilo/electrum-docs/blob/master/xpub_version_bytes.rst#specification so I can't say for sure that's the case.

@clarkmoody is it intended that `P2SH` and `P2WSH` don't have known type in slip132? P2WPKH is mentioned specifically by name in all forms, but P2PKH is only mentioned in the first entry. 

It really would be nice, as then P2WPKH and P2PKH (in all script-hash cases) would have a prefix.@afk11 SLIP-0132 is mainly following the lead of Electrum in the x- y- z-pub version bytes. `P2WSH` is listed as `0x02aa7ed3 - Zpub`, but you are correct, there is no specific HD prefix for `P2SH` addresses.@afk11 So the conclusion here is that no new entries need to be added, right?

~~@luke-jr can we merge this so people can make PR against it if they feel any more changes are needed?~~@clarkmoody OK, thanks for answering! (off topic, but it might be worth mentioning on slip132 that P2SH, P2WSH, P2SH|P2WSH refer to BIP11 scripts)

@kallewoof - yep, all good.I am very confused by the usage of the term ""public key"" in this BIP. An ECDSA public key will always remain a public key, it can be uncompressed or compressed, but there is not different kinds. It seems to me that the term ""bitcoin address"" should be use instead.

> There are several types of public keys which can all be associated with a given private key: P2PKH (legacy 1... format), P2SH-P2WPKH (SegWit public key inside P2SH), P2WPKH (bech32), etc.

We should say ""There are several types of bitcoin addresses...""

It's even more confusing when we are talking about pay to script hash.> We should say ""There are several types of bitcoin addresses...""

While a compressed public key and an uncompressed public key are different *types* of public keys, the same doesn't really go for the other kinds, so yeah, I overall agree with your point. I think ""bitcoin addresses"" makes more sense. Will fix.Thank you for the quick fix. I would like to express the same criticism regarding the term ""Typed Private Keys"". 
We use to say WIF-compressed to express the fact that a private key must be derived to a compressed public key. The attribute ""compressed"" is attached to the Wallet Import Format, not directly the private key. So imo we should say something like ""Address-typed WIF"" instead.I'm not sure I agree. The format describes a private key, with a type, so ""typed private key"" isn't too far off, I think. Will think more about it.What about ""Version bytes extended WIF""?  
It seems to me that this idea of describing the address type (according to the output type) into the WIF is similar to the Electrum Seed Version System or the versioning of Aezeed by LND.
""Version bytes"" is the keyword I would use to search about this concept on the net. 
But in the meantime I think it is too vague, I would prefer something more descriptive like ""Output type version bytes extended WIF"".  
It's not really a version, I think. ""Type extended WIF""? ""Address type extended WIF""?BIP32 defines the extended key serialization format with 4 bytes ""version bytes"" to encode the network (https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#serialization-format).
Then we have SLIP132 which suggest to use these version bytes to also describe the address format
(https://github.com/satoshilabs/slips/blob/master/slip-0132.md). If my understanding is correct, SLIP132 is trying to solve the exact same problem. 
This is why I have suggested the term ""version bytes"" for BIP178. Because the term is loaded with this historical BIP32 background, and also to set a common ground with SLIP132. That's a good point, yeah. ""Version extended WIF""? 'bytes' seems unnecessary (and it's only one byte).

""VEW"" is a horrible abbreviation though. ""XWIF""? Hum.","What script type does this refer to? The slip32 prefixes don't allow arbitrary redeem scripts (it would defeat the point IMO). If this is meant to be P2PKH_P2SH, please refer to it as that!See above - both of these are script-hash, not script types to be run.see above - is this P2WSH P2PKH?@afk11 IMHO it should be P2SH_P2PKH,  as better represents P2SH(P2PKH)I believe this would be used for arbitrary P2SH scripts with a related private key (e.g. multisig). Is there a reason to even have a P2PKH in P2SH variant?@kallewoof given the lack of redeem script context, wouldn't this be implemented as an 'unsupported' flag by most implementations?
Or is half-way-there still better than nothing?

Otherwise we are assuming the context and it is no better than providing a standard WIF?Well, if I make a custom multisig with someone else, and I export the private key, even if I don't know the redeem script itself, it may be useful to know what the key was used for. An implementation that doesn't support custom redeem scripts would probably keep it unimplemented, but that's a good thing, right? They can't spend the UTXOs anyway.@kallewoof but they have no assurance that the key is actually using _their_ redeem scripts.
Its a back-to-square one issue,  an implementation could _always_ check every type to see if there are transactions on those addresses,  but this BIP was about marking the WIF with an encoded 'guarantee' to reduce that, no?Yes, that is true. For completeness sake, there is something to be gained from having every type listed, even if you don't have all the details. Contrarily, having a custom script with an associated private key, which type would it be, if we removed the P2SH type?@kallewoof I think there is no point in having a flag to say ""this is some form of P2SH but you don't know what"". If you're going to need to give additional information anyway, you might as well just give the private key in normal WIF format plus whatever other information is needed.

My view is that this typed WIF format is really just a shorthand notation for ""here is a private key, and I've conveniently packed the address alongside it"". If using the shorthand doesn't let you get rid of additional information, don't use it.So basically, use 0x01 for keys that are in custom stuff? That means wallets will import all types rather than import nothing, knowing they will never see the UTXO.

Presuming the user wants to store the private key separately. I guess you're saying they shouldn't.Yes, my point is that if you're using a custom script/address, you *must* have more information. There is simply no way you could hope to have everything in one string. And there is no need for that, I think.

In the general case, you will provide your wallet with a bunch of information to describe what outputs you mean, and which private keys are relevant for it. In a few exceptionally simple (but remarkably common) cases, you get to put everything in one string.So, conclusively, do not include types that we won't be able to use without additional information anyway. I.e. remove P2SH, P2WSH, and P2WSH_P2SH, and keep the rest.And then use 0x01=P2PKH_COMPRESSED for 'custom stuff' exactly like is done today.Updated BIP, removing the 3 script-dependent types.What is the semantic difference between `0x01` and `0x10` here?
> Unknown public key format

?@kallewoof I think having script-hash types is fine once the flag tells you what the redeemscript is. I see no harm in having P2SH_P2WPKH, P2WSH_P2PKH, and if we support producing those scriptPubKeys. Script hash scripts have no degrees of freedom besides the script they commit to, so IMO supporting script-hash extensions is pretty natural.

We could leave it the way it was before, assuming they refer to P2PKH.. 
Or we could use bits 2 and 3 to indicate P2SH and P2WSH, and maybe use others to indicate the scriptPubKey type?

Another, is just ignore script-hash usage entirely, and assume the software will deal with it.@dcousens 0x10 means it is a 1.. key, and nothing else. 0x01 means it can be any kind of key (i.e. the key was made before the BIP-178 was implemented so you don't know what kind).@kallewoof a `1...` key... so P2PKH?

Are you suggesting that this is for users who generated the uncompressed form from the compressed key given,  and therefore the targeted compression [for the _address_] is ambiguous?
If so, ACK, but, that wasn't clear to me from the text.Yup. The `0x01` is ""old format, we don't know what kind it is"". The `0x10` is ""this is a legacy non-segwit p2pkh"". I'll update to clarify."
jimpo,677,,BIP 158: Change test vectors from CSV to JSON format.,closed,2018-05-20 08:35:49,"The JSON format is standard for Bitcoin Core test data, and projects that copy test data from Core. This does some additional refactoring to the gentestvectors.go program.

@aakselrod ",https://github.com/bitcoin/bips/pull/677,"['bip-0158/gentestvectors.go', 'bip-0158/testnet-20.csv', 'bip-0158/testnet-20.json']",2018-05-20T08:35:49Z,,,@luke-jr Ping,
sdaftuar,639,,Remove 'hard fork' designation on BIP 90,closed,2018-05-20 08:33:03,"#478 added a label to BIP 90 that I disagree with.  While the term ""hard fork"" is sometimes used in the way defined in BIP 123, it also is used by many -- including the BIP 123 author -- to refer to consensus changes that require network-wide coordination in deployment to avoid a chain split[1], which is untrue for BIP 90.

As the whole purpose of this BIP is explain the type of consensus change that was made and point out that the network split risk is minimal, I don't accept the label ""hard fork"" as a useful or correct designation, and I think it does a disservice to our collective understanding of consensus changes to try to apply a label like this.

--

[1] From https://medium.com/@elombrozo/forks-signaling-and-activation-d60b6abda49a:

> Since hard forks loosen or eliminate existing rules, blocks which would have been rejected by the old rules are now accepted by nodes using the new rules. Examples include increasing the block reward, increasing the maximum base block size, changing the block header format, or changing the proof of work function. Nodes that do not update their rules will reject these blocks and will continue to follow only chains that enforce the old rules. This means that unless all nodes update, we will get a chain split.
",https://github.com/bitcoin/bips/pull/639,"['README.mediawiki', 'bip-0090.mediawiki']",2018-05-20T08:33:03Z,,"['gmaxwell', 'MarcoFalke', 'jnewbery', 'morcos', 'TheBlueMatt', 'laanwj', 'luke-jr', 'evoskuil']","ACK. I don't think _hard fork_ or _soft fork_ accurately describe this change.NACK - the term is clearly correct as used. ACK.
Also I didn't know BIP 90 could be changed over it's author's objection as seems to be the case here.""Consensus"" is not a valid layer by itself. And not only is it technically a hardfork, but that it is one is the only reason it was a subject matter for a BIP in the first place. If not a hardfork, it would otherwise only be an implementation detail, which doesn't need to be coordinated across software in the ecosystem.

I am personally divided whether we should have BIPs for these. But if we *aren't* going to treat them like live (for lack of a better term) hardforks, then we shouldn't have BIPs for them at all, and PR #638 shouldn't be added...(This topic should be brought up on the bitcoin-dev mailing list for discussion.)@luke-jr Can you explain to me what you think the process here is?@sdaftuar I think the process is to post to bitcoin-dev mailing list with a writeup saying something along the lines of ""BIP 123 categorization might not be the best thing to do. Do people agree to get rid of it. Or even better, has anyone a better proposal?""

I think in the long term everyone agrees to use some (hopefully) clearer categorization... In fact, instead of ""working around"" it and fixing only this BIP, we could use it as motivation to fix the general problem.There isn't a problem with this BIP. The layer is correct... The only real question is whether we consider these kinda of hardforks as a standard/BIP, or an implementation detail (no BIP).>There isn't a problem with this BIP. The layer is correct... The only real question is whether we consider these kinda of hardforks as a standard/BIP, or an implementation detail (no BIP).

I disagree.  I think another real question is whether the BIP editor can modify the header against an author's wishes, as was done here.

An additional question is whether BIP 123 is misguided in the first place.  I gave one example above, of commentary from the BIP 123 author about hard forks that suggests the common understanding of a ""hard fork"" is something other than the change introduced by BIP 90.  I found another example in BIP 2, under the description of progressing a BIP to ""Final"" status:

> A hard-fork BIP requires adoption from the entire Bitcoin economy, particularly including those selling desirable goods and services in exchange for bitcoin payments, as well as Bitcoin holders who wish to spend or would spend their bitcoins (including selling for other currencies) differently in the event of such a hard-fork. Adoption must be expressed by de facto usage of the hard-fork in practice (ie, not merely expressing public support, although that is a good step to establish agreement before adoption of the BIP). This economic adoption cannot be established merely by a super-majority, except by literally forcing the minority to accept the hard-fork (whether this is viable or not is outside the scope of this document).

BIP 90 is, in my view, ""Final"", yet I don't believe the above paragraph applies to it.  In my view, the point of putting the ""Consensus layer"" designation in the header is to aid in a reader's understanding of the change that was made.  In this case, the term ""hard fork"" seems to be generally used to mean something other than the kind of change that was documented in BIP 90 -- even according to the language in BIP 2.  

As to your question of whether these kind of consensus changes are mere implementation details that should not be documented as BIPs: the fact that there is disagreement over whether the change that this BIP describes is a good idea (at least one commenter ""NACK""ed the change, in discussion on the mailing list) suggests that this is more than an implementation detail, and that documentation and discussion is worthwhile.  And since the changes affect existing, published BIPs, I don't know of a better place to document such changes other than as a BIP itself.

Further, I'm not sure why you think that is the ""only real question"" here -- that question doesn't apply to existing BIPs, only new ones.  The subject of this PR is an existing, implemented BIP.

--

As for alternatives to BIP 123 -- I think a framework more along the lines of what [Johnson Lau wrote up](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/013985.html) could be helpful.  Overall, I think we've learned over the years that the terms ""soft fork"" and ""hard fork"" are not very descriptive to indicate the scope of the sort of changes that can be made, or how safe such a proposed change can be to deploy.

But while I'd prefer that we move away from BIP 123, I don't really feel like I should have to sway the whole community to adopt a new framework in order to get the language reverted on a BIP that I have authored.  Changing the document without my approval should not have happened in the first place.  While that may have been an honest mistake, we should not hold up correcting it.If it’s a hard fork (which this is) it should be documented. It’s not clear to me why there is resistance to doing so.@evoskuil I believe the text of the BIP explains that, in excruciating detail.It goes to great lengths to explain that the chance of a chain split from the hard fork is low (or cost of producing it is high), but it does not explain why the author does not want to call the hard fork a hard fork.To be clear, the document itself was not changed, only the preamble/header, which is explicitly the BIP editor's job to maintain.@luke-jr What is the process for getting the BIP editor to revert a change to the header?ACK.  The characterization of the material described in BIP 90 as a hardfork is simply false on its face. It would seem that technical accuracy is taking a back seat to political concerns. Certain people have an interest in preserving a claim that Core has never hardforked. In fact I raised this question when bip90 was implemented. The change was an unnecessary hardfork. As I pointed out on bitcoin-dev at the time, the performance optimization was achievable without a consensus change (as libbitcoin had already done it). This observation went unanswered. The shortcut was taken, it is a hardfork, whether this bip calls it one or not.The claim I am referring to is important to some people because it is the basis of a claim that Core represents the true Bitcoin. Otherwise we would not be niggling over the use of the term hardfork in this bip. Core can still claim that it has not introduced a hardfork that has caused a chain split, so there’s still that, but this ship has sailed.Regardless of whether this hardfork ""counts"" or not, there was still the 2013 May hardfork removing the db lock limits that could be used as an example that Core has done a hardfork before. So I don't think that's it. And this fact doesn't take away from Bitcoin being Bitcoin at all anyway.While I agree with you that the [BIP50](https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki) hardfork did in fact happen, there is also [denial](https://www.reddit.com/r/btc/comments/5qx18i/bitcoincom_loses_132btc_trying_to_fork_the/dd30si7/) of [this fact](https://www.reddit.com/r/btc/comments/5rc7an/despite_what_core_supporters_may_claim_bitcoin/) among Core contributors, which only reinforces my point.

While you and I both accept the fact that the BIP50 and BIP90 hardforks happened, there are those willing to use torturous language to preserve the illusion that Core has never hardforked. There is only one rational explanation for this, which is the idea of an objective criteria for definition of the one true Bitcoin.

As one who does not find the concept of a ""legitimate"" Bitcoin objective or even interesting, it is easy for me to see that these arguments are bogus and motivated by petty self-interest. Core folks can claim that they have produced only two hardforks, one of which was unintentional and the other has not yet resulted in a chain split. At least that's accurate (until https://github.com/bitcoin/bips/pull/638) and an actual differentiation.@luke-jr  Can you please answer my question above, about what process you think is necessary to get the BIP editor to revert the header change?ping @luke-jr  Sorry to keep asking but I don't know how I'm supposed to proceed.  Can you please explain the process that you think I need to follow in order to get this merged?What’s the process for changing the meaning of words? One option is to [gain control of a small country](http://amp.slate.com/blogs/atlas_obscura/2014/02/06/saparmurat_niyazov_former_president_of_turkmenistan_has_left_quite_the_legacy.html)... “the word for bread were changed to his mother's name.”ACKThis is a reversion to the BIP author's original intent and has 4 ACKs. Presumably it can be merged?The issue that @luke-jr has raised has not been addressed. If this BIP does not represent a hard fork it is an implementation detail, not a protocol change, and therefore does not warrant a BIP. OTOH, if it is a protocol change, it's a hard fork.

A comparable issue could be raised with the removal of the removal of BIP30 check following the activation of BIP34. This change was only a fork if one considers hash collisions possible. Of course hash collisions are possible, but most implementations accept the assumption that they are not. Under this assumption the change became an implementation detail and did therefore not warrant a BIP.

If the community similarly accepts the assumption that deep reorgs are not possible, then BIP90 is just an implementation detail, and does not warrant a BIP. However this assumption is clearly **not** generally accepted. For it to be accepted there would need to at least be some agreement on the depth at which reorgs are considered **impossible**. That implies that implementations should **enforce** such a limit, ensuring that it is **actually** impossible.

As I see it, and as I have mentioned previously, this attempt to move BIP90 into the ambiguous (and irrational) category of ""fork that's neither hard nor soft"" is being sought as a matter of precedent. There is another pending proposal that attempts to apply the same ""maximum reorg depth"" rationale in other areas. The **only** reason these categorizations matter to people is in the marketing war over what is the ""one true chain"". As the argument goes, if there are no hard forks it's still the true Bitcoin. That argument has already been surrendered by the merge of BIP90.This seems pretty obviously correct to me. ""hard fork"" implies, well, a fork, whereas a historical rule simplification pretty much isnt. If we intend BIPs to be a way for people to learn about the workings of Bitcoin/be a useful reference, calling things by an appropriate term, instead of some technical quirk resulting in something being called a ""hard fork"" is much more useful. ACK.A great many core development discussions pertaining to hard forks do not support your theory, nor does the existing BIP99 definition of a hard fork. In fact I think it would be hard to find any thread that supports the idea that a forked block must be mined in order for a rule change to be a hard fork. You are conflating hard fork with chain split. They are NOT the same. If we want BIPs to be useful they need to be both correct and consistent.I did not claim a forked block ""must be mined"", that would obviously be wrong, but you're arguing against a straw man there. What is more important is that it is conceivable that a forked block *could* be mined. In the case described here, thats absurd, if it were to happen we'd probably all decide to give up on Bitcoin entirely, thus calling it a ""fork"" is obviously wrong.In other words it is (without question) a hard fork that is (presumably) unlikely to cause a chain split. As I proposed, if there is a depth (or amount of work) that we *assume impossible* to overcome, we must clearly define that level and implementations must consistently enforce it. Otherwise every dev can make an argument about what depth is seemingly impossible, and deploy it claiming no fork. I’m sure some would argue 100 blocks is more than sufficient. 

But again I will point out that the *only* reason this question matters is the marketing battle over the “one true chain”. We are not discussing protocol or even implementation, but how (and why) to define a deployed hard fork as not a hard fork.> But again I will point out that the only reason this question matters is the marketing battle over the “one true chain”. We are not discussing protocol or even implementation, but how (and why) to define a deployed hard fork as not a hard fork.

Please go troll elsewhere. You can use any arbitrarily pedantic and useless definitions you'd like, but if you want to ignore reality of something just to make your pedantic definitions feel more warm and fuzzy, dont do it here.",
aakselrod,668,,BIP158: add test vectors and generation code,closed,2018-04-08 02:50:55,"In this PR, we add test vectors for filter and header construction and the code to generate them. The included test vectors are for testnet with a value of 20 for P. The code generates filters and headers for values of 1 through 32 for P using testnet blocks. Currently, to run the code, the `Roasbeef` fork of `btcd` (at https://github.com/roasbeef/btcd) is required to be running locally in testnet mode; this will be changed in a future PR after the code is merged into the `btcsuite` mainline.",https://github.com/bitcoin/bips/pull/668,"['bip-0158.mediawiki', 'bip-0158/gentestvectors.go', 'bip-0158/testnet-20.csv']",2018-04-08T02:50:55Z,,['MattLongCT'],"You certainly knocked that off the ""TODO""! Code generation is properly formatted in my limited view.",
harding,670,,BIP66: link to disclosure of consensus failure bug,closed,2018-04-08 02:49:01,"BIP author: @sipa

Recently, a developer learning about Bitcoin contacted me with some questions about BIP66 and I discovered through our conversation that he wasn't aware of what I believe is this important context for the soft fork.  I sent him a link, but I'd like to propose linking to it directly from the BIP for the historical record.

I know modifying *final* BIPs is frowned upon, so if this is unacceptable, I'll add it instead to the wiki page indicated by the Comments-URI field.",https://github.com/bitcoin/bips/pull/670,['bip-0066.mediawiki'],2018-04-08T02:49:01Z,,"['sipa', 'MarcoFalke']",ACK from me; I'll leave the decision whether to include this in the text or as a comment to the BIP editor.,nit: Format is mediawiki not mdThanks!  Fixed with a force push.
achow101,669,,BIP 174: Clarify that global data can be for inputs and outputs,closed,2018-04-05 03:33:33,"Clarifies that global data fields redeem scripts, witness scripts,
and hd keypaths can be used for data necessary for both the inputs
and outputs of the transaction.",https://github.com/bitcoin/bips/pull/669,['bip-0174.mediawiki'],2018-04-05T03:33:33Z,,['devrandom'],ACK,
Alegege,655,Proposed BIP modification,BIP 9: Misplaced table cells typo,closed,2018-04-01 05:45:24,Second row was created with an incorrect extra empty cell,https://github.com/bitcoin/bips/pull/655,['bip-0009/assignments.mediawiki'],2018-04-01T05:45:24Z,,"['petertodd', 'luke-jr']",@sipa @petertodd @gmaxwell @rustyrussell ACK,
Roasbeef,667,,BIP158: include the direct pkScript rather than its data pushes,closed,2018-04-01 02:59:53,"In this commit, we modify regular filter construction slightly.  Rather
than including each pushed data in the script, we instead just include
the script directly, which will eventually be hashed. The rationale for
doing this is two-fold:

  * Most scripts today and in the foreseeable future will just be a
    commitment.

  * Including only the script itself and not the hash of the script
    reduces the worst case filter size. Otherwise, an attacker could
    include a bunch of 2 byte push datas and blow up the filter size for
    all nodes.",https://github.com/bitcoin/bips/pull/667,['bip-0158.mediawiki'],2018-04-01T02:59:53Z,,"['tuxcanfly', 'jimpo']",+1+1 this will simplify the implementation as well.,
Varunram,662,Proposed BIP modification,[trivial] Correct typos in BIP 98,closed,2018-03-10 19:27:34,"Changes:

least <- lest
hashes <- hashses
addendum <- ammendum",https://github.com/bitcoin/bips/pull/662,['bip-0098.mediawiki'],2018-03-10T19:27:34Z,,"['maaku', 'luke-jr']",@maaku @kallewoof @btcdrak ACK,
zaq1tomo,660,Proposed BIP modification,Fix format [in BIP65] ,closed,2018-03-06 18:54:10,,https://github.com/bitcoin/bips/pull/660,['bip-0065.mediawiki'],2018-03-06T18:54:10Z,,"['petertodd', 'luke-jr']",@petertodd ACK,
rolandgnm,556,Proposed BIP modification,Organizes Recent Changes chronologically .,closed,2018-02-21 22:18:28,,https://github.com/bitcoin/bips/pull/556,['bip-0032.mediawiki'],2018-02-21T22:18:28Z,,"['sipa', 'luke-jr']",@sipaack,
dangershony,647,Proposed BIP modification,Fix a grammar error,closed,2018-02-13 01:30:32,,https://github.com/bitcoin/bips/pull/647,['bip-0098.mediawiki'],2018-02-13T01:30:32Z,,"['maaku', 'luke-jr']",@maaku @kallewoof @btcdrak Ack ,
russellpwirtz,635,Proposed BIP modification,fix grammar error,closed,2018-02-12 23:35:58,"""it's"" is the contraction of ""it"" and ""is"". ""its"" should be used for ownership",https://github.com/bitcoin/bips/pull/635,['bip-0045.mediawiki'],2018-02-12T23:35:58Z,,['luke-jr'],@maraoz @matiu ,
jl2012,584,Pending acceptance,Update status for segwit related BIPs,closed,2018-02-12 03:30:42,,https://github.com/bitcoin/bips/pull/584,"['README.mediawiki', 'bip-0009/assignments.mediawiki', 'bip-0141.mediawiki', 'bip-0143.mediawiki', 'bip-0144.mediawiki', 'bip-0147.mediawiki']",2018-02-12T03:30:42Z,,"['CodeShark', 'sipa', 'ysangkok', 'btcdrak', 'jonathancross', 'luke-jr']","You could also update `bip-0009/assignments.mediawiki`Merged BIP 142 & 145 status changes.

@CodeShark @sipa Please ACK progression of BIP 144 to Final status.@luke-jr Isnt the status of these BIPs defined by the fact the BIPs were activated by the network, and therefore this PR is obviously correct.ACKACK@jl2012 Please rebase.",
kallerosenbaum,645,,Withdrawing BIP120/121 due to security issues during soft-forks,closed,2018-02-10 22:16:32,"There is an inherent problem with BIP120, Proof of Payment: If there is a soft fork, a server that verifies PoPs will accept a PoP as valid without checking any of the new Bitcoin rules.

For example, a server will be fooled by a segwit transaction, because the server doesn't have a witness to verify and consequently will accept any PoP with an empty scriptSig.

Since BIP121 depends on BIP120, that has to go too.",https://github.com/bitcoin/bips/pull/645,"['README.mediawiki', 'bip-0120.mediawiki', 'bip-0121.mediawiki']",2018-02-10T22:16:32Z,,,,
yuzushioh,625,Proposed BIP modification,Add BIP39 Swift implementation link,closed,2018-02-05 04:31:02,I added a BIP39 Swift implementation link.,https://github.com/bitcoin/bips/pull/625,['bip-0039.mediawiki'],2018-02-05T04:31:02Z,,"['prusnak', 'luke-jr']",@slush0 @prusnak @voisine @ebfull ack,
Xeoncross,641,Proposed BIP modification,Update bip-0039.mediawiki with Go lib,closed,2018-02-05 04:30:15,Add Go library,https://github.com/bitcoin/bips/pull/641,['bip-0039.mediawiki'],2018-02-05T04:30:15Z,,"['prusnak', 'montvid', 'luke-jr']","@slush0 @prusnak @voisine @ebfull ackI wanted to ask why is bip-39 still worked on if it is ""Unanimously Discourage for implementation""? As I understand it needs to be replaced with a better proposal why people are using it if it is discouraged? I see that I can't open an issue on this - where can I discuss this problem?@montvid Anyone is free to implement or not implement whatever they like.@montvid I found this repo outside of bitcoin usage. However, when you say this is a ""Unanimously Discourage for implementation"" I assume you mean for bitcoin that having a global population save English words as a key is not a good idea.@Xeoncross see here for comments made by bitcoin core and electrum developers discouraging this implementation. So far i know the electrum devs are writing a bip at the moment for a better implementation. https://github.com/bitcoin/bips/wiki/Comments:BIP-0039",
mmgen,637,Proposed BIP modification,"Fix single typo in BIP65 (""from"" -> ""form"")",closed,2018-02-05 04:29:35,"Current text:
> Using the same scriptPubKey **from** as in the Two-factor wallets example solves both these issues.

Proposed text:
> Using the same scriptPubKey **form** as in the Two-factor wallets example solves both these issues.

",https://github.com/bitcoin/bips/pull/637,['bip-0065.mediawiki'],2018-02-05T04:29:35Z,,"['petertodd', 'luke-jr']",@petertodd ACK,
jimpo,636,New BIP,BIPs 157 & 158: Block Filtering stuff,closed,2018-01-23 02:42:33,"This is a revision of #609 that is intended as a replacement due to the number of substantial changes. Test vectors will be added once the BIP has been reviewed by the community and the reference implementation is updated.

### Abstract

This BIP describes a new light client protocol in Bitcoin that improves upon currently available options. The standard light client protocol in use today, defined in BIP 37, has known flaws that weaken the security and privacy of clients and allow denial-of-service attack vectors on full nodes. The new protocol overcomes these issues by allowing light clients to obtain compact probabilistic filters of block content from full nodes and download full blocks if the filter matches relevant data.

New P2P messages empower light clients to securely sync the blockchain without relying on a trusted source. This BIP also defines a filter header, which serves as a commitment to all filters for previous blocks and provides the ability to efficiently detect malicious or faulty peers serving invalid filters. The resulting protocol guarantees that light clients with at least one honest peer are able to identify the correct block filters.

### State of Implementation

We've tested the implementation of both a [light client implementing this BIP](https://github.com/lightninglabs/neutrino), as well as the serving full-node on Bitcoin's testnet over the past several months. Additionally, this new operating mode also serves as the basis for our [light weight Lightning node](https://github.com/lightningnetwork/lnd/). These implementations are based on an earlier version of the spec, and require some updates.",https://github.com/bitcoin/bips/pull/636,"['README.mediawiki', 'bip-0157.mediawiki', 'bip-0158.mediawiki']",2018-01-23T02:42:33Z,,"['luke-jr', 'hkjn']","Please use BIP number 158.@luke-jr Thanks! There are two BIPs now though. It would be nice to get two sequential numbers.Two BIPs? What am I overlooking? I don't see that?There are two files. They are related, but separate BIPs.

1. Client Side Block Filtering
2. Compact Block Filters for Light ClientsSorry, totally overlooked that this PR had two files.. Let's go with 157 & 158 then? Also, note there is no `Editor` key in the preamble.Great, thanks. Will update shortly.@luke-jr Anything else required for merge here?Looks goodMaybe you're already aware, but FYI there's a remaining `TODO` in BIP158 for test vectors:
* https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki#appendix-c-test-vectors

cc @jimpo @luke-jr ",
Bomper,634,,Link to the mailing list,closed,2018-01-15 09:31:33,,https://github.com/bitcoin/bips/pull/634,['README.mediawiki'],2018-01-15T09:31:33Z,,['luke-jr'],"Might make more sense to link the ML itself...

Also, new BIPs should be opened as a PR, not emailed to me. Maybe fix that at the same time.",
maaku,633,,BIP-0117: Change semantics of multi-element tail call to not require stack elements to be exactly 520 bytes in size,closed,2018-01-11 06:20:27,"This allows for more compact direct encoding of scripts of the form ""pick 2 of 3 spend conditions"" without enabling witness malleability in expected use cases as the components would still be checked against a pre-committed hash tree.",https://github.com/bitcoin/bips/pull/633,['bip-0117.mediawiki'],2018-01-11T06:20:27Z,,['kallewoof'],ACK,
maaku,632,,BIP-0117: Correct the examples to use the most recent version of MERKLEBRANCHVERIFY,closed,2018-01-10 06:04:09,The example scripts in BIP 117 presently use an outdated form of the MERKLEBRANCHVERIFY opcode. This patch updates them to the most recent version of the specification.,https://github.com/bitcoin/bips/pull/632,['bip-0117.mediawiki'],2018-01-10T06:04:09Z,,['kallewoof'],ACK,
achow101,631,,More BIP 174 tests,closed,2018-01-06 23:14:46,,https://github.com/bitcoin/bips/pull/631,['bip-0174.mediawiki'],2018-01-06T23:14:46Z,,,,
NicolasDorier,630,Proposed BIP modification,Fix link,closed,2018-01-05 10:34:45,,https://github.com/bitcoin/bips/pull/630,['bip-0116.mediawiki'],2018-01-05T10:34:45Z,,"['maaku', 'luke-jr']",@maaku @btcdrak ACK,
achow101,629,,Tests for BIP 174 and some wording clarifications,closed,2018-01-05 04:22:40,"@dcousens, @junderw, @sipa, and @instagibbs may be interested in this.

Further tests and comments would be appreciated.",https://github.com/bitcoin/bips/pull/629,['bip-0174.mediawiki'],2018-01-05T04:22:40Z,,,,
sipa,627,,Progress BIP173 to Proposed,closed,2018-01-03 17:22:45,"I believe that the BIP173 standard is complete and won't functionally change anymore. As required by BIP2, I believe there are community plans to progress it to final (given that multiple wallet implementations support or plan to support it).",https://github.com/bitcoin/bips/pull/627,"['README.mediawiki', 'bip-0173.mediawiki']",2018-01-03T17:22:45Z,,"['TheBlueMatt', 'MarcoFalke']","Seems reasonable given it has been adopted in numerous wallets already.

On January 3, 2018 4:54:39 PM UTC, Pieter Wuille <notifications@github.com> wrote:
>I believe that the BIP173 standard is complete and won't functionally
>change anymore. As required by BIP2, I believe there are community
>plans to progress it to final (given that multiple wallet
>implementations support or plan to support it).
>You can view, comment on, or merge this pull request online at:
>
>  https://github.com/bitcoin/bips/pull/627
>
>-- Commit Summary --
>
>  * Progress BIP173 to Proposed
>
>-- File Changes --
>
>    M bip-0173.mediawiki (2)
>
>-- Patch Links --
>
>https://github.com/bitcoin/bips/pull/627.patch
>https://github.com/bitcoin/bips/pull/627.diff
>
>-- 
>You are receiving this because you are subscribed to this thread.
>Reply to this email directly or view it on GitHub:
>https://github.com/bitcoin/bips/pull/627
No idea why Travis fails.","Try replacing the ""empty"" line in 753 with `|- style=""background-color: #ffffcf""`"
prusnak,624,,bip-0084: add extended public keys to test vectors,closed,2018-01-02 01:53:59,,https://github.com/bitcoin/bips/pull/624,['bip-0084.mediawiki'],2018-01-02T01:53:59Z,,,,
prusnak,620,New BIP,BIP 84: Derivation scheme for P2WPKH based accounts,closed,2017-12-31 15:08:33,,https://github.com/bitcoin/bips/pull/620,"['README.mediawiki', 'bip-0084.mediawiki']",2017-12-31T15:08:33Z,,"['erasmospunk', 'karel-3d', 'luke-jr', 'clarkmoody']","Please choose an [acceptable copyright license](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#Recommended_licenses).Can you assign the number so I will change the license in PR changing
the number?
Let's go with 84.Looks good.I have fixed, squashed and force-pushed the mediawiki issue that made github to render the whole thing twice :)README needs an updateUpdated README, fixed inline code syntax.",MediaWiki format uses `<code>some_code</code>` for inline code samples.
jimmysong,618,New BIP,BIP 176: Utilization of bits denomination,closed,2017-12-23 04:01:04,,https://github.com/bitcoin/bips/pull/618,"['README.mediawiki', 'bip-0176.mediawiki']",2017-12-23T04:01:04Z,,"['tamasblummer', 'stefek99', 'luke-jr']","For merge, rename to use BIP 176 and add to README.

Suggestions:

* Definition should probably be specified in satoshis
* Title might be better off something like ""Bits denomination"" or something@luke-jr Suggestions addressed!Apologies for the premature squash. I think I've addressed your comments. @luke-jr Got build to pass. Apologies for not checking that earlier.Amounts denominated in bits would fit nicely into legacy database structures and UIs with two decimal places for currency.This isn't the right place to comment on the BIP.

https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev@luke-jr I've followed your advice about mailing list: 

> Detailed patch discussion generally better on a GitHub PR. 

Plus there is nothing on the list:

![image](https://user-images.githubusercontent.com/249703/34484298-24b98c5c-efc4-11e7-816d-a5057bb68947.png)


---

Bitcoin: `1 BTC`

Satoshi: `0.00000001 BTC`

The only other units I've ever heard in my life:
- millis
- bits

In my head 1 bit is `0.001` (one thousand of the BTC)

---

At the current rates 1 bit (according to my head) is `$13.5` - I can handle such denomination in my head:

- lunch is 1 bit
- beer in a pub is 0.3 bits
- plane ticket is 10 bits

--- 

My suggestion would be to revisit this BIP and PR and do a poll... I don't see much activity here, sample is too small.That's the moderation ML, not the bitcoin-dev ML...

This PR is merged; it's a closed topic.

Feel free to do whatever polling you want, but BIPs are optional regardless.Ouch. Wrong list.

This is the correct link: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-December/015399.html

Github PRs are not set in stone. It is always possible to revisit the thing

---

Did Google search for ""bitcoin bits"" and you are probably right

* https://en.bitcoin.it/wiki/Units#Bits
* https://support.xapo.com/what-are-bits

> cos musialo mi sie pojebac

(a polish phrase)",Needs fixingNeed Comments-Summary tooThere's no code in this?
MarcoFalke,617,,bip159: Clarify that there is only one threshold,closed,2017-12-19 19:10:38,"@jonasschnelli 

Changes:
* The last section mentions ""thresholds"", while only a single threshold of 244 is specified in the bip. Clarify by changing to ""threshold""
* Remove internal Bitcoin Core implementation detail. This is not relevant for a bip.
* Remove word ""additional"" when referring to safety buffer, since the safety buffer is the only buffer and not an additional one.
* Remove empty section ""references""
* Add missing link to signaling implementation.",https://github.com/bitcoin/bips/pull/617,['bip-0159.mediawiki'],2017-12-19T19:10:38Z,,['jonasschnelli'],"Thanks!
ACK f455a24da7b098d390b6405ae19826d0c5684c3eAdded a link to the signaling implementation after your review.Also ACK fa9a4f307eb241b69f04681c3da35b7f69cf9fd5",
dcousens,616,,BIP174: refactor responsibilities for simplicity and clarity,closed,2017-12-13 01:06:03,,https://github.com/bitcoin/bips/pull/616,['bip-0174.mediawiki'],2017-12-13T01:06:03Z,,['achow101'],ACK,
moodmosaic,613,Proposed BIP modification,Update compatible wallets list,closed,2017-11-28 23:57:24,,https://github.com/bitcoin/bips/pull/613,['bip-0044.mediawiki'],2017-11-28T23:57:24Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak NACK, wrong URLOps, sorry about that. I'm about to fix it.Fixed in efd1068.Not fixed, I can still see `https://https://`I can't believe this is me, but what can I say. It's fixed and force-pushed in c54e7f9. ack",
zylstra,611,Proposed BIP modification,Typos,closed,2017-11-16 13:22:19,,https://github.com/bitcoin/bips/pull/611,['bip-0049.mediawiki'],2017-11-16T13:22:19Z,,"['luke-jr', 'DanielWeigl']","@DanielWeigl Yes, looks fine to me",
kallewoof,610,New BIP,"BIPs 98, 116, and 117: Fast Merkle Trees; MERKLEBRANCHVERIFY; Tail Call Execution Semantics",closed,2017-11-16 13:16:48,,https://github.com/bitcoin/bips/pull/610,"['README.mediawiki', 'bip-0098.mediawiki', 'bip-0098/build.sh', 'bip-0098/node-variants.dot', 'bip-0098/node-variants.png', 'bip-0098/skip-skip.dot', 'bip-0098/skip-skip.png', 'bip-0098/traversal-example.dot', 'bip-0098/traversal-example.png', 'bip-0098/unbalanced-hash-tree.dot', 'bip-0098/unbalanced-hash-tree.png', 'bip-0116.mediawiki', 'bip-0117.mediawiki']",2017-11-16T13:16:48Z,,"['alexanderkjeldaas', 'luke-jr']","""(Consensus layer)"" in the title of BIP 116 might be redundant with the Layer header, considering there's only one MERKLEBRANCHVERIFY BIP.Added copyright sections. Will work out backwards compatibility and push changes. Added compatibility sections.A quick read-through... there are a few things I would like to see in this BIP.  At least they would make it clearer to me. There should be a more comprehensive section on what this is NOT about.  For example:

1.  Who will be interpreting the proofs?  It seems like this is for the specific case where the receiver has no context or existing hashes.  This should be clarified.  If the receiver has a database of existing hashes, then much more efficient encodings are available (as used by git when displaying hashes for example).
2. The encoding seems to be focusing on defining multiple items in a set.  How about the single item case?
2. SKIP, DESCEND, and VERIFY are not defined.
3. I'm not sure, but it seems like some of the tree layouts are impossible in certain cases, for example when N-1 nodes have been defined, then the Nth node can't have any shape.

All in all, for various more focused cases, I'm guessing that the encoding could be significantly smaller than this.

On generic way of compressing the encoding would be to slice the hashes so 1 bit is encoded on each hash throughout the tree before the next bit is encoded.   This makes it possible to truncate the tree at some arbitrary point in order to use truncated hashes that can still be unique given some semantic rule as to how to order hashes.
",
SomberNight,607,,"BIP-173: fix typo in ""Created"" date",closed,2017-11-07 22:00:23,"I can't find much about bech32 anywhere, before March 2017.

Based on the date of this commit, I think there is a typo in the date. https://github.com/sipa/bech32/commit/52b5a0fa6d3174c4150393fb7d6b58d34b4f5e0b",https://github.com/bitcoin/bips/pull/607,['bip-0173.mediawiki'],2017-11-07T22:00:23Z,,['sipa'],ACK,
jonathancross,606,,BIP-2: Fix link to Bitcoin Wallet for Android's wallet/README.specs.md,closed,2017-11-06 22:55:23,"""README.specs"" was renamed ""README.specs.md""",https://github.com/bitcoin/bips/pull/606,['bip-0002.mediawiki'],2017-11-06T22:55:23Z,,['schildbach'],"Thanks for spotting this. However, the correct link would be https://github.com/bitcoin-wallet/bitcoin-wallet/blob/master/wallet/README.specs.mdNow fixed to avoid redirect. Thanks @schildbach!",
instagibbs,488,Proposed BIP modification,Slight clarification for replacement implementation,closed,2017-11-06 22:52:55,"Grouped the two sections explaining the fee evaluation, then removed a redundant clause in the middle of the latter paragraph that confused the meaning.

@harding @petertodd ping authors",https://github.com/bitcoin/bips/pull/488,['bip-0125.mediawiki'],2017-11-06T22:52:55Z,,"['harding', 'jonathancross']",@luke-jr This is ready to merge.,"""an absolute fee at least"" -> ""an absolute fee **of** at least"" (sounds better to my ears, but either way seems fine)you're right, updating"
omarshibli,604,,Adding payment_base to the derivation path as an extra step of security ,closed,2017-10-31 04:13:49,"Based on community feedback we are adding the payment_base as an extra layer of security and prevent mathematically possible contract forgery, with that being said it worth mentioning that this scenario could be very hard due to the fact that this BIP uses BIP32 derivation mechanism which uses hmac-sha512 and the fingerprint of pubkey - chain code.",https://github.com/bitcoin/bips/pull/604,"['bip-0039.mediawiki', 'bip-0175.mediawiki']",2017-10-31T04:13:49Z,,,,
TheBlueMatt,601,,Clarify cmpctblock previous block requirement,closed,2017-10-29 04:14:44,"In all implementations and in the intended reading of ""existing chain"", cmpctblock messages should never be sent without having fully-validated every previous block it builds on, and it being a new candidate tip. Clarify that slightly more for the avoidance of doubt.",https://github.com/bitcoin/bips/pull/601,['bip-0152.mediawiki'],2017-10-29T04:14:44Z,,,,
flack,600,,Typo fix,closed,2017-10-14 03:34:49,,https://github.com/bitcoin/bips/pull/600,['bip-0115.mediawiki'],2017-10-14T03:34:49Z,,,,
omarshibli,599,Proposed BIP modification,BIP39: Removed extra spacing,closed,2017-10-03 07:14:05,"Cosmetic fix in 'Other Implementations' section, removed extra spacing. ",https://github.com/bitcoin/bips/pull/599,['bip-0039.mediawiki'],2017-10-03T07:14:05Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak @voisine @ebfull 
ACK",
omarshibli,598,,BIP175: fixed headers style,closed,2017-10-03 06:53:27,,https://github.com/bitcoin/bips/pull/598,['bip-0175.mediawiki'],2017-10-03T06:53:27Z,,,,
jonathancross,593,Proposed BIP modification,BIP 175 Improvements,closed,2017-10-02 19:46:35,"* Standardizing spelling of ""payer"".
* In examples:
   - Added headings
   - Separated ""document 1:"" label from the contents which are actually hashed (eg ""baz"").
* Misc spelling mistakes.

@omarshibli",https://github.com/bitcoin/bips/pull/593,['bip-0175.mediawiki'],2017-10-02T19:46:35Z,,['omarshibli'],"looks good, thanks a lot.
just one small comment regarding the subheadings in `Examples` section, imho, if you want to make these subheadings, I would consider removing the colon at the end, I don't think colon at the end of string in the contents section would be an aesthetic thing.
<img width=""407"" alt=""examples section screenshot"" src=""https://user-images.githubusercontent.com/1773485/30770485-b5019d42-a03a-11e7-83da-3c26161b31d3.png"">
Thoughts?
ACK
I will submit a separate PR for subheading style.
@luke-jr",
lsaether,597,Proposed BIP modification,rust mnemonic library added,closed,2017-10-01 00:48:40,I'm not affiliated with this implementation but I found it today and it appears to be actively maintained.,https://github.com/bitcoin/bips/pull/597,['bip-0039.mediawiki'],2017-10-01T00:48:40Z,,"['prusnak', 'luke-jr']",@slush0 @prusnak @voisine @ebfull ACK,
danra,591,Proposed BIP modification,Fix broken links in BIP 13,closed,2017-09-27 18:47:10,,https://github.com/bitcoin/bips/pull/591,['bip-0013.mediawiki'],2017-09-27T18:47:10Z,,"['gavinandresen', 'luke-jr']",@gavinandresen ACK,
mruddy,587,Proposed BIP modification,"bip-0173: test vectors, HRP, and casing requirements updates",closed,2017-09-24 19:28:32,"* `a12uel5l`: vector added to demonstrate that it and its uppercase version, `A12UEL5L` are both valid and treated as equal. `segwit_addr.bech32_encode('a', [])`

* `10a06t8`: vector added to demonstrate that a combined empty HRP and empty data encode to a valid Bech32 string. `segwit_addr.bech32_encode('', [])`

* `1qzzfhee`: vector added to demonstrate that an empty HRP encodes to a valid Bech32 string. `segwit_addr.bech32_encode('', [0])`

* `pzry9x0s0muk`: vector moved to a new section as it is misleading in the current section because ""No separator character"" can not affect checksum validity because the separator char is not used to compute the checksum.
```
>>> segwit_addr.bech32_create_checksum('', [1,2,3,4,5,6])
[15, 16, 15, 27, 28, 22]
>>> segwit_addr.bech32_verify_checksum('', [1,2,3,4,5,6]+[15, 16, 15, 27, 28, 22])
True
```

* `1pzry9x0s0muk`: vector removed as incorrect because ""Empty HRP"" is Bech32 valid -- HRP validity is application specific. `segwit_addr.bech32_encode('', [1,2,3,4,5,6])`

* `A1g7sgd8` and `A1G7SGD8`: vectors added to verify that implementations adhere to BIP requirement: ""The lowercase form is used when determining a character's value for checksum purposes."". Note:
```
>>> segwit_addr.bech32_encode('a', [])
'a12uel5l'
>>> segwit_addr.bech32_encode('A', [])
'A1g7sgd8'  # BUG: violates ""The lowercase form is used when determining a character's value for checksum purposes.""
```

* `10a06t8`: test vector added to demonstrate that while a valid Bech32 string, it is segwit application specific invalid.",https://github.com/bitcoin/bips/pull/587,['bip-0173.mediawiki'],2017-09-24T19:28:32Z,,"['sipa', 'luke-jr']","@sipa @gmaxwell In addition to the test vector updates, I made some updates, in a second commit, regarding casing requirements.
Here's my rationale for these additional changes:

Encoding:
HRP should always be lowercased. This is because:
1) From the existing BIP: ""The lowercase form is used when determining a character's value for checksum purposes.""
2) Encoders should always output a non-mixed case Bech32 string. Lowercase is canonical due the previous item, and the fact that the encoding charset is all lowercase. Otherwise, the HRP would need to be scanned to make sure it is consistent case and then upper/lower case according to that finding.

For presentation, or QR code use, a simple uppercasing can be run externally on the encoding result.
This is consistent with the ""A12UEL5L"" test vector currently in the BIP, e.g.:

```
>>> segwit_addr.bech32_encode('a', []).upper()
'A12UEL5L'
```

Decoding:
Because of the BIP requirement that, ""The lowercase form is used when determining a character's value for checksum purposes."":
1) Decoding treats uppercase and lowercase inputs as equal. The hrp still needs to be lowercased before hrp expansion during checksum calculation.
2) The transcription problems associated with mixed-case are avoided without restriction on acceptance of mixed-case input for decoding.
3) Not accepting mixed-case input for decoding is seemingly punitive.

Tangentially related: https://github.com/sipa/bech32/issues/25> Rejecting mixed case is very intentional. Doing so massively reduces the chance of accepting arbitrary text as valid Bech32.

I don't see it that way. The input is always being canonicalized to lower anyways. Am I misunderstanding you somehow? I was working on a java reference impl encoder/decoder and it works. I'll put it up shortly.@mruddy Just because it's canonicalized to lowercase for the purpose of checksum computation doesn't mean that it's valid. There is are extra requirements for validity besides checksum correctness (including maximum length, range of hrp characters, and no mixed case).There is a PR for a Java implementation already: https://github.com/sipa/bech32/pull/19

I welcome review!Here's some java code. Maybe this will clarify:

https://github.com/mruddy/bech32/blob/master/src/org/bitcoin/bips/bip173/bech32/Bech32.java#L110

https://github.com/mruddy/bech32/blob/master/src/org/bitcoin/bips/bip173/bech32/Bech32.java#L177Yes, I saw that PR and thought that I could do better. This is my attempt https://github.com/mruddy/bech32/ :)> Just because it's canonicalized to lowercase for the purpose of checksum computation doesn't mean that it's valid. There is are extra requirements for validity besides checksum correctness (including maximum length, range of hrp characters, and no mixed case).

Agreed, but the case of a-Z and A-Z is interchangeable due to the lowercase canonicalization. That's what I mean by mixed-case.I still don't understand why you want to add ""Decoder must accept mixed case"". I absolutely think it should not.Because from a user standpoint, if they happen to transcribe and get the case wrong somehow, it should still be accepted since the result will be the same.If they transcribe it wrong, the software should complain and they should go back and fix it.

Trying to correct it for them is a footgun. If they can accidentally misread and transcribe as the wrong case, they could equally have transcribed as just the wrong character - and you wouldn't want to correct that for them either (even though error correction algorithms exist).

Effectively, the consistent case is part of the consistency check of the address, together with the checksum.Well, ""wrong"" was not a great word to use. I should have said ""different"" because that's all it is -- not wrong, because they are equal. It's less code to be more user friendly and get the same result.

Maybe I won't be able to persuade you on this point. But, how about the rest of the changes? Once we have general agreement, I'll update accordingly.Big concept ACK on the rest of the changes. I've had other reports that the language was unclear wrt the behaviour of the encoder and uppercase input, and wanted to improve it. This seems like a good solution.

I do want to verify the extra test cases, though.
Cool, thanks.

Also, I was thinking of accepting mixed case not so much as trying to correct users as much as it was unifying code paths.

BTW, the test cases should be testable with the examples in my first comment. I also have those test cases in my java.FYI, I just added a 3rd commit to capture what we discussed. I'll squash it all when we're all set.
I left it separate right now so you can easily see what I incrementally changed.I've updated and squashed everything back into one commit. Besides this BIP update, the reference code will need some updates.

Just wanted to point out that a couple of the things to fix, 1) mixed case encoding output and 2) using the upper case form of the HRP for checksum creation, are identified by this test:
```
>>> segwit_addr.bech32_encode('a', [])
'a12uel5l'
>>> segwit_addr.bech32_encode('A', [])
'A1g7sgd8'
```Added some info about conversion to US-ASCII and unmappable characters.ACK 96d39e80255548c5d95f01f577e59bb90f9d88a9, I've verified all the test vectors.

Thank you!@sipa thanks for reviewing! One more thing. I think we should definitely use UTF-8 instead of US-ASCII. 

I've added a commit and will squash it upon approval.

Doing this will avoid the unmappable character issue and make using this easier for many people using higher level languages that use unicode strings. UTF-8 is compatible with ASCII because the mapping for ASCII uncompatible code points goes to multibyte, with each byte being out of ASCII range (which we'll already reject). This is easy to see in the table at the top of the description at https://en.wikipedia.org/wiki/UTF-8.

```
>>> '\U00000080'.encode('utf-8')
b'\xc2\x80'
>>> '\U00000800'.encode('utf-8')
b'\xe0\xa0\x80'
>>> '\U00010000'.encode('utf-8')
b'\xf0\x90\x80\x80'
```@mruddy Yes, that's why it's restricted to the range of printable characters in the lower 7 bits, to avoid issues with character sets.

You also can't say ""UTF-8 code points"" (as UTF-8 is a way of encoding code points as bytes). You could say Unicode code points (or Unicode characters), though.

I think it's unnecessary though. The text does not say ""The HRP must consist of Unicode characters, converted to US-ASCII"" - that would be prone to having character conversion issues. It says ""must consist of ASCII characters"". If you're using it with other characters, regardless of how you encoding them, it's already used incorrectly.> You also can't say ""UTF-8 code points"" (as UTF-8 is a way of encoding code points as bytes). You could say Unicode code points (or Unicode characters), though.

Agree, good catch.

The reason I bring this up is because of languages like Java (but not just Java) where the String type is UTF-16. So, that's what a user of the library is going to have and then it's going to be sent in and the library is going to have to encode to what Bech32 needs.
For example:
https://github.com/mruddy/bech32/blob/master/src/com/github/mruddy/bip173/bech32/Bech32.java#L150-L152
If Bech32 needs UTF-8, then there is no mapping issue. If Bech32 needs US-ASCII, then there can be problems introduced or exceptions generated. Otherwise the library user needs to know to convert to UTF-8 and then pass in a byte array, instead of the native String type, or do a code point check before sending the String in. Since we have the 7-bit restriction, this is safe. I think it makes the BIP more developer friendly.The API should just take in a String, and then check whether all characters are in the ASCII range. UTF-8 shouldn't be involved at any point.Oh, I suppose :)

I dropped the UTF-8 commit and it's back to the one that you ACK'd, 96d39e80255548c5d95f01f577e59bb90f9d88a9.

Thanks!","Decoders must not accept mixed-case strings?I think this section can be merged with the 'invalid Bech32 checksum' section.Not a typo. I think decoders should (and thus ""must"") accept mixed-case. Because of the existing requirement to use the lowercase form to determine a character's value for checksum purposes, there is no difference between upper and lower case characters in any position of the bech32 string. That applies to the HRP because it is also used to compute the checksum. So, on a micro level, I don't see a reason why a decoder should fail the input. On a macro level, I can see where you might be trying to discourage mixed case. But, the other changes I made also push in that direction (in fact fixing this: `segwit_addr.bech32_encode('A', [])`).That's how it was to start. I moved it to a new section because I thought it was misleading in the current section because ""No separator character"" can not affect checksum validity because the separator char is not used to compute the checksum.Right, but that's to for several of the existing examples in that section (like HRP character out of range, or length exceeded.

I think they can be combined into a single section with examples of invalid Bech32 strings.There is a requirement that the HRP is non-empty, so while you're technically right that this has a valid checksum, it's not testable... any correct decoder should fail with that as input.

So I think it's maybe better to rename the section to ""The following strings are valid Bech32"" (and the next section to ""The following string are not valid Bech32 (with reason for invalidity)"", and have these two example with empty HRP in that section (with a note that technically their checksum is valid).I read the BIP contrary to that. My interpretation was that no such requirement that the HRP is non-empty is in the BIP. The BIP even says that the HRP's validity is application specific (which builds on top of generic Bech32). That's why this works:
```
>>> segwit_addr.bech32_create_checksum('', [])
[15, 29, 15, 26, 11, 7]
>>> segwit_addr.bech32_verify_checksum('', [] + [15, 29, 15, 26, 11, 7])
True
```
It seems odd that we'd encode something that can't be decoded. I think the reference decoder is implementing a phantom requirement right now. If we add a requirement that HRP be non-empty, I think that's OK, just other things need to be updated also. Am I making sense?You're right - it seems the non-empty HRP isn't mentioned in the BIP anywhere, except in the test vectors.

I prefer modifying it so that it does require that, and is uniformly implemented in decoders and encoders.ok, i'll update to that effect.

btw, the non-checksum data portion can be empty right now. do you want to keep that as it is now? i think so, just checking.Yes, sounds good. Thanks!"
lsaether,595,,typo 'ECSDA' changed to correct 'ECDSA',closed,2017-09-24 19:28:01,Elliptic curve digital signature algorithm,https://github.com/bitcoin/bips/pull/595,['bip-0032.mediawiki'],2017-09-24T19:28:01Z,,['sipa'],ACK,
izelnakri,594,Proposed BIP modification,BIP39: elixir mnemonic library reference added,closed,2017-09-24 19:27:26,,https://github.com/bitcoin/bips/pull/594,['bip-0039.mediawiki'],2017-09-24T19:27:26Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak @voisine @ebfull 
ACK",
jonasschnelli,592,,Remove second service bit from NODE_NETWORK_LIMITED/BIP159,closed,2017-09-23 18:19:56,"This removes the split between NODE_NETWORK_LOW|HIGH and reduced the specification to a single signalling bit (bit 10) NODE_NETWORK_LIMITED with a min height of 288 blocks.

The implementation has already been updated: https://github.com/bitcoin/bitcoin/pull/10387",https://github.com/bitcoin/bips/pull/592,"['README.mediawiki', 'bip-0159.mediawiki']",2017-09-23T18:19:56Z,,['luke-jr'],Fixed also the README file.,connecting*Thanks! Fixed.
danra,589,Proposed BIP modification,is->are in BIP 141,closed,2017-09-22 23:34:27,,https://github.com/bitcoin/bips/pull/589,['bip-0141.mediawiki'],2017-09-22T23:34:27Z,,"['sipa', 'luke-jr']",@CodeShark @jl2012 @sipa ACK,
starcharles,588,Proposed BIP modification,BIP-0175: fixed typo.,closed,2017-09-20 07:03:57,"This PR fixing typo ""excpet"" to ""except"".

",https://github.com/bitcoin/bips/pull/588,['bip-0175.mediawiki'],2017-09-20T07:03:57Z,,"['omarshibli', 'luke-jr']",@omarshibli ACK,
achow101,583,New BIP,BIP 174: Partially Signed Bitcoin Transaction (PSBT) Format,closed,2017-09-18 23:01:24,"This proposal was [submitted to the mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-August/014838.html) on August 18th and has received no relevant commentary, so I am now requesting a BIP number.",https://github.com/bitcoin/bips/pull/583,"['README.mediawiki', 'bip-0174.mediawiki', 'bip-0174/coinjoin-workflow.png', 'bip-0174/multisig-workflow.png']",2017-09-18T23:01:24Z,,"['junderw', 'sipa', 'dabura667', 'luke-jr', 'dcousens']","@luke-jr number please?Actually I sent a proposal to the mailing list last year.... the only person who contacted me was @dcousens the head maintainer of bitcoinjs-libMaybe we could each hop on a call to talk about a communal approach to this?Please use BIP number 174.https://appear.in/psbt-discussion

I went ahead and claimed this room, and will get notifications when someone enters via the app or via browser (no sign up required)

Be careful though, as the default setting has the webcam automatically turn on, so click the camera icon to disable your camera as soon as you enter.https://docs.google.com/spreadsheets/d/1PSnBDtu7KCzeEltXySTtFFDaXIoFk7MF7umAxooLRho/edit?usp=sharing

Here's the google doc @dcousens and I were using in January when we discussed this.

@achow101 if you make a comment on one of the cells, I'll add your account as an editor.https://gist.github.com/dcousens/8e72ff7ddf1f189cb7bbe42d0aeca9ce

Also this was something @dcousens worked on prior.

Perhaps we can find a time when Japan, Australia, and wherever @achow101 lives can meet up for a call?I will be in SF for Scaling Bitcoin btw.Here are some comments I made to @dcousens 

I kept thinking down the rabbit hole, and imagined an entire protocol where a wallet can just create the sighash preimage, generate the hash, generate the signature, and reencode the signature into the data so that another party could sign or complete the serialized complete transaction data.

> After thinking for a while, I decided to put my goal into a single sentence.
> 
> ""By parsing the data alone, a compliant wallet will know exactly what they need to sign, where to put the signatures, and how to serialize the completed transaction in the event of completion without ant prior agreed upon template.""
> 
> By doing so, it would be possible for a wallet that is single sig only to just implement the standard, and be able to sign a multisig without even knowing it is a part of a multisig. It just follows the rules, creates the tx for signing and signs, then adds the signature binary data to the data chunk (URI or otherwise)
> 
> After thinking a lot, there should also be perhaps two separate related BIPs on relay methods and initialization methods.
> 
> ie. Which methods are supported? If we recommend a JSON API, what are the necessary endpoints? Do we support IP direct connection or not? etc. Should there be voluntary discovery like Electrum nodes? Etc etc
> 
> ie. How do you set up the configuration and share it between wallets? How do you ""backup"" the configurations (having such freedom means that private keys are not our only worry anymore, we must remember which private key was a member of what type of wallet and where is the metadata stored if any (a la Copay stores in BWS)
> 
> I think we could make these three BIPs encompass a large possibility space to allow for true wallet interoperability rather than just have it be a way to encode the same old cookie cutter transactions by using previous knowledge of a popular template etc.
> Perhaps we can find a time when Japan, Australia, and wherever @achow101 lives can meet up for a call?

That may be hard to do. I live on the East coast of the US.How about 2000 EDT tomorrow? (1000 AEST, 0900 JST) @junderw > How about 2000 EDT tomorrow? (1000 AEST, 0900 JST)

OKSounds good to me. Just hop in the appear.in and we should be goodhttps://appear.in/psbt-discussion

@dcousens We're in the chat now.Some TODOs before merging:

- [x] Sighash type for inputs
- [x] Include more information about adding new types (appendix of new types)
- [x] Include number of inputs for future extensibilty with more blocks of data
- [x] Examples/basic format/pipe format for each key-value pair@junderw @dcousens I have made the changes that we talked about in the call. Does this look good to you guys?

I'll add the test vectors and full breakdown examples once this is merged and after I update my reference implementation.> ^ Why are outputs' redeem scripts and witness scripts included? Redeem scripts and witness scripts spent to by an output in this transaction are included so that the user can verify that the transaction they are signing is creating the correct outputs that have the correct redeem and witness scripts. This is best used when the PSBT creator is not trusted by the signers.

:heart: 

ACK,  as discussed on IRC,  with this added I don't think an outputs extension is as necessary as you can now verify what outputs might be (P2WSH etc).

The negotiation of the outputs themselves is still out of band,  but I think we have agreed for now that that may be out of scope,  and or could easily be added in an extension.","Why not have the key data include the witness program version, so it can be non-V0?This isn't defining witness programs. It is defining the very specific witness script of a P2WSH output.I don't know what you mean. The value is the specific script, but the key is the hash of it...The key is used as a unique identifier for the script. It is not defining anything for the witness program. For future witness programs, I don't think it is safe to assume that future witness programs will also be using the hash of something in the witness program. I also don't think that the types should be overloaded. The key here is specifically one type: a sha256 hash. However to do what you suggest means that the key can have more than one type in the future.Perhaps instead of being specific to witness scripts (v0 P2WSH only), it could be a generic ""SHA256 preimages"" field, where the key is a SHA256 hash, and the value is the bytes that hash to it, independently of what it's used for.`value length` being the number of 32-bit int indexes?

if so,  why `<master key fingerprint>` in between the `<value length>` and `<values ...>`what is the difference between <0x01> and 0x01,  you fluctuate between both styles?The value length is the length in bytes of the concatenation of `<master key fingerprint>|<32-bit int>|...|<32-bit int>`. The next commit should make this clearer.to clarify,   to omit 50/51 inputs, leaving the 51st input to be signed,  you'd have to include 50x `0x00` separators?
Could there by an optional `vin` type?Fixed.@achow101 isn't `master key fingerprint` fixed size anyway? or is this part of the `<key length> <key> <value length> <value>` approach?> this part of the `<key length> <key> <value length> <value>` approach?

^Thatyou say TXO, but you have only redeem script (and no satoshis/amount?)AddedOops. bad copy paste.maybe `<key length>` should include the type prefix,  then you can simply define `<key length>` as a the length of the `<key>`, and interpreters interpret the first byte of a key as a type.
That way there is less back-and-forth over the definition,  and its consistent.
I suspect this is how your implementation would work internally anyway.

For example, as your definition:
```
<key length> | <key(0x02 | sha256(<witness script>)) | <value length> | <value(witness script)>
```

Hell,  then you could simplify the entire defintion to simply `key` and `value`, with a line at the top here saying `key` and `length` are both prefixed by their `length` as a varint (or whatever).

Then ,  this would simply be:

```
key: <0x02 | sha256({witness script})>
value: <witness script>
```

`<...>` indicates length prefixed
`{}` indicates raw data

With both `key` and `value` **always** prefixed by varint length.If you want to move past this now, and we're on the same page, I could submit this as a PR later if you'd like.That is what I originally meant. The latest changes should make that clearer."
omarshibli,586,New BIP,BIP 175: Pay to Contract Protocol,closed,2017-09-18 22:59:17,"This proposal was submitted to the [mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014896.html) on August 14th, we got feedback and addressed the concerns, I am now requesting a BIP number.",https://github.com/bitcoin/bips/pull/586,"['README.mediawiki', 'bip-0175.mediawiki']",2017-09-18T22:59:17Z,,"['luke-jr', 'christianrolandso']","Zzzzzzzhey @luke-jr, we addressed your points, please review.By compatibility, I meant more of (whatever the particular case may be; these are examples):

* ""contracts can be verified separately from the sender's wallet software, and then a normal address is used""
* ""This is incompatible with multisig P2SH wallets""
* ""The wallet is assumed to use BIP 43 derivation""

Note that BIP 43 (and even BIP 32 / HD wallets in general) is *not* universal, and your proposal's connection to them seems unnecessary and pointless. What is the benefit of even doing anything HD-based, since the end key requires non-deterministic metadata (contracts) to find?

Anyhow, let's use BIP **175** for this.Got it, we will work on clearing this out.Thanks for your feedback @luke-jr , you are raising a valid point regarding the backward compatibility with BIP32 and other related BIPs, we have updated the BIP accordingly.
Regarding your question, I think we need to work better on the motivation section here, but I still see benefit here in using BIP32 derivation mechanism or something similar to derive non-enumerable set as well.
I think the main benefit is that ,as you mentioned, BIP32 is not universal in a sense that it only covers use cases where the derivation paths set is an enumerable, yet in our use case we need to derive wallets from a single seed and non-enumerable set.

Much appreciated.When you're ready, don't forget to rename the file and add to README","Please don't self-assign numbers, even temporarily.See BIP 2 for a list of acceptable licenses.drop ""Track""done"
greenaddress,573,Proposed BIP modification,add libwally as bip39 implementation,closed,2017-09-16 03:16:15,,https://github.com/bitcoin/bips/pull/573,['bip-0039.mediawiki'],2017-09-16T03:16:15Z,,"['prusnak', 'luke-jr']",@slush0 @prusnak @voisine @ebfull ack,
sipa,582,,Add extra test cases & implementations to BIP173,closed,2017-09-16 03:05:09,,https://github.com/bitcoin/bips/pull/582,['bip-0173.mediawiki'],2017-09-16T03:05:09Z,,['gmaxwell'],ACK@luke-jr ?,
MeshCollider,578,Proposed BIP modification,Correct typo in BIP 144,closed,2017-08-24 06:46:47,"Fix typo ""inefficinent"" => ""inefficient"" in BIP 144",https://github.com/bitcoin/bips/pull/578,['bip-0144.mediawiki'],2017-08-24T06:46:47Z,,"['sipa', 'luke-jr']",@CodeShark @sipa ACK,
junderw,570,,Add Korean Wordlist,closed,2017-08-15 13:24:35,"Alternative to #544 

Made on behalf of @Annyonghaseyo a Korean native that lives in Japan and regularly attends the Tokyo Bitcoin Meetup. She is also the translator of a lot of Korean bitcoin apps.

I don't really have much to say in the matter except the limited knowledge I have of Korean based on similarities to Japanese. She echoed the concerns of using -hada verbs in the list which was also echoed by others and myself.

This list is NFKD normalized and sorted in order of UTF-8 binary so as to allow for binary search.",https://github.com/bitcoin/bips/pull/570,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/korean.txt']",2017-08-15T13:24:35Z,,"['gnujoow', 'iancoleman', 'voisine', 'wlzla000']","nice work @junderw @Annyonghaseyo

All words on the list are not difficult, easy to remember and well-following the rule mentioned by @Annyonghaseyo, and [bip39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#wordlist)

this is much better than #544 
This list looks good. Non-Korean speaking ACK.@luke-jr Looks like we have an ACK from BIP author @voisine and Korean natives @Annyonghaseyo and @gnujoow both see this wordlist as sufficient. Please merge if everything seems in order.

Thanks everyone.Just generated 10 phrases using bitcore-mnemonic.

Can't understand it, but looks good.

```
역시 삼십 하드웨어 보통 세월 고궁 시골 제한 한마디 장미 청춘 관념
암컷 영국 같이 토마토 법률 탤런트 고전 마음 갈색 공업 점점 공동
예선 고구려 목숨 흥분 모퉁이 단골 시아버지 바탕 울음 사슴 의학 원인
신비 명예 내일 모양 교직 연출 전문 팝송 부문 부탁 사나이 창고
정비 왕자 태권도 만화 번개 전체 중학교 막걸리 입사 서명 승용차 전시
탤런트 책가방 형부 주택 퇴근 강아지 인공 사냥 어려움 극히 엔진 기원
무릎 테니스 전혀 알루미늄 간섭 즉석 칠십 밥솥 예전 엔진 줄거리 임무
행복 도저히 주말 벌레 공부 백화점 혹시 추천 교과서 자연 별도 법률
촛불 의논 단추 지진 고양이 습기 가뭄 시아버지 전통 정성 매장 가족
진짜 홍수 상자 강도 유적 지리산 막걸리 닭고기 햄버거 사슴 클래식 진료
```@junderw it looks good for korean as well :)# _ㅎㅏㄴㄱㅡㄹ_, I mean, _한글_.

How should one treat un-normalized _Hangeul_ inputs<sup>(e.g. `가격` (`U+AC00 U+ACA9`))</sup>, which are more commonly used than normalized ones?

Should one normalize them into [NFKD<sub>(Normalization Form: Compatibility Decomposition.)</sub>](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms)<sup>(e.g. `가격` (`U+1100 U+1161 U+1100 U+1167 U+11A8`))</sup> before processing, or refuse to accept them?
  
  @wlzla000 

1. User enters string.
2. Your app NFKD normalizes the string.
3. Your app splits the string on ' ' space (0x20) into an array.
4. Your app checks if each word is contained within a single wordlist you support.
5. If so, your app converts the indices of each word into binary to reassemble the data and verifies the checksum. If the checksum fails, throw a failure. If checksum passes, run the NKFD normalized phrase from step 2 through the pbkdf2 rounds.
6. If not, Ask your user ""We could not verify the validity of this phrase. Would you like to use it anyways?"" and if they say no. Throw a failure. If they say yes, run the NFKD normalized string from step 2 through the pbkdf2 rounds.

Since you will NFKD normalize the user's input, 한글 will become ㅎㅏㄴㄱㅡㄹ automatically.

That's the whole point of NFKD normalization. You do it on the backend. The user only interacts with the frontend.Should Korean mnemonics be displayed with ideographic spaces (as per Japanese) or ASCII spaces (as per Chinese)?

There is no mention of this in the [bip39 wordlists document](https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md).

Any other Korean language considerations that should be added to that document?> Should Korean mnemonics be displayed with ideographic spaces (as per Japanese) or ASCII spaces (as per Chinese)?

If nothing is specified, ASCII.

If you google any Korean website at all, they use ASCII spaces in their writing.

Japanese and Chinese don't use any spaces at all normally.",
jonasschnelli,572,,Add Counter-measures for peer fingerprinting part,closed,2017-08-11 19:39:30,,https://github.com/bitcoin/bips/pull/572,['bip-0159.mediawiki'],2017-08-11T19:39:30Z,,,,
shaolinfry,571,,Update BIP status,closed,2017-08-11 16:43:31,"BIP91 -> Final
BIP148 -> Final
BIP149 -> Withdrawn (because it's no longer necessary)",https://github.com/bitcoin/bips/pull/571,"['README.mediawiki', 'bip-0091.mediawiki', 'bip-0148.mediawiki', 'bip-0149.mediawiki']",2017-08-11T16:43:31Z,,"['luke-jr', 'jl2012']","BIP149 is obsoleted by 91 and 148. Otherwise ACK@jl2012 `Obsolete` is for formerly-`Final` BIPs. The correct value here is `Withdrawn` I think (the alternative might be `Rejected`).

@shaolinfry  Travis has colouring requirements for README",
jonasschnelli,568,,Allow to signal both bits and treat them independently,closed,2017-08-09 03:34:34,"The current BIP couples the two `NODE_NETWORK_LIMITED_*` bits by setting the state as undefined when signaling both bits. Ideally we can treat them independently which means signalling NODE_NETWORK_LIMITED_HIGH will always require to signal `NODE_NETWORK_LIMITED_LOW` as well.
The downside for this simplification is that we loose the possible third state (both bits set).",https://github.com/bitcoin/bips/pull/568,['bip-0159.mediawiki'],2017-08-09T03:34:34Z,,"['sipa', 'luke-jr', 'clarkmoody']","Would we need another BIP later to define the third state if it is left as undefined for the time being (and adopted by node software)?

Alternatively, can we come up with a more compelling meaning for both bits?@clarkmoody: I guess it's reasonable to not confuse developers by connecting bit states (== treat each bit individual) which result in only two states for two bits.

Adding a third state would require another bit used. And right now, there is no need for a third state and we don't know if we ever need a third block depth level for limited historical block serving.

Changing the block values (currently 288 and 1152) is possible depending on the client protocol version.One issue is that network nodes will OR service bits together, so if you at one point offer one of the bits, and at another time the other, nodes may combine them into setting both.

I think this means we can only have 4 combinations with 3 bits:
* NETWORK: full nodes with full history
* !NETWORK, LIMITED_HIGH: full nodes with a week of history
* !NETWORK, !LIMITED_HIGH, LIMITED_LOW: full nodes with a day of history
* !NETWORK, !LIMITED_HIGH, !LIMITED_LOW: SPV nodes, etc
@sipa It sounds like there is no reason to activate both HIGH and LOW bits, since connecting nodes will go with the best-case history.

@jonasschnelli ACK to your proposed changeI dislike wasting service bits like this, but I didn't realise nodes would OR them on their own. :(",
jonasschnelli,567,,"Set bit 10 and 11 for NODE_NETWORK_LIMITED_LOW, HIGH",closed,2017-08-08 09:01:08,"Bit 6 and 8 seems to be kidnapped by BCash and SW2x (without following the BIP process).
Therefore I consider 0-8 taken and leave 9 reserved and start at bit 10 for limited services.",https://github.com/bitcoin/bips/pull/567,['bip-0159.mediawiki'],2017-08-08T09:01:08Z,,,,
jonasschnelli,566,New BIP,BIP 159: NODE_NETWORK_LIMITED service bits,closed,2017-08-07 17:59:00,"The proposal has been submitted to the bitcoin mailing list on May 11th 2017.
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014315.html

Feedback has been received and the proposal has been overhauled.",https://github.com/bitcoin/bips/pull/566,"['README.mediawiki', 'bip-0159.mediawiki']",2017-08-07T17:59:00Z,,['luke-jr'],"Requesting BIP number.* Fixed license.
* Added correct BIP nr.
* Removed rule to not set one of the bits if NODE_NETWORK is set",This isn't an acceptable license for new BIPs.
evoskuil,562,Proposed BIP modification,BIP39: add link to libbitcoin implementation.,closed,2017-08-07 13:06:11,,https://github.com/bitcoin/bips/pull/562,['bip-0039.mediawiki'],2017-08-07T13:06:11Z,,"['prusnak', 'luke-jr']",@slush0 @prusnak @voisine @ebfull ACK,
sipa,565,,Update BIP173: new reference impls + tests fix,closed,2017-08-07 11:46:45,,https://github.com/bitcoin/bips/pull/565,['bip-0173.mediawiki'],2017-08-07T11:46:45Z,,"['gmaxwell', 'clarkmoody']","ACK but at the bottom of decoding add:

Implementations should take special care when converting the address to a ScriptPubkey: In Bitcoin script while 0 is encoded as 0x00 the numbers 1 through 16 are encoded as 0x51 though 0x60 (81 to 96 in decimal).  If a bech32 address is converted to an incorrect scrippubkey the result will likely be either unspendable or insecure, either of which is undesirable.I agree with @gmaxwell that additional explanation is in order. Thankfully `OP_1` through `OP_16` have contiguous values ;-)@gmaxwell Rewrote that a bit, and added it.@luke-jr Ping?",
CikeQiu,561,Proposed BIP modification,Add an implementation of Swift,closed,2017-08-07 05:03:29,"I used Swift to achieve the BIP39, currently supports Chinese and English. Reference to [NYMnemonic](https://github.com/nybex/NYMnemonic), the third party encryption algorithm library  [CryptoSwift](https://github.com/krzyzanowskim/CryptoSwift) .",https://github.com/bitcoin/bips/pull/561,['bip-0039.mediawiki'],2017-08-07T05:03:29Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak @voisine @ebfull This is the first time I've tried to implement BIP39, your advice is very important to me. And you can get more information at [CKMnemonic](https://github.com/CikeQiu/CKMnemonic) . ACKHi, would you merge this request? ",
kn0rhaan,560,Proposed BIP modification,fixed small typo [in BIP 30],closed,2017-07-26 05:12:02,,https://github.com/bitcoin/bips/pull/560,['bip-0030.mediawiki'],2017-07-26T05:12:02Z,,"['sipa', 'luke-jr']",@sipa ACK,
jameshilliard,559,,Update BIP91 reference implementation repository,closed,2017-07-17 03:43:43,,https://github.com/bitcoin/bips/pull/559,['bip-0091.mediawiki'],2017-07-17T03:43:43Z,,,,
zander,557,,Fix typo,closed,2017-07-14 06:00:01,,https://github.com/bitcoin/bips/pull/557,['bip-0134.mediawiki'],2017-07-14T06:00:01Z,,,,
shaolinfry,554,,Amend BIP8 by height,closed,2017-07-08 10:50:55,,https://github.com/bitcoin/bips/pull/554,"['README.mediawiki', 'bip-0008.mediawiki', 'bip-0008/states.png']",2017-07-08T10:50:55Z,,,,
jameshilliard,549,,Clarify when BIP91 will cease to be active,closed,2017-06-16 07:11:35,,https://github.com/bitcoin/bips/pull/549,['bip-0091.mediawiki'],2017-06-16T07:11:35Z,,,,
jameshilliard,548,,Use a smaller deployment period for BIP91 but don't enforce until active.,closed,2017-06-16 06:07:16,This gives a ~2 day upgrade period for miners to enforce mandatory signalling after lock-in and makes activation potentially faster.,https://github.com/bitcoin/bips/pull/548,['bip-0091.mediawiki'],2017-06-16T06:07:16Z,,,,
jameshilliard,547,,Update BIP91 confirmation window and enforcement.,closed,2017-06-15 00:21:57,This should make BIP91 activation faster and less likely to conflict with BIP148.,https://github.com/bitcoin/bips/pull/547,['bip-0091.mediawiki'],2017-06-15T00:21:57Z,,['Christewart'],,"Your comment says 'immediate enforcement', is that right? Doesn't this indicate there is a 4.67 wait between LOCKED_IN and ACTIVE? (Looking at this graphic https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#state-transitions) It enforces on lock in [here](https://github.com/bitcoin/bips/pull/547/files#diff-243129d9084b6b07a742c80035b3e3a5R86)."
kallewoof,542,,BIP 154 cleanup: remove TODO entry,closed,2017-05-25 04:45:11,,https://github.com/bitcoin/bips/pull/542,['bip-0154.mediawiki'],2017-05-25T04:45:11Z,,,,
Giszmo,530,Proposed BIP modification,small typo in bip47,closed,2017-05-24 03:26:25,,https://github.com/bitcoin/bips/pull/530,['bip-0047.mediawiki'],2017-05-24T03:26:25Z,,"['justusranvier', 'luke-jr']",@justusranvier Concur ,
kallewoof,538,New BIP,BIP 154: Rate Limiting via peer specified challenges,closed,2017-05-24 03:26:03,,https://github.com/bitcoin/bips/pull/538,"['README.mediawiki', 'bip-0154.mediawiki']",2017-05-24T03:26:03Z,,['luke-jr'],"Title is 60 characters long, exceeding 44 character limit.@luke-jr I changed title to ""Rate Limiting via peer specified challenges"" (43 chars).",
jameshilliard,541,,Fix BIP91 typo,closed,2017-05-24 02:03:21,,https://github.com/bitcoin/bips/pull/541,['bip-0091.mediawiki'],2017-05-24T02:03:21Z,,,,
jameshilliard,540,New BIP,BIP 91: Reduced threshold Segwit MASF,closed,2017-05-23 21:37:05,Mailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014380.html,https://github.com/bitcoin/bips/pull/540,"['README.mediawiki', 'bip-0091.mediawiki']",2017-05-23T21:37:05Z,,['luke-jr'],"Title is way too longAny suggestions for what I should change it to?Perhaps ""Reduced threshold Segwit MASF""?",
sanch0panza,539,,Add link to implementation on Bitcoin Core (PR#10437),closed,2017-05-23 03:56:07,,https://github.com/bitcoin/bips/pull/539,['bip-0135.mediawiki'],2017-05-23T03:56:07Z,,,,
wbnns,519,enhancement,readme: Clarify status for formally accepted BIPs,closed,2017-05-15 01:51:30,"In the table there are some BIPs with a status of `Active`, and others
with a status of `Final`. Just wanted to submit this slight text change
for review to the README to indicate that both mean a BIP is formally
accepted.",https://github.com/bitcoin/bips/pull/519,['README.mediawiki'],2017-05-15T01:51:30Z,,['luke-jr'],,"Not all BIPs require consent of the community.@luke-jr Heya Luke, thank you for the review. I've revised this based on your feedback."
luke-jr,536,New BIP,BIP 115: Generic anti-replay protection using Script,closed,2017-05-12 04:14:51,,https://github.com/bitcoin/bips/pull/536,"['README.mediawiki', 'bip-0115.mediawiki']",2017-05-12T04:14:51Z,,,,
sipa,534,,Add extra reference implementations to BIP 173,closed,2017-05-07 23:22:30,,https://github.com/bitcoin/bips/pull/534,['bip-0173.mediawiki'],2017-05-07T23:22:30Z,,,,
sipa,533,New BIP,BIP 173: Base32 address format for native v0-16 witness outputs,closed,2017-05-07 22:26:16,,https://github.com/bitcoin/bips/pull/533,"['README.mediawiki', 'bip-0173.mediawiki']",2017-05-07T22:26:16Z,,"['lclc', 'luke-jr']","~~Please add a brief section on backward compatibility.~~This *is not* an update to BIP 142, correct?

@jl2012 > Please add a brief section on backward compatibility.

It includes the following text under `Compatibility`:

    Only new software will be able to use these addresses,
    and only for receivers with segwit-enabled new software.
    In all other cases, P2SH or P2PKH addresses can be used.

> This is not an update to BIP 142, correct?

It is intended to replace BIP 142.Changed to bip-0173.mediawiki.>   Created: 2016-03-20

The date is wrong I assume :)",
jonathancross,521,Proposed BIP modification,"bip-0039-wordlists : Typos, capitalization and trailing whitespace.",closed,2017-05-07 22:17:22,"* ""there not must"" => ""there must not""
* ""exemple"" => ""example""
* Capitalize ""French"", ""Italian""
* Trailing whitespace removal.",https://github.com/bitcoin/bips/pull/521,['bip-0039/bip-0039-wordlists.md'],2017-05-07T22:17:22Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak @voisine @ebfull
ACKHi @luke-jr, anything else you need on this?No, sorry for the delay, I missed the ACK.",
sanch0panza,532,New BIP,BIP 135: Generalized version bits voting,closed,2017-05-07 22:15:14,"Requesting a BIP number for the included proposal.

Original bitcoin-dev mailing list post:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/013969.html

Reference implementation:
https://github.com/BitcoinUnlimited/BitcoinUnlimited/pull/458",https://github.com/bitcoin/bips/pull/532,"['README.mediawiki', 'bip-0135.mediawiki', 'bip-0135/bip-0135-states-small.png', 'bip-0135/bip-0135-states.png', 'bip-0135/bip-0135-states.svg']",2017-05-07T22:15:14Z,,,,
shaolinfry,531,,BIP8: clarify deployment terms,closed,2017-05-06 18:27:16,,https://github.com/bitcoin/bips/pull/531,['bip-0149.mediawiki'],2017-05-06T18:27:16Z,,,,
shaolinfry,526,New BIP,BIP 149: Segregated Witness (second deployment),closed,2017-05-01 16:12:44,,https://github.com/bitcoin/bips/pull/526,"['README.mediawiki', 'bip-0149.mediawiki']",2017-05-01T16:12:44Z,,"['kanzure', 'luke-jr']",https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014234.htmlShould be good to go now.Use BIP 149. Title currently exceeds 44 character limit.,"I think it would be best to keep ""segwit"" as the name here, if only deployment strategy is changed.upgrade*Normally bits aren't assigned until the proposal leaves Draft stage (at least in principle) I think? (There's also an allocations file that would need updating)

Considering that there may be changes to the proposal before re-deployment, it is probably better not to give the impression it is ready for implementation.fixedChanged to TBD. Will update deployments file once there is an actual deployment.It's unclear to be if each BIP9 deployment needs a completely different common name or not, but in any case, since we need a new service bit, I think there has to be a new name anyway. I'm going to leave this as is for the time being.Note that a new name will require redeployment of mining software.fixed"
azuchi,529,,BIP 2: Add obsolete status to process image,closed,2017-05-01 02:51:40,Add obsolete status to status diagram in the **BIP status field** section.,https://github.com/bitcoin/bips/pull/529,"['bip-0002/process.png', 'bip-0002/process.svg']",2017-05-01T02:51:40Z,,,,
comboy,527,Proposed BIP modification,fix dead link in BIP66,closed,2017-04-30 19:44:54,"The DER specification link in BIP66 seems to be dead. 

I could not find the 2008 pdf in any [archive](http://archive.is/Yxwln) pages. Current version is available at the url: https://www.itu.int/rec/T-REC-X.690-201508-I/en but they seem to be ruining these urls with every update, so I changed the url to the listing page.

Optionally info could be added that the BIP is based on the 2008-11 version, but the BIP only touches the basics of the encoding which I think shouldn't change.",https://github.com/bitcoin/bips/pull/527,['bip-0066.mediawiki'],2017-04-30T19:44:54Z,,"['sipa', 'luke-jr']",Is there an archive link for the current version perhaps?ACK,
shaolinfry,525,,Simplify chart,closed,2017-04-29 15:07:30,,https://github.com/bitcoin/bips/pull/525,['bip-0008/states.png'],2017-04-29T15:07:30Z,,,,
shaolinfry,524,,BIP 8 Bug fix,closed,2017-04-25 14:10:02,,https://github.com/bitcoin/bips/pull/524,"['bip-0008.mediawiki', 'bip-0008/states.png']",2017-04-25T14:10:02Z,,,,
Mirobit,474,Proposed BIP modification,Added compatible wallets,closed,2017-04-24 13:52:47,,https://github.com/bitcoin/bips/pull/474,['bip-0044.mediawiki'],2017-04-24T13:52:47Z,,"['prusnak', 'jonathancross', 'saleemrashid', 'luke-jr']","@slush0 @prusnak 
It's hard to find a new line that does not have a typo or factual error in it. NACK until all issues are fixed.
Fixed all mix-ups.
@Mirobit I'm not sure about the opinion of others but I'd suggest squashing the commits
@saleemrashid I thought I already squashed the two commits. I only see one now.
@jonathancross Thanks. Removed and updated.

Also removed Darkwallet and Encompass due to inactivity. 
Added MultiBit (HD).> Added MultiBit (HD).

Multibit is not a BIP-44 compatible wallet as it just supports one account and ignores the rest.@Mirobit poke@luke-jr removed MultiBit. Should be ready to merge now.ACK","Source code links are mixed up (KeepKey source code for TREZOR and vice versa)
Source code link is incorrect, should be https://github.com/LedgerHQ
https://bitcointrezor.com/ redirects to https://trezor.io/
Probably better to use the final URL.The source code for the wallet is not posted at [the link provided](https://github.com/cancoin).
I have some more general concerns about this wallet (see below), but not being Open Source already suggests it should not be listed here.

** This web wallet is not listed in https://bitcoin.org/en/choose-your-wallet , parts are still in beta, their [forum doesn't actually exist](https://cancoin.zendesk.com/hc/en-us/community/topics) and their [Facebook link](https://www.facebook.com/cancoinca) is broken.FYI: Question about strict BIP-44 compatibility raised here: https://github.com/ksedgwic/Wallet32/issues/17@jonathancross Yep, TREZOR.io is the new domainI would not include Wallet32 since it has not been updated since 2014.This is not a wallet for users, but rather developers and I don't think we should include these in the list.@prusnak Might be even more of a reason to include it (BIPs are aimed at developers)Agree with @saleemrashid "
shaolinfry,522,,Further simplify BIP8,closed,2017-04-21 13:41:03,"There is no material change to the specification with this pull request.

However, lockinontimeout is just an implementation detail, if not set the workflow is BIP9.
As a result, BIP8 is more concisely represented in the simplified state which presents just the BIP8 workflow.
",https://github.com/bitcoin/bips/pull/522,"['README.mediawiki', 'bip-0008.mediawiki', 'bip-0008/states.png']",2017-04-21T13:41:03Z,,,,
shaolinfry,513,New BIP,BIP 8: Version bits with optional guaranteed lock-in,closed,2017-04-20 18:26:03,,https://github.com/bitcoin/bips/pull/513,"['README.mediawiki', 'bip-0008.mediawiki', 'bip-0008/assignments.mediawiki', 'bip-0008/states.png']",2017-04-20T18:26:03Z,,['luke-jr'],"Updated state diagram.What is the BIP number for this proposal?Needs to address Backward Compatibility.

And the flowchart thing is still buggy - it doesn't check the flag before failing it. Personally, I'd just get rid of the flag and say ""if it's BIP 8, it never fails"".README needs the updated title",^
blag,518,Proposed BIP modification,Properly format markdown so it renders properly on GitHub,closed,2017-04-20 15:55:16,,https://github.com/bitcoin/bips/pull/518,['bip-0039/bip-0039-wordlists.md'],2017-04-20T15:55:16Z,,"['prusnak', 'jonathancross', 'luke-jr']","LGTM@slush0 @prusnak @voisine @ebfull ACKofftopic: might be a good idea to setup travis to run markdownlint like we do in our [slips](https://github.com/satoshilabs/slips/blob/master/.travis.yml) repository.

Also see [markdownlint.json](https://github.com/satoshilabs/slips/blob/master/markdownlint.json) to see how to ignore some (imho excessive) rules.For better or worse, BIPs aren't markdown (they're mediawiki).Ah, sorry. I was confused, because the document in this PR was markdown. Nevermind :)",
da2ce7,512,,Stop UASF enforcement if SegWit has IsLockedIn state.,closed,2017-04-06 16:37:02,"Includes basic refactor.

No-need to calculate the GetMedianTimePast() value twice.",https://github.com/bitcoin/bips/pull/512,['bip-0148.mediawiki'],2017-04-06T16:37:02Z,,"['mkwia', 'afk11', 'luke-jr', 'shaolinfry']","More importantly, there is this question to be answered https://github.com/bitcoin/bips/commit/60d4b512b8ca9d57b479a5ee63c6825415ac0b20#commitcomment-21581456@shaolinfry sorry about that: that was embarrassing. 😳@dooglus comments please?Sorry, away from computer now. I can fix in a couple of hours.

Sent from my iPhone

> On 4 Apr 2017, at 13:55, shaolinfry <notifications@github.com> wrote:
> 
> @shaolinfry requested changes on this pull request.
> 
> In bip-0148.mediawiki:
> 
> >  
>  While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected.
>  
>  === Reference implementation ===
>  
>  <pre>
> +
> +
> two unnecessary lines
> 
> In bip-0148.mediawiki:
> 
> >  
>  While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected.
>  
>  === Reference implementation ===
>  
>  <pre>
> +
> +
> +// Check if Segregated Witness is Locked In
> +bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params)
> +{
> +    LOCK(cs_main);
> +    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache)
> +        == THRESHOLD_LOCKED_IN);
> +}
> +
> +
> one unnecessary blank line
> 
> In bip-0148.mediawiki:
> 
> >  
>  While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected.
>  
>  === Reference implementation ===
>  
>  <pre>
> +
> +
> +// Check if Segregated Witness is Locked In
> +bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const Consensus::Params& params)
> +{
> +    LOCK(cs_main);
> +    return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache)
> +        == THRESHOLD_LOCKED_IN);
> dont linebreak here please.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
@da2ce7 If you merge this it'll update this PR with the requested changes: https://github.com/da2ce7/bips/pull/2/files@afk11 thankyou, I have included your commit.@afk11 I have squashed your commit.
@mkwia thank you, I have corrected the phasing.
@luke-jr thank you, I have removed the inaccurate comment.Bitcoin Branch that implements BIP 148 as described by this pull request.
https://github.com/da2ce7/bitcoin/tree/bip148@shaolinfry, can you please re-review this pull request?I need other's to peer review ACK this first, because when I give mine, it will get merged. I'm reasonably confident this is ok now, but peers please.@mkwia do you suggest defining a temporary boolean for clearer code?","This must be defined in the code example.Both timestamp and date are wrong;Day is wrong, it's Weds not SunYou need to define this function since it does not exist in Bitcoin Core.Done :)two unnecessary linesone unnecessary blank linedont linebreak here please.Remove the inaccurate comment.Should be ""This BIP will be _active_ between...""I thought I had commented here but seems I didn't press the button :)
So while it is bikeshedding, I dislike this formatting, and prefer the previous notation but that is just my personal taste. So long as the logic works :)IMO this way is cleaner."
luke-jr,500,,Propagate summary tone of BIP Comments to their applicable BIP preambles,closed,2017-03-28 17:22:21,"Affects: BIPs 38, 39, 42, 47, 60, 61, 74, 75, 90, 150, 151, 152

Will merge after a week or so. Anyone who disagrees with the assessments may feel free to post on the Comments wiki and/or this PR by then.

For reference, BIP 2 specifies how to post comments: https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#BIP_comments",https://github.com/bitcoin/bips/pull/500,"['bip-0038.mediawiki', 'bip-0039.mediawiki', 'bip-0042.mediawiki', 'bip-0044.mediawiki', 'bip-0047.mediawiki', 'bip-0060.mediawiki', 'bip-0061.mediawiki', 'bip-0074.mediawiki', 'bip-0075.mediawiki', 'bip-0090.mediawiki', 'bip-0150.mediawiki', 'bip-0151.mediawiki', 'bip-0152.mediawiki']",2017-03-28T17:22:21Z,,"['btcdrak', 'jnewbery', 'jonasschnelli']","ACK for 150, 151NACK. I don't think this is helpful information.

EDIT: ... by which I mean, anyone could come and add a comment to the wiki discouraging something that is 'unanimously recommended', or recommending something that is 'unanimously discouraged'. The only steady state of the Comments-summary field is 'Controversial; some recommendation, and some discouragement'@jnewbery The process is already detailed by BIP2.",
shaolinfry,510,,Update BIP148,closed,2017-03-28 17:20:14,,https://github.com/bitcoin/bips/pull/510,['bip-0148.mediawiki'],2017-03-28T17:20:14Z,,,,
ebfull,508,New BIP,BIP 199: Hashed Time-Locked Contract transactions,closed,2017-03-28 10:19:40,,https://github.com/bitcoin/bips/pull/508,"['README.mediawiki', 'bip-0199.mediawiki']",2017-03-28T10:19:40Z,,"['daira', 'luke-jr']",Please do not self-assign BIP numbers. I'll follow-up with an assignment shortly.Please use BIP 199 and squash so the unassigned number is not in history.,Add a note that the ``<seller pubkey hash>`` and ``<buyer pubkey hash>`` are P2PKH pubkey hashes as described at https://bitcoin.org/en/developer-guide#term-p2pkh .
luke-jr,506,New BIP,BIP 180: Block size/weight fraud proof,closed,2017-03-25 05:29:52,,https://github.com/bitcoin/bips/pull/506,"['README.mediawiki', 'bip-0180.mediawiki']",2017-03-25T05:29:52Z,,,,
shaolinfry,505,,Update code sample,closed,2017-03-25 04:18:18,,https://github.com/bitcoin/bips/pull/505,['bip-0148.mediawiki'],2017-03-25T04:18:18Z,,,,
shaolinfry,503,,Grammar fix.,closed,2017-03-20 12:36:08,,https://github.com/bitcoin/bips/pull/503,['bip-0148.mediawiki'],2017-03-20T12:36:08Z,,,,
shaolinfry,501,New BIP,BIP 148: Mandatory activation of segwit deployment,closed,2017-03-20 02:47:52,,https://github.com/bitcoin/bips/pull/501,"['README.mediawiki', 'bip-0148.mediawiki']",2017-03-20T02:47:52Z,,"['pdaian', 'ntom', 'afk11', 'dabura667', 'dhimmel', 'AllanDoensen', 'farukuzun', 'hsjoberg', 'seweso', 'is55555', 'WriteCodeEveryday', 'aayanl', 'luke-jr']","Compulsory activation ? wtf ?   
We're not deciding or voting anything now, no signalling..  someone, somewhere is just forcing this by law ? r u kidding me ? get real. fucking ponkerAn effort to provide a PoW contingency plan is also being started, to provide back up for any eventuality in this transition.

https://bitcointalk.org/index.php?topic=1833391What might be smart to add is some kind of depth at which blocks are accepted. Maybe also make it configurable. I really like the idea of consensus emerging from the network itself. It's like decentralised consensus finding. > What might be smart to add is some kind of depth at which blocks are accepted. Maybe also make it configurable. I really like the idea of consensus emerging from the network itself. It's like decentralised consensus finding.

I see what you did there.Why did you choose between October 1st 2017 and November 15th 2017? 
I don't think this bip acceptable but core developers will come up with something better to prevent miners to takeover the network I hope.This is just a hardfork, while you're at it, put in a block size increase there too@aayanl segwit already has itI left a clarifying question on the original proposal here: https://gist.github.com/shaolinfry/743157b0b1ee14e1ddc95031f1057e4c#gistcomment-2028169

No answer between when I left it four days ago and when this was submitted as a PR today.

The rationale for the choice of a 2-DoS score is still unclear in the proposal.As a reminder to commenters here: discussion of the actual proposal should occur on the bitcoin-dev mailing list, not on the pull request, which will be merged/closed as soon as the process issues are resolved, and without any consideration for the merits of or flaws in the idea.> This is just a hardfork, while you're at it, put in a block size increase there too

No, this is not a hardfork, old legacy nodes will still follow the UASF/softfork chain, should it become the one with most hashing power.

In a hardfork, old nodes would never accept the hardfork chain.

> Why did you choose between October 1st 2017 and November 15th 2017?

I think this it so make sure that 0.13.1 and 0.14 nodes would get triggered by the UASF, because that means that it would be 1 month of 100% segwit blocks, triggering the old 95% signaling requirement.

---

Perhaps requiring ~51% miners support would make the proposal safer?@farukuzun Please see the [mailing list discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html)

@ntom P2SH was activated by flag day also, see [0.6.0 release](https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283)

@pdaian DOS score will be up for discussion on final PR as well as potentially using a service bit until Nov 15th. Removed for now.

@luke-jr Done. Unsure why Travis is failing.@luke-jr OK Travis errors fixed.This is exactly what we need. It shows we at Blockstream own Bitcoin and if you don't align with our vision, you will be crushed like cockroaches. 

I wonder how many percentage points off of the original 95% we'll be at when this activates and hard forks those nodes and miners off the network.No miner is going to run code that will put him on a minority chain. I hope blockstream does this real soon cause it will bury blockstream/core forever. Concept ACK. Better to trigger activation for the >80% of nodes prepared to enforce the rule already.","This doesn't match the header (and PD is not an acceptable ""license"" anymore).`BSD 3-Clause` and `CC0 1.0`: without dashes. 

Add hyperlinks to authoritative license deeds.

This document **is** "
luke-jr,499,New BIP,BIP 171: Currency/exchange rate information API,closed,2017-03-14 23:53:02,Discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013660.html,https://github.com/bitcoin/bips/pull/499,"['README.mediawiki', 'bip-0171.mediawiki']",2017-03-14T23:53:02Z,,,,
iancoleman,497,Proposed BIP modification,BIP 32: Test vectors for leading zeros,closed,2017-03-06 03:51:18,"These additional test vectors will ensure all future implementations are compliant with bip32.

See https://github.com/iancoleman/bip39/issues/58 and https://github.com/bitpay/bitcore-lib/issues/47

Possibly these test vectors may be useful also:

[bitcoinjs-lib test for this issue](https://github.com/bitcoinjs/bitcoinjs-lib/blob/4b4f32ffacb1b6e269ac3f16d68dba803c564c16/test/fixtures/hdnode.json#L180)

[bitcore-lib test for this issue (pending merge)](https://github.com/bitpay/bitcore-lib/pull/97/commits/b79a9b274ae8b48701daf5a1284e4f9035c3df0d#diff-c78032f7e0957dc3eebfc586843c6430R224)",https://github.com/bitcoin/bips/pull/497,['bip-0032.mediawiki'],2017-03-06T03:51:18Z,,"['sipa', 'schildbach', 'braydonf']","ACK.

I've verified these test vector myself by implementing them in Bitcoin Core's unit test framework.

Thanks for figuring out the cause of the divergence between clients.ACK. I just added this test vector to bitcoinj (https://github.com/bitcoinj/bitcoinj/pull/1342).ACK. Also added in https://github.com/bitpay/bitcore-lib/pull/97",
azuchi,492,Proposed BIP modification,Remove duplication BIP69,closed,2017-01-29 07:08:58,The sentences in the motivation section of BIP69 are duplicated. So I deleted it.,https://github.com/bitcoin/bips/pull/492,['bip-0069.mediawiki'],2017-01-29T07:08:58Z,,"['kristovatlas', 'UdjinM6', 'luke-jr', 'dcousens']","@dcousens Hi @azuchi, can you clearly state which parts of the BIP you believe already contain the details you're proposing to remove?@kristovatlas 5 lines above are the same as removed ones. Introduced in https://github.com/bitcoin/bips/commit/d9acdcb6b12cd52424e8fec7cae89eef6bafcad9#diff-381a94c2f21517536d4ffb2a3a35437aR28Oops, good catch. ACK(Oops, tagged the wrong person. Sorry.)Nice catch @azuchi ",
luke-jr,491,,"BIPs 30, 32, 62, 66, and 103: License under BSD-2-Clause terms",closed,2017-01-20 00:14:29,"```
[Thursday, January 19, 2017] [7:46:36 PM UTC] <luke-jr> sipa: if you get a minute, can you give me at least a text-""verbal"" ACK for some copyright license to put on BIPs 30, 32, 62, 66, and 103 please? is BSD-2-Clause okay?
[Thursday, January 19, 2017] [7:47:01 PM UTC] <sipa>    luke-jr: ACK on 2-clause BSD for 30,32,62,66,103
[Thursday, January 19, 2017] [7:47:13 PM UTC] <sipa>    (and for any other BIPs I contributed to)
```",https://github.com/bitcoin/bips/pull/491,"['bip-0030.mediawiki', 'bip-0032.mediawiki', 'bip-0062.mediawiki', 'bip-0066.mediawiki', 'bip-0103.mediawiki', 'bip-0123.mediawiki', 'scripts/buildtable.pl']",2017-01-20T00:14:29Z,,"['kanzure', 'MarcoFalke']","ACK. Can confirm the irc log in 855eb22.ACK 855eb2200406166032debb719a0eedf0ae4e3860, saw IRC log in action.",
tenakakhan,489,New BIP,BIP 104: 'Block75' - Max block size like difficulty,closed,2017-01-14 07:07:19,,https://github.com/bitcoin/bips/pull/489,"['README.mediawiki', 'bip-0104.mediawiki', 'scripts/buildtable.pl']",2017-01-14T07:07:19Z,,['luke-jr'],"Looks good, will assign a number in a bit. In the meantime, however, I notice that the specification is too approximate to implement in a consensus-safe manner, and there is no deployment mechanism mentioned. (Nor a method to establish consensus for the change, but seeing as nobody has figured out how to do that in general yet, I don't think you can be blamed for omitting it.)Thanks luke-jr. Will add further implementation details depending on community response to the concept in general.",
techguy613,482,Proposed BIP modification,Add license for BIP75,closed,2017-01-01 12:33:50,Add CC-BY license for BIP75,https://github.com/bitcoin/bips/pull/482,"['bip-0075.mediawiki', 'scripts/buildtable.pl']",2017-01-01T12:33:50Z,,"['jonathancross', 'jmacwhyte', 'justinwnewton', 'luke-jr']","@justinwnewton @voisine @jmacwhyte @jonathancross  Are you all okay with CC-BY-4.0?Yes, sounds good to me.Yes.


> On Dec 2, 2016, at 8:45 PM, Luke Dashjr <notifications@github.com> wrote:
> 
> @justinwnewton <https://github.com/justinwnewton> @voisine <https://github.com/voisine> @jmacwhyte <https://github.com/jmacwhyte> @jonathancross <https://github.com/jonathancross> Are you all okay with CC-BY-4.0?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/bitcoin/bips/pull/482#issuecomment-264616445>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AGXoGBrfAaEbBmhSRrf9eqJp2Y6n5hNaks5rEPPZgaJpZM4LDES_>.
> 

Sorry for the late reply.

> Are you all okay with CC-BY-4.0?

Sounds good.",The version should be explicit (note that 4.0 is the only acceptable version).
TheBlueMatt,486,,Clarify BIP 152 interaction with classic relay mechanisms,closed,2017-01-01 12:24:59,"This clarifies some unstated details previously, as well as defines some previously undefined behavior.",https://github.com/bitcoin/bips/pull/486,['bip-0152.mediawiki'],2017-01-01T12:24:59Z,,,,
luke-jr,485,enhancement,README: Include BIP Layers in index,closed,2016-12-23 09:07:28,,https://github.com/bitcoin/bips/pull/485,"['README.mediawiki', 'scripts/buildtable.pl']",2016-12-23T09:07:28Z,,['CodeShark'],ACK,
luke-jr,478,Pending acceptance,Promote BIPs 123 and 2 Draft->Active (and implement them),closed,2016-12-15 04:24:06,"I plan to merge this on December 14th. If there are any hard objections to this change, please bring it up on the bitcoin-dev mailing list before then. Further reviews of the implementation are welcome in the meantime. Please refrain from requesting further changes to the BIPs themselves unless it is a blocker/show-stopper or trivial (not changing the meaning).

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-November/013331.html",https://github.com/bitcoin/bips/pull/478,"['README.mediawiki', 'bip-0001.mediawiki', 'bip-0002.mediawiki', 'bip-0009.mediawiki', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0012.mediawiki', 'bip-0013.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0017.mediawiki', 'bip-0018.mediawiki', 'bip-0019.mediawiki', 'bip-0020.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0030.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0033.mediawiki', 'bip-0034.mediawiki', 'bip-0035.mediawiki', 'bip-0036.mediawiki', 'bip-0037.mediawiki', 'bip-0038.mediawiki', 'bip-0039.mediawiki', 'bip-0042.mediawiki', 'bip-0043.mediawiki']",2016-12-15T04:24:06Z,,,,
paveljanik,484,Proposed BIP modification,Fix typos,closed,2016-12-08 10:57:13,,https://github.com/bitcoin/bips/pull/484,['bip-0152.mediawiki'],2016-12-08T10:57:13Z,,"['TheBlueMatt', 'luke-jr']",@TheBlueMatt lolACK,
TheBlueMatt,483,,Clarify SPV node usage of BIP 152,closed,2016-12-06 00:52:21,"This does not change any implementation details of the protocol, only encourages SPV client authors to avoid high-bandwidth mode due to lack of validation.",https://github.com/bitcoin/bips/pull/483,['bip-0152.mediawiki'],2016-12-06T00:52:21Z,,,,
sdaftuar,480,New BIP,BIP 90: Buried deployments,closed,2016-12-01 20:16:40,"I think this is ready to move forward, can this be assigned a BIP number?",https://github.com/bitcoin/bips/pull/480,"['README.mediawiki', 'bip-0090.mediawiki']",2016-12-01T20:16:40Z,,"['btcdrak', 'NicolasDorier', 'luke-jr', 'sipa']","Let's call this BIP 90.

It would be ideal if it had a dedicated Backwards Compatibility section and was explicit about being a hardfork.It does explicitly mention `It is technically possible for this to be a non-backwards compatible change.`, which is true, though in Bitcoin Core at this point that is dependent on also removing checkpoints.Indeed, it's not a barrier to merging because B.C. is being addressed in another section. I just thought it would still be nice to have an explicit section for this. :)

AFAIK Core doesn't enforce checkpoints strictly anymore?@luke-jr I felt the Considerations section addressed all the information that a Backwards Compatibility section would have; if I were to add one, I'm not sure what more to say.

As for using the term ""hard fork"" in this document -- I considered adding something like that, but rejected that idea because I think the term ""hard fork"" is not a universally well understood/defined term, and that it would be less clarifying to use that term than the language I've already included, which more explicitly describes the circumstances which lead to consensus split.  (FYI I double-checked that BIP 34 and BIP 65 make no mention of the terms ""soft fork"" or ""hard fork"", though BIP 66 does use the term ""soft fork"" without definition.)

This is an aside, but regarding checkpoints:
> though in Bitcoin Core at this point that is dependent on also removing checkpoints.

I don't believe this is the case for BIP 65 or BIP 66, which activated past the last Core-checkpointed block height.

> AFAIK Core doesn't enforce checkpoints strictly anymore?

There have been some tweaks to how checkpoints are used, but Core hasn't yet released a version that disable the effect of checkpoints locking in a particular chain, once the headers have been seen -- though I believe there's work underway to do so, potentially even for the next release.Updated with BIP number assignment and added to README.mediawiki.ACKif anybody have interest, I can rebase https://github.com/bitcoin/bitcoin/pull/8460 which formalize that better in code.",
luke-jr,481,,Update BIP 109 status Draft->Rejected,closed,2016-12-01 20:16:08,All proponents of BIP 109 seem to agree it is dead,https://github.com/bitcoin/bips/pull/481,"['README.mediawiki', 'bip-0109.mediawiki']",2016-12-01T20:16:08Z,,"['thofmann', 'zander', 'gavinandresen']","For reference: https://www.reddit.com/r/btc/comments/5fswjx/bitcoin_classic_is_back/

>Bitcoin Classic has merged code that removes the universally agreed dead BIP109 and implements block-size market based equilibrium. Or in simple terms, its compatible with BU.

- Thomas ZanderACK@gavinandresen ACK. The market-based approach taken in Bitcoin Unlimited is the right way to go.",
rubensayshi,479,,add Copyright to BIP67,closed,2016-11-30 21:12:13,"as requested for preperations for BIP2

@afk11 ",https://github.com/bitcoin/bips/pull/479,['bip-0067.mediawiki'],2016-11-30T21:12:13Z,,['afk11'],ACK 1489880,
luke-jr,477,Proposed BIP modification,"BIP 123: Clarify how used with non-Standards BIPs, and update list",closed,2016-11-30 03:33:15,"Also: It's unclear where to draw the lines for API/RPC. The previous draft had Stratum (which is being removed here since there sadly isn't a BIP yet) as Applications and GBT as API/RPC, when both protocols serve the same fundamental purpose.

Need to get this cleaned up to move forward on both it as well as BIP 2...

@CodeShark ",https://github.com/bitcoin/bips/pull/477,"['bip-0123.mediawiki', 'scripts/buildtable.pl']",2016-11-30T03:33:15Z,,['CodeShark'],"@luke-jr I'd say Applications layer defines things like data structures and formatting. While a reference implementation is nice, it's up to application developers to implement it as they wish. On the other hand, the API/RPC layer defines calls that must be implemented either as a library or as a service.Ok, that sounds about right (but didn't match the layer assigned to stratum). Does this PR look good to merge then?ACK",
zander,475,,Update the spec following the new developments,closed,2016-11-29 04:04:17,Many fixes and new features for BIP134,https://github.com/bitcoin/bips/pull/475,['bip-0134.mediawiki'],2016-11-29T04:04:17Z,,,,
techguy613,476,,BIP75 Update for SEC Formatted Public Keys and Unique Identifier,closed,2016-11-28 23:29:13,"This update is based on the results of a recent implementation of BIP75 addressing three issues that were encountered:
1) Further specification of the format for sender_public_key and receiver_public_key
2) Set the identifier field of ProtocolMessage / EncryptedProtocolMessage to be required
3) Add entropy for ProtocolMessage / EncryptedProtocolMessage identifier",https://github.com/bitcoin/bips/pull/476,"['bip-0075.mediawiki', 'bip-0075/paymentrequest.proto']",2016-11-28T23:29:13Z,,,,
ryanofsky,469,Proposed BIP modification,Allow block responses to getblocktxn requests,closed,2016-11-15 07:54:09,Corresponding bitcoind change is: https://github.com/bitcoin/bitcoin/pull/9058 commit `Modify getblocktxn handler not to drop requests for old blocks`.,https://github.com/bitcoin/bips/pull/469,['bip-0152.mediawiki'],2016-11-15T07:54:09Z,,"['TheBlueMatt', 'luke-jr', 'sdaftuar']","@TheBlueMatt 

Should probably finalise this BIP soon, though, and future change proposals go into a new BIP...?
Since my `Modify getblocktxn handler not to drop requests for old blocks` commit in https://github.com/bitcoin/bitcoin/pull/9058 was changed to use `ProcessGetData` instead of doing a direct `PushMessage` call, @sdaftuar pointed out that the currently proposed wording in this BIP no longer matches the behavior implemented there.

The problem is the ""MUST"" in ""the sender of such a message a cmpctblock for the block hash identified in this message MUST respond"" clause which we don't currently follow now because of the `MAX_BLOCKTXN_DEPTH` check, and will continue to not follow in the future because of `ProcessGetData` heuristics.

@TheBlueMatt, do you have any suggestions on how to fix this? The minimal fix would simply be to replace the MUST above with SHOULD, but maybe you have a good way of characterizing the cases where you don't think a getblocktxn request should get a response, and would want to mention them in the BIP.

Another option would be to make no changes to the BIP at all and simply make bitcoind do what the current wording says it should do. This is what my alternate fix does (https://github.com/ryanofsky/bitcoin/commit/fix-8842-getblocktxnmin).
I was reading the implementation and I think MUST is still fine... There is still a corner case if the block isnt on the main chain and is a month old, but I think thats close enough.
Yes, MUST is fine because the word ""recently"" is there to qualify it and make it mushier. When I made the comments above, I forgot ""recently"" was in the original text and didn't realize I had removed it.

Anyway, sounds like this is ready to be merged now.
ACK

On November 14, 2016 8:00:29 AM PST, Russell Yanofsky notifications@github.com wrote:

> ryanofsky commented on this pull request.
> 
> > @@ -128,7 +128,7 @@ A new inv type (MSG_CMPCT_BLOCK == 4) and several
> > new protocol messages are adde
> 
> ====getblocktxn====
> 
> # The getblocktxn message is defined as as a message containing a
> 
> serialized BlockTransactionsRequest message and pchCommand ==
> ""getblocktxn"".
> -# Upon receipt of a properly-formatted getblocktxnmessage, nodes which
> recently provided the sender of such a message a cmpctblock for the
> block hash identified in this message MUST respond with an appropriate
> blocktxn message. Such a blocktxn message MUST contain exactly and only
> each transaction which is present in the appropriate block at the index
> specified in the getblocktxn indexes list, in the order requested.
> +# Upon receipt of a properly-formatted getblocktxnmessage, nodes which
> recently provided the sender of such a message a cmpctblock for the
> block hash identified in this message MUST respond with either an
> appropriate blocktxn message, or a full block message. A blocktxn
> response MUST contain exactly and only each transaction which is
> present in the appropriate block at the index specified in the
> getblocktxn indexes list, in the order requested.
> 
> Fixed the missing space.
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/469
","I think if you add ""recently"" back in (so ""nodes which recently provided the sender of such a message...""), then we could call it a day...
Good call. Done. I have no idea why I removed the word ""recently"" to begin with...
Oops, missing space between getblocktxn and message (not new, but should still be fixed).
Fixed the missing space.
"
afk11,472,Proposed BIP modification,BIP39: 'recommended size' -> 'allowed size',closed,2016-11-05 00:03:05,"https://github.com/bitcoin/bips/pull/471 for background

Clarifies that the BIP only allows entropy between 128-256 bits. 

@dabura667 @prusnak @dcousens @rubensayshi",https://github.com/bitcoin/bips/pull/472,['bip-0039.mediawiki'],2016-11-05T00:03:05Z,,"['rubensayshi', 'greenaddress', 'slush0', 'dcousens', 'laanwj', 'prusnak', 'schildbach', 'luke-jr']","Perhaps put it more bluntly.

""This BIP restricts the allowed sizes of ENT to be a minimum of 128 bits, to a maximum of 256 bits.  Sizes outside of this range are disallowed.""

And perhaps @prusnak could clarify whether,  within that range,  if `[128, 160, 192, 224, 256]` are the only suitable options or not.

Since, as is,  all we have is:

> The following table describes the relation between the initial entropy
>   length (ENT), the checksum length (CS) and the length of the generated mnemonic         length 

Which is by no means a specification of valid sizes,  nor even a _recommendation_.
Yes, these 5 options are the only valid ones (meaning 12, 15, 18, 21 or
24 words respectively).
I am closing the PR since this has a greater impact than what I'd hoped to raise in #471 it should be @prusnak 
Please reopen and accept.
@prusnak @luke-jr 

regardless of your intentions of what this BIP should have had as restrictions I really don't feel it's right to just merge a BC break in like that.

do BIP authors just have the power to change their BIPs whenever they feel like it?  
what if @sipa decides to change BIP42 so allow more than 21mil BTC?  
or Gavin decides to change the P2SH address version byte just because he's tired of seeing `3xxxxx`? 
Go read my last comment in #471 and provide some facts instead of
feelings.
@prusnak I don't think that it matters at all what you think this spec should and shouldn't be used for, you've put a spec out there that allowed more than 256 bits and people have started using it for that.

you now break backwards compatibility of this BIP, turning wallets that have advocated being ""BIP39 compatible"" (which unfortunately is a ""thing"" people consider to be good / important) into no longer being BIP39 compatible.

it's not a question of if you think people are using BIP39 for the wrong thing or in the wrong way, it's a spec that people have started using, without a restriction to the size of the entropy (except that at 1024 bytes it will break) and you're now breaking this, which I don't think is supposed to be done this carelessly with a BIP (that is wildly used).
Ok, so no facts again. I am really disappointed by your obnoxious
behaviour.

Anyway, if you DO have legitimate usecase, just create BIP-139 which
says ""this is BIP-39 with entropy upper limit raised to 1024 bits"" and
use that. Nobody is stopping you from doing that.
fact: the restriction was not there before, only a recommendation.

fact: people have been using it with more than 256 bits of entropy, thinking that they are compatible with BIP39 and their seeds will (forever) be interoperable with other BIP39 compatible wallets.

fact: you just carelessly broke that, completely ignoring the fact you might actually fuck people over down the line who rely on BIPs not randomly changing.
Afaik, accepted BIPs can't be changed, even by the original authors. Trivial changes like fixing typos may be an exception, but this doesn't sound like a trivial change.
I tend to agree with @schildbach here. Changing a recommendation to a hard restriction so long after the fact is wrong.

If this was a new BIP, and problems come to light in the implementation phase, these kind of changes can be considered. But this one has been in this state for years.

The correct way to handle this would be to define a new BIP that adds the restriction.

(Also as there is an effective hard limit of 8192 bits after which the algorithm breaks down, it would IMO be better to just add that as #471 did)
Well, I think the wording of ""recommended size"" was unfortunate, but it was lost in translation - we're not a native speakers. Our intention was clearly to use 128-256 range; obviously missing the check for this is also our mistake. We even did not consider to use more entropy, as you can see there's limit of calculating checksum, which wasn't known before. Also, our motivation was wallet interoperability and although libraries does not handle the limit (yet), I assume many UIs and applications allow only 12-24 words to be used, like TREZOR does.

Also we don't think there's any real usecase for such huge mnemonics, because - as Stick stated well - people may have troubles to write even 24 words correctly. Using longer mnemonics is actually less fault-proof.

I see that as our mistake in specs, which should be fixed before bigger damage will happen. People may started asking ""why some wallets generate only 24 words, when others have longer and more secure seeds? I want one, too!"". So I appreciate the finding, maybe I would use more diplomatic wording in discussion, but I agree with this PR.
Thanks for owning it @slush0.

The difficulty for those of who make the library implementations is how we move forward.
We can easily add the restrictions,  but we risk stopping developers being able to allow users to ""fall-back"" on the old behaviour to recover their [now, incompatible] mnemonic.

Likely it'll end up being an API with the safety checks,  and a ""upgrade"" method for those who need it that will exist for a year or so to allow developers to migrate users across without re-implementing the BIP themselves.

Not a fantastic situation by any means.
So far there was zero examples of users given that have mnemonics
outside of this range. Are we talking about a real problem here or just
a hypothetical one?
@prusnak it is a real problem,  but it is also impossible to gauge the extent (unless the wallet provider logged that data).
The issue is,  it was allowed.

I personally know several users who use non-standard numbers of words outside of the accepted values of `12, 15, 18, 21 or 24 words`.
So which wallet is it?
Not sure I like the idea of retroactively restrict values. 

GreenAddress's wallets supports 27 words mnemonics.
@prusnak Two were listed _in the other PR_, lets not flog a dead horse. TREZOR has a strong interest in BIP39 being 128-256 bits only, but I'd suggest you search Github yourself and see how people interpreted your spec.
well I think @greenaddress alone is enough, but the real issue imo is not the people we can find, it's the people we can't find and someday will run into this problem when their mnemonic can't be imported into any (other) wallet.

some wallets and users rely on the mnemonic being portable to other wallets as a anti-vendor-lockin mechanism. 
> some wallets and users rely on the mnemonic being portable to other
> wallets as a anti-vendor-lockin mechanism

That's exactly what we are trying to achieve here, if that is still not
obvious. 27 word mnemonic is quite the opposite.

I think wallets that are generating stuff outside of the range, should
allow importing this stuff for foreseeable future, but should change the
defaults to be in the range.

I see this as the only way how to fix this situation.
the only way to ""fix"" this is by not breaking backward compatibility!
Why not change this back to a recommendation, and additionally add a limit that's inclusive of what is in use already?
@luke-jr do you mean up to what the bip and reference implementation allowed as of before these PRs (checksum limit) or what people can manage to find by looking around (which imho as @rubensayshi rightly said is bound to miss out on some use) ?

For clarity I think the former is ok, the latter is problematic.
I don't think it was ever implied that users can make up phrases on their own, so I would personally be happy with supporting what existing implementations generate. The alternative is fine as well, though.
@luke-jr in which case I think there exist some implementation that generate up to the checksum limits.

And is not even just libraries that allow that, even apps like this one https://iancoleman.github.io/bip39/ support far more than 24 words

For instance I just generated:

> lend zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo vocal puzzle there

By simply ticking the ""Supply my own source of entropy"" and passing in a lot of 1

and this is more common than you would expect as some people may not trust hardware wallets generated mnemonics and hardware wallet manufacturers sometimes are actively suggesting to users to generate their own outside of the device (example https://www.reddit.com/r/Bitcoin/comments/5c1wat/finally_got_a_ledger_nano_s_its_great/d9t8ctd/) - that's not to say wallets support that necessarily but some wallets (Ledger, GreenAddress) support hex seeds obtained from any mnemonic of any length.
",
sdaftuar,473,,[BIP 152] Update compact block BIP for banning behavior,closed,2016-11-03 19:22:27,"@TheBlueMatt  I tried to draft something to reflect the p2p banning behavior being properly implemented by signaling the version bump, how does this look to you?

In particular, do you think the first SHOULD NOT I added (regarding not banning peers for an invalid compact block) should be a MUST NOT?",https://github.com/bitcoin/bips/pull/473,['bip-0152.mediawiki'],2016-11-03T19:22:27Z,,['TheBlueMatt'],"I might prefer pointing out that nodes SHOULD NOT relay prior to validating unless their peer has sufficient version as well.

On November 3, 2016 8:37:12 AM EDT, Suhas Daftuar notifications@github.com wrote:

> @TheBlueMatt  I tried to draft something to reflect the p2p banning
> behavior being properly implemented by signaling the version bump, how
> does this look to you?
> 
> In particular, do you think the first SHOULD NOT I added (regarding not
> banning peers for an invalid compact block) should be a MUST NOT?
> You can view, comment on, or merge this pull request online at:
> 
>  https://github.com/bitcoin/bips/pull/473
> 
> -- Commit Summary --
> - [BIP 152] Fix invalid link
> - [BIP 152] Bump p2p protocol for proper banning behavior
> 
> -- File Changes --
> 
>    M bip-0152.mediawiki (4)
> 
> -- Patch Links --
> 
> https://github.com/bitcoin/bips/pull/473.patch
> https://github.com/bitcoin/bips/pull/473.diff
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/473
Makes sense, updated.
ACK

On November 3, 2016 8:37:12 AM EDT, Suhas Daftuar notifications@github.com wrote:

> @TheBlueMatt  I tried to draft something to reflect the p2p banning
> behavior being properly implemented by signaling the version bump, how
> does this look to you?
> 
> In particular, do you think the first SHOULD NOT I added (regarding not
> banning peers for an invalid compact block) should be a MUST NOT?
> You can view, comment on, or merge this pull request online at:
> 
>  https://github.com/bitcoin/bips/pull/473
> 
> -- Commit Summary --
> - [BIP 152] Fix invalid link
> - [BIP 152] Bump p2p protocol for proper banning behavior
> 
> -- File Changes --
> 
>    M bip-0152.mediawiki (4)
> 
> -- Patch Links --
> 
> https://github.com/bitcoin/bips/pull/473.patch
> https://github.com/bitcoin/bips/pull/473.diff
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/473
",
richardkiss,470,Proposed BIP modification,Fix hex of first FindAndDelete example,closed,2016-11-02 08:06:41,,https://github.com/bitcoin/bips/pull/470,['bip-0143.mediawiki'],2016-11-02T08:06:41Z,,['jl2012'],"@jl2012 
yes, that's wrong, but the correct tx should be

`0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9781d66b61fb5a7ef00ac5ad5bc6ffc78be7b44a566e3c87870e1079368df4c4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000`
Yes, sorry, I got the last two transactions mixed up. I've tried again.
OK, this one should be right. I'd also like to propose expanding these last two FindAndDelete transactions so they have much of the same info as in the other five examples. I'm happy to do this if you're interested.
ACK.

I prefer to keep the current examples, as they are already used as unit tests here https://github.com/bitcoin/bitcoin/blob/master/src/test/data/tx_valid.json
I don't intend to change the transactions (I use them as unit tests in pycoin too), only add information, like about the unsigned version of the transaction, scriptPublicKey, etc. This information would have helped me in getting these tests working.
",
DanielWeigl,467,,BIP49 - fix wrong cointype for test vectors - use m/49'/1'/0' for testnet,closed,2016-10-18 06:31:15,"Just noticed that I used the wrong coin-type for the derivation path (0' for prodnet instead of 1' testnet).

Fixed it and recalculated the test vectors.
",https://github.com/bitcoin/bips/pull/467,['bip-0049.mediawiki'],2016-10-18T06:31:15Z,,,,
jl2012,463,,Add examples to show FindAndDelete is not used in BIP143,closed,2016-10-18 06:30:55,"Developers must pay attention to the BIP143 spec that `FindAndDelete` is not used. This gives some examples. Also edited the descriptions for `CODESEPARATOR` to avoid misunderstanding
",https://github.com/bitcoin/bips/pull/463,['bip-0143.mediawiki'],2016-10-18T06:30:55Z,,,,
btcdrak,466,,Update segwit deployment details,closed,2016-10-17 21:54:59,"refs #464 #465 

@sipa @jl2012 
",https://github.com/bitcoin/bips/pull/466,['bip-0009/assignments.mediawiki'],2016-10-17T21:54:59Z,,['sipa'],"ACK
",
jl2012,465,,Add start day for BIP147,closed,2016-10-17 17:17:39,,https://github.com/bitcoin/bips/pull/465,['bip-0147.mediawiki'],2016-10-17T17:17:39Z,,"['btcdrak', 'dabura667']","utACK 20673078748a4a3f225c91edff353f707190d9c8
tACK 2067307

Verified Epoch times manually. :-P
",
sipa,464,,BIP 141 start and end time,closed,2016-10-17 17:15:16,,https://github.com/bitcoin/bips/pull/464,['bip-0141.mediawiki'],2016-10-17T17:15:16Z,,"['btcdrak', 'dabura667', 'kanzure']","ACK
ACK 5c2da7e07d924c34af4edf7098981c9a376263d2

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-October/013226.html
tACK

I verified that the Epoch times actually align with the written dates.

hooray manual testing!
",
sipa,423,Proposed BIP modification,Version 2 sendcmpct for integration of segwit with CB,closed,2016-10-14 22:37:57,,https://github.com/bitcoin/bips/pull/423,['bip-0152.mediawiki'],2016-10-14T22:37:57Z,,"['sdaftuar', 'btcdrak', 'petertodd', 'instagibbs', 'TheBlueMatt', 'luke-jr']","ping @TheBlueMatt 
@sipa Maybe you should like to the pull request that enables this feature in the reference implementation section.
@btcdrak Done.
I'm not sure I understand the thinking behind how feature negotiation is intended to work.

The original BIP made a reference to a version ""handshake"" in the future, which I figured meant that peers would be looking at each others sendcmpct version number to choose, say, the minimum common behavior.

This BIP modification doesn't really talk about how the handshake works between version 1 and version 2 clients, and looking at the implementation in bitcoin/bitcoin#8393, it seems that extra state is used to make this determination (namely the nServices advertised by a node).  My initial thought was that it might be better to not rely on state outside the sendcmpct message (but I'm not sure, maybe for segwit this is appropriate) -- but regardless I think it'd be helpful to at least spell out more exactly in the BIP what the intended protocol here is.
Modified the proposal to use the announce-multiple-sendcmpct-versions mechanism instead, and adapted the related core PR.
@sdaftuar @TheBlueMatt Comments on the modification?
I have one more observation, aside from what I mentioned above regarding the strict ordering of version messages.

BIP 152 isn't clear on how getdata messages for MSG_CMPCT_BLOCK should be handled if the peer requesting the compact block hasn't sent us a sendcmpct message.  The BIP prohibits requesting a compact block before receiving a sendcmpct, but there's no similar prohibition in the other direction.  However, if your peer hasn't sent you a sendcmpct, then you don't know what version to use for the response.

The natural thing to do would be to fall through to the next requirement in the BIP, which is that if you don't respond with a compact block, then you must respond with a block.  However post-segwit, there's no mechanism to figure out whether the block should be with or without witness.

I propose that the BIP be updated to indicate that nodes either SHOULD or MUST not respond to a getdata(MSG_CMPCT_BLOCK) if the requestor never sent a sendcmpct message to begin with (as there's no way to know what version to use).  I think then it should be pretty safe for the fallback-to-sending-a-block code to also use the information from the negotiated compact block version to determine whether to include witnesses.

@TheBlueMatt @sipa Thoughts?
@sdaftuar Addressed comments, I hope.
Ping @sdaftuar @TheBlueMatt ?
@sipa Looks good to me, thanks!
Upon thinking more, I think my versioing proposal was very ill-conceived. ""sendcmpct"" has two meanings - both ""send me this version of unsolicited compact blocks/send me this version of compact blocks when I request them"" and ""I can send you this version of compact blocks"". It is hard to read into it exactly what version of compact block will be sent to you in response to your request for a compact block. We could tie the two together explicitly and make clear that you shouldnt request compact blocks until you have both send your own sendcmpct and received one, at which point you know that the version they will be sending you is the version you requested last which they also had in one of their sendcmpct messages. Otherwise we need a way to tell the two cmpctblock messages apart (could use a different message name, or a different encoding).
@TheBlueMatt Yes, I was realizing that too. I don't think it's a problem at this point, but it complicates reasoning a bit.

Right now, there are two ways through which the sending of compact blocks is requested: one through the bool in the `sendcmpct` and the other is through a `getdata CMPCTBLOCK`. As long as you wait until the exchange of version messages has completed before sending either of those, combined with the fact that you send multiple `sendcmpct`s for different versions in increasing order, it's always well defined what is being asked for.

My suggestion would be to keep things as-is now, but for a future extension, we introduce an explicit `sendcmpctack` with version number, and a third one `sendcmpctdirect` or so to request unsollicited blocks using compact blocks. At that point, it becomes illegal to send a `getdata CMPCTBLOCK` or `sendcmpctdirect` before the `sendcmpct`-`sendcmpctack` completed, and it's always well-defined.
Its well-defined but not well-defined in the spec right now. At least we need to specify what, exactly, a sendcmpct is indicating to the other side, which isnt particularly well-defined, nor how you should select version for different directions, etc.

I can take a crack at wording if you prefer.
> I can take a crack at wording if you prefer.

Please do!
Proposed version negotiation semantics: https://github.com/TheBlueMatt/bips/commit/7059fd119f779cd87c4c44fa16ff98e080be5181

Note that I think these might actually need some slight tweaks to the implementation, but provide better features than I thought they would, sorry about that.
That suggestion codifies that ping/pong serializes p2p messages with sendcmpct messages at startup, which I think is perfectly reasonable, but if we decide against it a cmpctverack or so can easily be added instead.
Cherry-picked @TheBlueMatt's suggestions.
I added a few more commits to https://github.com/bitcoin/bips/compare/master...TheBlueMatt:segwitcb. The first two clarify some things and add an example. The only change is that priority order is now highest-priority-first instead of highest-priority-last, which simplifies implementation somewhat.

The last commit changes the protocol entirely, adding a cmpctack message. This has the advantage that you could implement receiving of some version of compactlocks without implementing sending that encoding, as well as simplifying the protocol slightly (instead of having to check if the current protocol version is higher-priority according to your probably-compile-time list of supported version you know which version you're using directly from the ack message) at the expensee of complicating the implementation somewhat (now you have to add support for another message type and special-case version 1). The last commit is definitely not worth it if we dont anticipate adding more than one or so more versions, but might be worth it if we anticipate compact blocks version 4, 5, 6 at some point. I'll bring this up in the IRC meeting later today.
is this up to date with the code PR?
My currently proposed version (which I believe is up to date with the code) is https://github.com/TheBlueMatt/bips/blob/af6330a573ad8c452ae2044c0f0e84c64d7d4124/bip-0152.mediawiki
~~@TheBlueMatt (can't seem to comment there) might want to mention up front that the `Protocol Versioning` is all related to version 2+. As-is it kind of blends together.~~
Included some commits from @TheBlueMatt's branch.
Oh I'm commenting on an out-of-date version, nevermind.
@instagibbs Added a commit to incorporate your suggestions.
utACK https://github.com/bitcoin/bips/pull/423/commits/78cbaca9408ea03470379479b93592b75f9ddc0f
","s/unsollicitedly/unsolicitedly/
I would argue MAY, not RECOMMENDED.
""by following the same process as in version 1"" or something like that, to be more specific.
As I mentioned in https://github.com/bitcoin/bitcoin/pull/8393#discussion_r73564353, I think that if we require the version messages to be sent in a particular order for correct operation, then we should clarify the language here.  Perhaps:

```
To do so, two sendcmpct messages can be sent at startup and MUST be in this order: the first one for version 1 and a second one for version 2.
```

However I think I'd prefer to drop the requirement that they be sent in a particular order -- is there a good reason to require this?

EDIT: just saw @sipa's response in bitcoin/bitcoin#8393.  I'm fine with leaving this requirement in.
Should be combined with previous line.
This sounds confusing. @sipa says it is outdated as well.
This is also confusing. Maybe start the sentence with ""After""?
This is also confusing. So all sendcmpct messages will have non-1 for the first integer, except for the final such message?
Wait, why?
You want to be reviewing as of commit af6330a573ad8c452ae2044c0f0e84c64d7d4124, I believe. Still, the version there has pretty much the same text. Any suggestions to clarify?
Are you suggestiong just flipping the sentence? I find that to be slightly more confusing.
This line is removed in the changes I proposed sipa include.
Because they're both setting the conditions for requesting a compact block?
I would try splitting it into two sentences... or maybe ""The encoding version used for sending compact blocks is determined by the union of those supported by both nodes, specifically the most recent one received from the peer.""
Yes, it is very unclear how to parse this current sentence.
Oops, I forgot that @TheBlueMatt had proposed changes which weren't included yet. Fixed now.
/version/versions? Each node can request different versions first that both can support.
Perhaps add: 

> The node then sets the current receive-protocol-version in use on the connection as that version, and uses it to decode new compact block messages.

And on the following line:

> /Upon receiving a sendcmpct announcement/Upon receiving subsequent sendcmpct announcements/

Makes it much easier to parse the meaning.
Yes, that's better.
ACK, @sipa you want to fix the second version in the line to versions?
Seems reasonable to me, though maybe make it three lines then, as receiving and sending versions have logically distinct behavior.
s/as/to/
s/which is understood from the remote peer,/which is understood from the remote peer (ie which has been announced),/
"
TheBlueMatt,462,,SegWit Compact Blocks,closed,2016-10-14 22:37:54,"This is just https://github.com/bitcoin/bips/pull/423 with one small tweak, since we need to go ahead and get this merged.
",https://github.com/bitcoin/bips/pull/462,['bip-0152.mediawiki'],2016-10-14T22:37:54Z,,,,
jonathancross,447,Proposed BIP modification,"Improving wording of ""makes them consuming""...",closed,2016-10-12 23:15:58,,https://github.com/bitcoin/bips/pull/447,['bip-0147.mediawiki'],2016-10-12T23:15:58Z,,"['luke-jr', 'jl2012']","@jl2012 
Thanks! ACK
Thanks Johnson.
@luke-jr This is ready to merge.
",
MarcoFalke,454,,BIP2: fix typo,closed,2016-10-06 22:56:09,,https://github.com/bitcoin/bips/pull/454,['bip-0002.mediawiki'],2016-10-06T22:56:09Z,,,,
DanielWeigl,460,,BIP49 - calculate testvector,closed,2016-10-05 20:13:38,"place-holders replaced and testvectors calculated
",https://github.com/bitcoin/bips/pull/460,['bip-0049.mediawiki'],2016-10-05T20:13:38Z,,['luke-jr'],"Oops, sorry I missed a few BIP number replacements.
",
MarcoFalke,458,,BIP2: Remove Superseded from choices for Status,closed,2016-10-05 20:06:08,"The section about the BIP status field only defines
""Replaced or Obsolete (which is equivalent to Replaced)"",
so remove ""Superseded"" for clarity.
",https://github.com/bitcoin/bips/pull/458,['bip-0002.mediawiki'],2016-10-05T20:06:08Z,,['luke-jr'],"@luke-jr Also the optional `Requires` header is newly introduced but is not added to the BIP header preamble, so the location/order is not clear. Mind to have a look?
It's not newly introduced, but indeed missing. Added.
",
jl2012,459,,Add policy descriptions to BIP141 and 143 and address some nits.,closed,2016-10-05 19:57:50,,https://github.com/bitcoin/bips/pull/459,"['bip-0141.mediawiki', 'bip-0143.mediawiki', 'bip-0144.mediawiki']",2016-10-05T19:57:50Z,,['sipa'],"utACK
",
laanwj,457,Proposed BIP modification,"bip-0144: Add enum values for MSG_WITNESS_{BLOCK,TX}, MSG_FILTERED_WITNESS_BLOCK",closed,2016-10-05 12:38:47,"Found these missing while working on https://github.com/bitcoin/bitcoin/pull/8880 .

Ping @sipa @codeshark.
",https://github.com/bitcoin/bips/pull/457,['bip-0144.mediawiki'],2016-10-05T12:38:47Z,,['CodeShark'],"ACK
",
DanielWeigl,456,New BIP,BIP 49: Derivation scheme for P2WPKH-nested-in-P2SH based accounts,closed,2016-10-05 11:36:07,"A derivation scheme similar to BIP44 for the upcoming P2WPKH-nested-in-P2SH addresses.

The test vectors aren't finished yet, as I choose to have the BIP-number as base path (like BIP44) in it. I'll update them as soon as this gets a preliminary number assigned.
",https://github.com/bitcoin/bips/pull/456,['bip-p2sh-accounts.mediawiki'],2016-10-05T11:36:07Z,,['Sjors'],"Looks like Ledger is using this: https://github.com/LedgerHQ/ledger-wallet-chrome/blob/master/app/src/wallet/wallet.coffee#L76-L80

@amougel it might be useful to add that to the (new) list of implementations.This is different form how the `addwitnessaddress` RPC call works in Bitcoin Core, which uses the same private key. It even allows you to create a witness address for a private key when its ""legacy"" address has received funds. I don't know what the plan is future wallet UI.

Although the core wallet (currently) doesn't use BIP 44, it's still useful to note how it handles SegWit vs. ""legacy"" key derivation, as well as private key reuse. Perhaps that can be added to the BIP.Trezor is also using ` m/49'/0'/0'/0/0` (=first account/first receiving address, currently only at https://beta-wallet.trezor.io)",
dangershony,451,Proposed BIP modification,Adding the source code for CoinVault,closed,2016-09-30 16:26:56,"The C#  implementation is now open source
",https://github.com/bitcoin/bips/pull/451,['bip-0044.mediawiki'],2016-09-30T16:26:56Z,,"['prusnak', 'luke-jr']","@prusnak @slush0 
Ack
",
zander,449,,Fixes to 0134,closed,2016-09-27 00:53:43,"Take all feedback items into account.
",https://github.com/bitcoin/bips/pull/449,['bip-0134.mediawiki'],2016-09-27T00:53:43Z,,,,
isghe,448,,minor: fix link to BIP 22,closed,2016-09-25 21:37:47,,https://github.com/bitcoin/bips/pull/448,['bip-0023.mediawiki'],2016-09-25T21:37:47Z,,['MarcoFalke'],"ACK 5c256744bffeee209b42018d79ac00db6881d8b1
",
zander,445,New BIP,BIP 134: Flexible Transactions,closed,2016-09-23 10:27:43,"Introducing Flextrans. Requesting a BIP number assignment. Thank you!
",https://github.com/bitcoin/bips/pull/445,"['README.mediawiki', 'bip-0134.mediawiki']",2016-09-23T10:27:43Z,,"['hoffmabc', 'MarcoFalke', 'petertodd', 'luke-jr', 'cpacia']","Wait, did you notice the license on this? That's not a free software compatible license due to the clause ""Distribution of the work or derivative of the work in any standard (paper) book form is prohibited unless prior permission is obtained from the copyright holder."" and even more worryingly: ""Distribution of substantively modified versions of this document is prohibited without the explicit permission of the copyright holder.""

In general, we probably should require authors to use a specific license to keep things simpler.

This needs to be reverted and/or fixed.
<sub>(slightly OT)</sub> BIP1 _requires_ all BIPs to be either licensed according to the OPL or be placed in the public domain. Both are a bad choice in my opinion and even though BIP1 does not forbid dual-licensing the work, I'd very much prefer to explicitly have a wider choice of accepted licenses. I had some hope that BIP2 (#350) solves this, but unfortunately it was deferred. 
@MarcoFalke Yeah, I can't imagine Amir Taaki meant for the non-free, restrictive versions of the OPL to be used; with this BIP's licensing terms it wouldn't be possible for, say, Andreas to include it in the next book on the Bitcoin protocol that he writes. Nor would it be possible for a future version of Flexible Transactions to do the obvious thing and include/modify the text of this BIP without first obtaining the author's explicit permission.

For standards that need to be distributed widely, public domain (or equivalent) is much more appropriate.
I did notice the license, but it follows the rules in BIP 1 and doesn't legally impede the publication in the BIPs repository.

BIP 2 was held back by objections to the BIP Comments changes. I suppose I could try removing that and reopen it for discussion. Perhaps I ought to forbid the additional OPL restrictions in the process...
@zander Would you be okay with removing these restrictions from the BIP? Would you object to BIP 2 if it forbade such restrictions in the future?
On Friday, 23 September 2016 15:46:09 CEST Luke-Jr wrote:

> @zander Would you be okay with removing these restrictions from the BIP?
> Would you object to BIP 2 if it forbade such restrictions in the future?

My suggestion would be that we replace OPL as an allowed license with one 
or two Creative Commons licenses. Following the suggestion from the OPL 
creators themselves.
According to Wikipedia;

> Open Publication License was created by the Open Content Project in 1999 
> as public copyright license for documents.[1] The license was superseded in 
> 2003/2007 by the Creative commons licenses.[2]

I'd suggest saying that ""Share alike"" is required and ""Attribution"" is 
optional.

Executive summary; give the user the choice (next to public domain) between 
CCO and BY-SA
see;
https://en.wikipedia.org/wiki/Creative_Commons_license#Seven_regularly_used_licenses

I would gladly change to one of those two licenses.
What I do right now is dual-license under the OPL _and_ the 2-clause BSD license. You could also do OPL + some CC license immediately.

In the near future, I'm proposing BIP 2 replace BIP 1. It allows [both CC0 and CC-BY-SA as license options for BIPs](https://github.com/luke-jr/bips/blob/bip0002_squash/bip-0002.mediawiki#Recommended_licenses). I would appreciate if you could help review it. :)
Regarding the spec.. it looks like a tag needs to be defined for `Sequence` (for RBF purposes). Probably only one per tx instead of per input?

Also, it's unclear how standard `nLockTime` would be handled. I assume `LockByTime` and `LockByBlock` are intended to be used for relative locktime (as they reference bip 68). They could also be treated as standard locktime if they are put in the `additional` part of the transaction. Otherwise a separate `nLockTime` tag should probably be defined.

And in regards to `LockByTime` and `LockByBlock` when used for relative locktime they should probably be added to the input sections no? For example:

Inputs = TxInPrevHash, TxInPrevIndex, LockByTime or LockByBlock. Similar to how `TxInPrevIndex` is set to zero if omitted, `LockByTime` and `LockByBlock` should also be treated as having a zero value if omitted. 

My 2¢
> And in regards to LockByTime and LockByBlock when used for relative locktime they should probably be added to the input sections no?

The reason that the BIP68 data was added to the inputs was only because that was the only place in the transaction where there was space to use. Inputs are about _using_ a former transactions output. The user of the output would not be the one that specifies how long that output has to be locked. You don't specify the rules of spending months after it confirms on the blockchain.
> The user of the output would not be the one that specifies how long that output has to be locked. You don't specify the rules of spending months after it confirms on the blockchain.

When combined with CSV I believe it works that way. 
","If any token found that is not covered in the next table _it_ will make the ...
Missing the word 'it'.
Satoshi -> satoshis 
Remove extraneous the.
Hahes -> hashes
Built not build.
Therefore misspelling.
"
jnewbery,444,,Update BIP 141 to include definition of Virtual transaction size and Transaction weight,closed,2016-09-20 00:05:15,"Virtual transaction size and Transaction weight are not consensus-critical, but are used in bitcoin-core IsStandard() policy, and v0.13.0+, RPCs calls return virtual transaction size instead of serialized transaction size. Although non-normative, BIP 141 should include definitions for these concepts.

https://github.com/bitcoin/bitcoin/pull/8747 is a PR to fix the RPC help text to refer to virtual transaction size instead of transaction size.
",https://github.com/bitcoin/bips/pull/444,['bip-0141.mediawiki'],2016-09-20T00:05:15Z,,"['luke-jr', 'jl2012']",,"""Rounded up"" and ""nearest integer"" seem to contradict?
Prefer to phrase this in terms that will make sense post-activation. In other words, the size of the transaction serialised with the witness data stripped.
""rounded up to the next integer""?
That makes sense, at least.
"
jl2012,427,Proposed BIP modification,BIP112: fix example,closed,2016-09-02 22:11:51,"CHECK(MULTI)SIG should be used.
",https://github.com/bitcoin/bips/pull/427,['bip-0112.mediawiki'],2016-09-02T22:11:51Z,,"['btcdrak', 'petertodd', 'luke-jr']","@btcdrak @maaku @CodeShark 
Personally, I think it's preferable to use the VERIFY...
@luke-jr , technically you could do that, which requires an extra push in scriptSig
Why would it need an extra push? AFAIK, OP_CHECK[MULTI]SIGVERIFY behaves exactly as OP_CHECK[MULTI]SIG except that the VERIFY variant short-circuits script execution immediately.
Without an extra push the stack will be empty after evaluation, which is invalid
@luke-jr The easiest way to convince us would be to make such a transaction on mainnet and show that it works. :)

edit: ah! now I see that @luke-jr was the thumbs-up emoji thing!
utACK

Though I'd suggest jl2012 take my advice. :)
ACK
",
justusranvier,429,Proposed BIP modification,BIP126: Clarify interaction with BIP69,closed,2016-09-02 22:11:13,,https://github.com/bitcoin/bips/pull/429,['bip-0126.mediawiki'],2016-09-02T22:11:13Z,,"['kristovatlas', 'luke-jr']","@kristovatlas 
ACK https://github.com/bitcoin/bips/pull/429/commits/f64f3c3d9c9b6d36a90b270d7b971cec071ec10a
",
jl2012,440,New BIP,BIP 147: Dealing with dummy stack element malleability,closed,2016-09-02 22:10:10,,https://github.com/bitcoin/bips/pull/440,['bip-nulldummy.mediawiki'],2016-09-02T22:10:10Z,,,"Revised based on @petertodd 's comment on bitcoin-dev mailing list
",
jl2012,441,,BIP146: title and content changed,closed,2016-09-02 22:03:37,,https://github.com/bitcoin/bips/pull/441,"['README.mediawiki', 'bip-0146.mediawiki']",2016-09-02T22:03:37Z,,,"This is revised to remove NULLDUMMY, add NULLFAIL, and delay deployment
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013098.html

Author order is changed since I wrote the majority of the document and should take the primary responsibility
",
techguy613,439,,"BIP75 Update: Versioning, Cancellation, Unknown Message Type, New PKI_TYPEs, Status Codes, Motivation",closed,2016-08-31 18:46:37,"Added:
- Versioning
- Cancellation
- Add UNKNOWN_TYPE to ProtocolMessageType enum in paymentrequest.proto and BIP75 text (based on suggestions from http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/)

Updated:
- Additional pki_type values
- Updated status_code values
- Update BIP75 Motivation and use cases to provide more color around reasoning and use of BIP75

NOTE: The BIP75 language no longer contains a description of the KYC compliance use case, as it is a single, very specific use-case that does not have any bearing on the technical specifications herein. BIP75 extends the original BIP70 Payment Protocol to become a two-way, encrypted messaging process, which can be used for a variety of reasons one of which is regulatory compliance.
",https://github.com/bitcoin/bips/pull/439,"['bip-0075.mediawiki', 'bip-0075/paymentrequest.proto']",2016-08-31T18:46:37Z,,,,
jl2012,435,,BIP146: change title and add NULLDUMMY rules,closed,2016-08-17 19:36:43,"NULLDUMMY is a trivial softfork to fix malleability related to the extra stack element consumed by CHECKMULTISIG(VERIFY). NULLDUMMY is probably more important than LOW_S since without that an attacker may replace the stack element with any value.
",https://github.com/bitcoin/bips/pull/435,"['README.mediawiki', 'bip-0146.mediawiki']",2016-08-17T19:36:43Z,,"['btcdrak', 'luke-jr', 'sipa']","Update implementation PR URL to #8533
@btcdrak @sipa comments addressed
","Maybe change it into ""for common transaction types"" ? It certainly does not entirely fix it.
Added benefit? Isn't it the primary goal?
This is copied from BIP66 :)
Probably that's an added benefit for BIP66, but not for this one. Will fix it
Ok will clarify. I actually mean malleability of signatures for CHECK(MULTI)SIG(VERIFY). BIP66+BIP146 should fix it entirely
@jl2012 AFAIK even that is not proven.
"
jonasschnelli,434,,Add BIP150 (Peer Authentication),closed,2016-08-17 08:21:26,,https://github.com/bitcoin/bips/pull/434,"['README.mediawiki', 'bip-0150.mediawiki']",2016-08-17T08:21:26Z,,"['rebroad', 'luke-jr']","I've currently been using ZeroTier One in order to authenticate peers and avoid MITM situations. Seems to work well so far with only about 30ms added to the ping time compared with to direct IPv4 connection.
Thinking about this, I don't think a simple AUTH set of messages will prevent MITM unless every message uses some form of PKI. It's not enough to just have a few messages exchanged to establish identity.
This is not the place to discuss proposals.
@luke-jr Thanks for this info. Where is the place please?
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
@rebroad: I'm interested to read your concerns on the mailinglist. Be aware of the conjunction with BIP151. A ""simple set"" of AUTH commands together with a preshared key (and on top of BIP151) can protect against MITM attacks.
",
jl2012,433,New BIP,BIP 146: Low S values signatures,closed,2016-08-16 19:44:52,"This BIP specifies proposed changes to the Bitcoin transaction validity rules to restrict signatures to using low S values.
",https://github.com/bitcoin/bips/pull/433,['bip-lows.mediawiki'],2016-08-16T19:44:52Z,,,"@luke-jr Addressed comments of https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013007.html
",
sreekanthgs,431,Proposed BIP modification,Adding ruby implementation to Other implementation,closed,2016-08-10 23:33:56,"BipMnemonic is a ruby gem to generate BIP-39 compliant Mnemonic Words from specific entropy or random entropy of `n` bits and also to generate the BIP-32 seed from the BIP-39 Mnemonic.

It also lets you convert the Mnemonic back to the entropy.
",https://github.com/bitcoin/bips/pull/431,['bip-0039.mediawiki'],2016-08-10T23:33:56Z,,"['luke-jr', 'voisine']","@slush0 @prusnak @voisine @ebfull 
utACK

There's no ruby implementation yet, and we already have several other languages. However, if we did it over I think it would be better to limit it to one, maybe two reference implementations, as they do for RFCs. The current practice I think will lead to problems, like what happens if two implementations differ in their behavior.
",
jonasschnelli,430,,[bip151] slightly increase robustness of the re-keying,closed,2016-08-07 21:09:59,"The current re-keying procedure does allow an attacker knowing the current symmetric cipher key while **not** knowing the session-id (derived from the ECDH secret) to ""survive"" the re-keying.

This will slightly increase the prediction resistance.

Also includes a ugly typo in the `hkdf` key. Reported by @ccjj.

cc: @ccjj
",https://github.com/bitcoin/bips/pull/430,['bip-0151.mediawiki'],2016-08-07T21:09:59Z,,,,
jl2012,428,,BIP114: MAST proposal v2,closed,2016-07-29 05:36:02,,https://github.com/bitcoin/bips/pull/428,"['bip-0114.mediawiki', 'bip-0114/mastexample.png']",2016-07-29T05:36:02Z,,,,
SandroMachado,419,Proposed BIP modification,Add Swift Library,closed,2016-07-27 18:09:59,"This PR adds a Swift Library to parse `Bitcoin Payment URI`.
",https://github.com/bitcoin/bips/pull/419,['bip-0021.mediawiki'],2016-07-27T18:09:59Z,,"['tcatm', 'luke-jr']","@tcatm @TheBlueMatt 
ack
",
ysangkok,425,Proposed BIP modification,BIP-0141: Link to permanent PR of reference implementation,closed,2016-07-27 17:03:18,"analogue to https://github.com/bitcoin/bips/commit/ecfb7ebbca3488cd4c1e11210cbc5914a9228c67
",https://github.com/bitcoin/bips/pull/425,['bip-0141.mediawiki'],2016-07-27T17:03:18Z,,"['luke-jr', 'jl2012']","@CodeShark @jl2012 @sipa
ACK
",
chjj,426,,BIP151: Clarifications on sequence numbers.,closed,2016-07-27 17:02:54,"~~This clarifies that the ciphertext payload length is meant to update the AEAD as AAD. OpenSSH does this, but in a naive way, [as seen here](https://github.com/openssh/openssh-portable/blob/60c2c4ea5e1ad0ddfe8b2877b78ed5143be79c53/cipher-chachapoly.c#L93) (aadlen is 4 -- poly1305_auth is called on both size and payload).~~

~~Although the payload length _is_ AAD, OpenSSH violates [both](https://tools.ietf.org/html/rfc7539#section-2.8.1) [RFCs](https://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03#section-5) by not including the AAD length (or the ciphertext length) in the MAC before finalization. This change to the bip includes the size explicitly as AAD.~~

Update: Nevermind the above change. I confused myself by reading the openssh code too much (AAD not necessary due to bip151's encrypted size).

This change also explicitly mentions sequence numbers are meant to be uint32's which are allowed to overflow. This is in keeping with [openssh behavior](https://github.com/openssh/openssh-portable/blob/286f5a77c3bfec1e8892ca268087ac885ac871bf/packet.c#L1315). I don't think having a 64bit sequence provides any benefit over a 32bit one for bip151's use case: we're guaranteed to have rekeyed by the time the seq number reaches uint32_max, so there's no danger in reusing a previous IV/sequence earlier.

Along with the sequence size, this PR shrinks IV size to 64 bits [a la openssh](https://github.com/openssh/openssh-portable/blob/master/chacha.c#L81) (we weren't using all 96 bits even with 64bit sequences). This allows for a 64 bit chacha counter.

cc @jonasschnelli 
",https://github.com/bitcoin/bips/pull/426,['bip-0151.mediawiki'],2016-07-27T17:02:54Z,,['jonasschnelli'],"Thanks @chjj!

1) AAD

> Update: Nevermind the above change. I confused myself by reading the openssh code too much (AAD not necessary due to bip151's encrypted size).

As you updated your PR, I think the way how we build the AEAD is correct.

2)
I just checked the ChaCha20Poly1305@openssh.com specs and there it says

<pre>
The AEAD is constructed as follows: for each packet, generate a Poly1305
key by taking the first 256 bits of ChaCha20 stream output generated
using K_2, an IV consisting of the packet sequence number encoded as an
<strong>uint64</strong> under the SSH wire encoding rules and a ChaCha20 block counter of
zero.
</pre>

And yes, openssh is using a `uint32_t` as internal sequence number counter (which should be sufficient as you stated).

ACK after squash.
> As you updated your PR, I think the way how we build the AEAD is correct.

Yeah, I was confused for a second. I didn't notice openssh had an option for unencrypted payload sizes at first.

> I just checked the ChaCha20Poly1305@openssh.com specs and there it says

Hmm, I think they're referring to the IV there (i.e. encoding/casting a uint32 seq number to a uint64 for the IV).

Anyway, glad we got this figured out before more implementations roll out.
",
elias19r,424,Proposed BIP modification,Minor link fix,closed,2016-07-22 21:01:00,,https://github.com/bitcoin/bips/pull/424,['bip-0021.mediawiki'],2016-07-22T21:01:00Z,,"['tcatm', 'luke-jr']","@tcatm @TheBlueMatt 
ack
",
jl2012,416,Proposed BIP modification,BIP141 fix,closed,2016-07-21 16:13:10,"@sipa 
1. Make the use of ""witness program"" consistent
2. Fix: P2WSH script has a 10000 byte limit
3. Remove the mention of extending 32 bytes witness program with softfork
",https://github.com/bitcoin/bips/pull/416,['bip-0141.mediawiki'],2016-07-21T16:13:10Z,,"['sipa', 'CodeShark', 'luke-jr']","@CodeShark fixed
@jl2012 You are an Author of this BIP, so any PRs you open will automatically get merged... so please don't open PRs until you are certain of a change.

In this case, I will wait for an explicit ACK since it sounds like you're checking with @sipa before desiring it to be merged.
fixed and squashed
ACK
","I suggest we use the term ""witness script"" rather than ""P2WPKH/P2WSH program"" when talking about the unhashed sequence of op codes and data pushes that then get hashed into a P2WSH witness program. In the case of P2WPKH, the witness program is the pubkey hash and the script is implicit.
I'm not sure this sentence is grammatically correct.
Right, it should be ""identically as"" - not ""identical to as""
"
laanwj,420,Proposed BIP modification,bip141: Change 'block cost' to 'block weight',closed,2016-07-21 16:06:51,"The term 'block cost' led to confusion about the unit that it is expressed in, in that it expressed monetary cost. Change it to a more general term 'block weight'.

This was discussed in the [2016-07-14 Bitcoin Core developer meeting](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-07-14-19.00.html).
",https://github.com/bitcoin/bips/pull/420,['bip-0141.mediawiki'],2016-07-21T16:06:51Z,,"['sipa', 'luke-jr']","@CodeShark @jl2012 @sipa 

@laanwj Feel free to update BIP 145 here too?
ACK. Agree with the suggestion to also update BIP 145.
",
Sjors,421,Proposed BIP modification,"BIP 39: remove ""public beta"" from blockchain.info link",closed,2016-07-18 23:22:44,"This is now in the default wallet.
",https://github.com/bitcoin/bips/pull/421,['bip-0039.mediawiki'],2016-07-18T23:22:44Z,,"['ebfull', 'luke-jr', 'voisine']","@slush0 @prusnak @voisine @ebfull 
ACK
ACK
",
Sjors,336,Proposed BIP modification,BIP 39: link BitcoinJS & blockchain.info implementation,closed,2016-07-18 15:29:16,"BIP 39 mnemonics are featured quite prominently in the UI as well.
",https://github.com/bitcoin/bips/pull/336,['bip-0039.mediawiki'],2016-07-18T15:29:16Z,,"['voisine', 'ebfull', 'slush0', 'luke-jr', 'dcousens']","Semi-duplicate of https://github.com/bitcoin/bips/pull/307,  albeit,  with added `blockchain.info` references. 
I updated my PR to also make the other languages look prettier :-)
By the way I specifically mention the wallet, because it provides an indication of how many bitcoin users depend on a BIP. I also added a link to the source code which could help in assessing if a BIP is fully or only partly implemented. In this case, it shows that the blockchain wallet currently doesn't use the passphrase (though it could), only the mnemonic words.
@slush0 @prusnak @voisine
Sorry guys, missed this. ACK.
belated ACK.
Also missed this, ACK.
",
jesion,358,Proposed BIP modification,Proposed a new Java implementation link,closed,2016-07-16 00:37:46,"Added a new Java implementation.
",https://github.com/bitcoin/bips/pull/358,['bip-0032.mediawiki'],2016-07-16T00:37:46Z,,"['sipa', 'luke-jr']","@sipa
I have a feeling that many of links like this function more as advertizement than as actual reference material for people interested in the specification.

ACK, as I don't want to prefer one implementation over another, but I plan to rework that section somewhere in the future (as discussed in the IRC meeting on May 12th, see https://bitcoincore.org/en/meetings/2016/05/12/ )
",
jl2012,399,Proposed BIP modification,BIP141 script failure clarifications,closed,2016-07-16 00:00:31,"Footnotes to clarify some special conditions which witness scripts will fail @sipa @instagibbs @gmaxwell 
",https://github.com/bitcoin/bips/pull/399,['bip-0141.mediawiki'],2016-07-16T00:00:31Z,,"['sipa', 'instagibbs', 'luke-jr']","great, ACK
@sipa is it ok now?
@jl2012 You are an Author of this BIP, so any PRs you open will automatically get merged... so please don't open PRs until you are certain of a change.

In this case, I will wait for an explicit ACK since it sounds like you're checking with @sipa before desiring it to be merged.
ACK
","Maybe say: no _further_ size restriction for the witness, besides the 40-byte limit.
This is referring to the witnessScript, AFAIK, not the witness program. 
Oh, indeed.
I had the exact same misinterpretation you did a couple days ago. @jl2012 could we just spell it out?
@sipa @instagibbs revised
"
SandroMachado,335,Proposed BIP modification,Add a library reference,closed,2016-07-15 15:45:01,"Add the library [BitcoinPaymentURI](https://github.com/SandroMachado/BitcoinPaymentURI).
",https://github.com/bitcoin/bips/pull/335,['bip-0021.mediawiki'],2016-07-15T15:45:01Z,,"['tcatm', 'andre-amorim', 'luke-jr']","ack
@tcatm @TheBlueMatt 
ack. needs rebase due to #308, though.
",
dcousens,308,Proposed BIP modification,Add BIP21 Javascript library,closed,2016-07-15 15:37:20,,https://github.com/bitcoin/bips/pull/308,['bip-0021.mediawiki'],2016-07-15T15:37:20Z,,"['tcatm', 'luke-jr']","@TheBlueMatt @tcatm
Rebased,  ping @TheBlueMatt / @tcatm for merge or close.  
ack
",
afk11,325,Proposed BIP modification,Typo in change to BIP50,closed,2016-07-15 15:36:59,"@luke-jr @gavinandresen 
",https://github.com/bitcoin/bips/pull/325,['bip-0050.mediawiki'],2016-07-15T15:36:59Z,,"['gavinandresen', 'kanzure']","ACK 9bb5acaec764b41c23d5d4364bc2d5bba87910d4, unless anyone has strong opinions about ""would"" vs ""could"" here.
ACK
",
jonasschnelli,418,,[BIP151] Switch from plain HMAC_SHA512 KDF to HKDF,closed,2016-07-15 15:01:19,"HKDF seems to be the better approach to derive symmetric cipher keys from the ECDH shared secret.

Discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-July/012878.html

ping @Roasbeef @sipa @gmaxwell @zooko
",https://github.com/bitcoin/bips/pull/418,['bip-0151.mediawiki'],2016-07-15T15:01:19Z,,,,
dcousens,417,Proposed BIP modification,bip141: clarify that marker is 1 byte,closed,2016-07-15 15:00:49,"Might seem superfluous,  but I would find the clarification meaningful,  even if the given literal is inherently 1 byte.
",https://github.com/bitcoin/bips/pull/417,['bip-0141.mediawiki'],2016-07-15T15:00:49Z,,['jl2012'],"ACK
",
kristovatlas,410,New BIP,Add BIP 126,closed,2016-07-15 14:55:49,,https://github.com/bitcoin/bips/pull/410,['bip-0126.mediawiki'],2016-07-15T14:55:49Z,,['luke-jr'],"README.mediawiki needs:

``` mediawiki
> | [[bip-0126.mediawiki|126]]
> | Best Practices for Heterogeneous Input Script Transactions
> | Kristov Atlas
> | Informational
> | Draft
> |-
```
",
mappum,400,Proposed BIP modification,Update BIP9 assignments list,closed,2016-07-11 10:48:47,"This PR updates the BIP9 bit assignments list since the `segwit` deployment is now active on testnet. It also changes the `csv` testnet activation height from ""770111"" to ""770112"" since that is the first block where the deployment is active.
",https://github.com/bitcoin/bips/pull/400,['bip-0009/assignments.mediawiki'],2016-07-11T10:48:47Z,,"['btcdrak', 'luke-jr', 'sipa', 'laanwj']","@mappum You can add CSV activation on mainnet now #419328
It seems a majority in this thread agree that the activation heights in the document should contain the first block which has state `ACTIVE`. Can this be merged now?
@mappum please change ""active since #XXX"" to ""enforced since #XXX"" to prevent confusion. Was also suggested by @laanwj [here](https://github.com/bitcoin/bips/pull/400#discussion_r68894736)
I think 'active' is perfect, as it is the name of the state in BIP9. If
there is confusion about what active means, we should clarify the BIP
itself.
@sipa OK then. You should ACK this so it can get merged.
Yes, let's just merge this. I had the definition wrong (probably my own fault, not the BIP's).
ACK
","Whether this should be #770111 or #770112 depends on how the column is defined.
You're right that the block mining on _top of block #770111_ is the first for which the CSV softfork rules are activated, which is block #770112.
Checked that this block # is correct for segwit (but with same nit as above - depending on how we want to count this ""since"", inclusive or not).
Maybe it should say ""activated on #770112""
it's #770111 that changes the state to ""active"", remember that it checks the state for _previous_ block to see what rules to enforce. #770112 is the second block that has ""active"" state, but the first for which the rules are enforced.

I tend to agree that mentining #770112 seems more intuitive, but this is a more subtle distinction than most people take into account :) Very easy to introduce off-by-one errors here.

To be precise:
- `VersionBitsBlockState(chainActive[770110], consensusParams, Consensus::DEPLOYMENT_CSV)` is `THRESHOLD_LOCKED_IN`
- `VersionBitsBlockState(chainActive[770111], consensusParams, Consensus::DEPLOYMENT_CSV)` is `THRESHOLD_ACTIVE`
- `VersionBitsBlockState(chainActive[770112], consensusParams, Consensus::DEPLOYMENT_CSV)` is `THRESHOLD_ACTIVE`
In that case ""active since #770112"" is correct, which was my original thinking. Alternatively ""enforced since #770112"" would make the distinction that #770112 is the first block on which the new rules are applied.
@laanwj Sounds like you're talking about implementation details there... If #770112 is the first block the rules are enforced in, how nodes implement that logic is not really relevant...
I'd suggest to change the text to ""enforced since #XXX"" to prevent confusion then.
@laanwj You're calling the function incorrectly. The first argument to VersionBitsBlockState is pindex**Prev**. Using BIP9 terminology, block 770112 is the first which has state ACTIVE.
OK.
Someone else must have made that mistake too then, otherwise this number wouldn't be one-off in the first place.
"
jl2012,415,Proposed BIP modification,BIP68/113 for generation transaction,closed,2016-07-06 01:02:49,"To clarify the applicability of BIP68 and 113 to generation transaction
",https://github.com/bitcoin/bips/pull/415,"['bip-0068.mediawiki', 'bip-0113.mediawiki']",2016-07-06T01:02:49Z,,"['btcdrak', 'maaku', 'afk11', 'luke-jr']","@maaku @btcdrak @NicolasDorier @afk11 
This isn't true. The rules apply as much to outputs of a coinbase as they do any other transaction. Is the proposed text talking about the coinbase's `nSequence` value? Then that should be specified exactly, although I don't think the clarification is necessary (coinbase is already specially treated).
@maaku, isn't the SequenceLocks is done only for non-coinbase tx?

https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L2480

And we do need to clarify as some miners are using the nSequence as extranonce
(I'm talking about the BIP68, not BIP112)
nSequence is about inputs, not outputs... and the new rule for it doesn't make sense for the generation tx input since it's not spending coins.
For 113 (MTP), the generation transaction's locktime is checked, so looks good to me: https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L3602

@jl2012 Maybe clarify by saying 68 doesn't apply to the inputs of the coinbase transaction? It can certainly apply to spends of it's outputs.
@maaku @afk11 @luke-jr  Edited
Right, the sequence lock checks are not done for the coinbase input. The updated text is better (see comment made)
@maaku @btcdrak fixed
ACK 8d40b6e
ACK 8d40b6e
ACK 8d40b6e
Disagree with ""coinbase transaction"", but this is hardly the first time, and an ACK is an ACK...
","""of the generation""

Is this the proper terminology? Should we say ""coinbase transaction"" here? Honestly not sure what the current accepted terminology is.
""coinbase tx"" is definitely more common.
The coinbase is the input scriptSig for the generation transaction.
"
btcdrak,414,Proposed BIP modification,BIP 152: Link to permanent PR of reference implementation,closed,2016-06-30 17:03:14,,https://github.com/bitcoin/bips/pull/414,['bip-0152.mediawiki'],2016-06-30T17:03:14Z,,['TheBlueMatt'],"ping @TheBlueMatt 
ACK

On June 28, 2016 2:43:13 PM PDT, ""฿tcDrak"" notifications@github.com wrote:

> ping @TheBlueMatt 
> 
> ---
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/414#issuecomment-229193213
",
jl2012,411,,BIP112/114 example fix,closed,2016-06-24 12:36:50,"The ""key hash"" in these examples are followed by a CHECKSIG, so that should be ""pubkey"", not ""key hash""
",https://github.com/bitcoin/bips/pull/411,"['bip-0112.mediawiki', 'bip-0114.mediawiki']",2016-06-24T12:36:50Z,,"['btcdrak', 'petertodd']","heh, I was just about to fix that too.

ACK
ACK
",
NicolasDorier,409,Proposed BIP modification,header message can also get replied by getdata (CMPCT_BLOCK),closed,2016-06-23 03:13:34,,https://github.com/bitcoin/bips/pull/409,['bip-0152/protocol-flow.png'],2016-06-23T03:13:34Z,,"['TheBlueMatt', 'luke-jr']","@TheBlueMatt 
ACK
",
jl2012,408,,Clarify BIP9 threshold,closed,2016-06-21 02:52:24,"The threshold for should be ≥1916 for mainnet, ≥1512 for testnet.
https://github.com/bitcoin/bitcoin/blob/v0.12.1/src/versionbits.cpp#L69
https://github.com/bitcoin/bitcoin/blob/v0.12.1/src/chainparams.cpp#L84
https://github.com/bitcoin/bitcoin/blob/v0.12.1/src/chainparams.cpp#L177
",https://github.com/bitcoin/bips/pull/408,['bip-0009.mediawiki'],2016-06-21T02:52:24Z,,"['sipa', 'instagibbs']","ACK
ACK
",
dcousens,307,Proposed BIP modification,add BIP39 javascript library,closed,2016-06-17 18:08:24,,https://github.com/bitcoin/bips/pull/307,['bip-0039.mediawiki'],2016-06-17T18:08:24Z,,"['prusnak', 'luke-jr']","@prusnak @slush0 @voisine 
ping @prusnak @slush0 or @voisine for merge or close :+1: 
Ack
",
TheBlueMatt,406,,Allow block responses to MSG_CMPCT_BLOCK requests,closed,2016-06-17 00:48:32,,https://github.com/bitcoin/bips/pull/406,['bip-0152.mediawiki'],2016-06-17T00:48:32Z,,['rebroad'],,"How is it determined when it's not sent?
"
jl2012,405,,BIP143: typo fix,closed,2016-06-14 16:37:01,,https://github.com/bitcoin/bips/pull/405,['bip-0143.mediawiki'],2016-06-14T16:37:01Z,,,,
jl2012,404,,BIP143: private key for example,closed,2016-06-13 17:54:35,,https://github.com/bitcoin/bips/pull/404,['bip-0143.mediawiki'],2016-06-13T17:54:35Z,,,,
jl2012,403,,BIP143: Corrections and examples for OP_CODESEPERATOR,closed,2016-06-09 19:55:02,,https://github.com/bitcoin/bips/pull/403,['bip-0143.mediawiki'],2016-06-09T19:55:02Z,,,,
jl2012,401,,More examples for BIP143,closed,2016-06-08 21:15:05,,https://github.com/bitcoin/bips/pull/401,['bip-0143.mediawiki'],2016-06-08T21:15:05Z,,,,
sipa,397,Proposed BIP modification,Elaborate hash function design in BIP152,closed,2016-06-07 22:28:23,,https://github.com/bitcoin/bips/pull/397,['bip-0152.mediawiki'],2016-06-07T22:28:23Z,,"['gmaxwell', 'TheBlueMatt', 'luke-jr']","@TheBlueMatt 
Didnt check any of the math, but general text seems reasonable. ACK.
ACK
","once every ''F = 281474'' blocks. < needs to mention that every link in the network is multiple comparisons.
several 1000 -> several thousand
:This design only seeks to prevent network-wide misbehavior.   (the we're only trying strikes me as excessively informal)
That's already accounted for in the log2(F \* m \* t) formula. If it's not clear enough, that should be clarified where that formula is introduced.
"
chriswheeler,395,Proposed BIP modification,Fix typo on link to assignments,closed,2016-06-07 16:16:36,,https://github.com/bitcoin/bips/pull/395,['bip-0009.mediawiki'],2016-06-07T16:16:36Z,,"['btcdrak', 'petertodd', 'luke-jr', 'MarcoFalke']","@sipa @petertodd @gmaxwell @rustyrussell 
@luke-jr This is an obvious error, pointing to a 404 (introduced by my last commit). It should just be merged.
Can confirm this fixes the 404
utACK https://github.com/bitcoin/bips/pull/395/commits/3dc43c84b134b4318376f40015a6840f6d900d14
",
jl2012,398,,BIP141: extend max witness program size to 40 bytes,closed,2016-06-04 19:24:08,"The maximum witness program size is increased from 32 to 40 bytes. This provides extra space to specify script version (for originally 16 upgradable versions to up to 16 \* 2 ^ 64)
",https://github.com/bitcoin/bips/pull/398,['bip-0141.mediawiki'],2016-06-04T19:24:08Z,,['luke-jr'],"I thought the plan was to simply remove size limits from both pushes?
",
luke-jr,365,Proposed BIP modification,BIP 141 and 145: GBT updates for SegWit,closed,2016-06-01 17:57:05,"@sipa @CodeShark @jl2012 
",https://github.com/bitcoin/bips/pull/365,"['bip-0141.mediawiki', 'bip-0145.mediawiki']",2016-06-01T17:57:05Z,,"['btcdrak', 'theuni', 'jl2012', 'sipa']","The nVersion field of a block never affects the rules applied, so a miner can always be free to set the nVersion to anything.
@sipa Which part are you referring to? GBT servers may very well want to restrict the nVersion to things they can handle.
I had interpreted ""the server requires support for"" as rules the server demanded you to enforce, rather than rules the server demands you to set bits for. It's a bit confusing that rules and rulesenforced are about consensus rules, and rulesrequires is about nVersion bits to be set. Perhaps replace rulesrequired with versionrequired, with an integer of bits the server requires you to set in nversion?
I would have grouped ""rules"" and ""rulesrequired"" together, since they deal with bits available/allowed and required; vs ""rulesenforced"" which is the actual consensus rules being used. Maybe ""vbits"" and ""vbitsrequired""?
ACK BIP141
@luke-jr vbits would just be the same as version, I think?

Isn't this sufficient:
- vbrequired: bits in nVersion that the server demands to be set (so an integer)
- rules: list of strings of deployments whose rules are in effect

?
@sipa How will clients know what bits are _available_ and what they mean in context?
@luke-jr What do you mean by ""available""?
@sipa Bits which have a defined meaning.
@luke-jr Why does that matter? If the bits are not active, they have no relevance for mining the block, as there are never any consensus rules in BIP9 that prevent you from setting any combination at all of version bits. The server may insist that you set some to vote for, but apart from that, that information is not relevant to the client.
The client needs the information to know which bits it wants to or doesn't want to set.
They can find that in the BIP.

If they need to rely on the server for that, the server can claim anything,
including claiming that there is nothing to vote for.
So put each and every BIP into the GBT client, even before it has activated?

Consider that the server trusted for name:bit mappings could very well be your own local bitcoind.
Also, _even if_ each BIP were put into the GBT client, the client doesn't have the required _blockchain context_ to determine if the BIP has activated or is still pending.
If the client software doesn't know about a BIP, why does it care?

How does it help that the server says ""these arbitrary string names exist"",
if the client doesn't know what protocol changes they correspond to? If
they care about the rules, they know the rule's name too.
@luke-jr Yes, saying with rules are active is useful. Saying which exist
isn't. They're just arbitrary strings with no meaning to the client. If
they do know about them, they don't need to be told.
For example, a miner might want to use --veto-vbits=bip109 to instruct their software to automatically unset the BIP 109 bit, and reject pools that require it. Or --require-vbits=bip109 for the opposite.
@luke-jr What if the server doesn't know about a particular BIP yet, but the miner does? If the miner has an opinion about a particular BIP/deployment, they also know what bits to use.
If the server doesn't support it, it shouldn't be indicating it does regardless.
Well by default nVersion will always be setting bits for everything that it supports. The miner is always free to unset bits from it, but I don't think it's the server's job to explain the consensus rules to the miner.
@sipa @petertodd @gmaxwell @rustyrussell @CodeShark @jl2012

This has been revised per discussion. Please re-check and ACK if acceptable.
The changes in BIP22 are just formatting?
Yes, someone noticed the {{templates}} were not rendering on GitHub.
ACK 141
Concept ACK on GBT changes. It's a bit hazy though as to what the server should do if a softfork rule is missing from the request, and there's the possibility of altering the block (potentially in a nasty way, like coinbase-only) to make it compatible. In segwit's case, would the lack of a ""segwit"" rule in the request cause an error post-activation, or would witness transactions be filtered out?
> It's a bit hazy though as to what the server should do if a softfork rule is missing from the request, and there's the possibility of altering the block (potentially in a nasty way, like coinbase-only) to make it compatible. In segwit's case, would the lack of a ""segwit"" rule in the request cause an error post-activation, or would witness transactions be filtered out?

The server has a few options:
- Filter out witness transactions and use rules/force
- Produce the full witness-enabled template, and do _not_ use rules/force. The client in this case must refuse to proceed unless it can handle segwit (listed in ""rules"")
- Throw an error
Right, and that ambiguity is kinda nasty without a proposed implementation. I'd go as far as saying that it should _never_ throw an error if there's the possibility of somehow creating a valid block. Maybe another input flag could be added for ""fail for degraded blocks"".

Regardless, this needs to be laid out in the BIP.
Which method a server uses in this situation is implementation-specific, not part of the standard. In any case, it is already documented clearly here: https://github.com/bitcoin/bips/pull/365/files#diff-6a9961b118279d111faf86ad6ebbfedbR204

Please feel free to proposed improved language.
NACK that. Where preferences can be communicated, they should be, and they should be respected by the server. Otherwise what ends up being ""part of the standard"" is the default behavior of the leading implementation.
I don't understand what you're NACKing.
","I would suggest the for most of the time, most softforks will role out one consensus BIP so the sensible name would be `bipxxxx` unless you have a case like with the bip68+112+113 softfork, in which case we labelled that `csv`. Therefore I would suggest default of `bipxxxx` unless it's a bundle.

Thinking more, we probably need a table of soft forks somewhere with name, bip(s), starttime, timeout.
This is outside the scope of this PR, IMO.
Does this section still match the text before?
No, it was left over. Removed.
Any reason for removing the sigop cost terminology? I thought it was useful to distinguish from the original sigops definition.
I don't see how the original sigops definition is relevant post-segwit. ie, what's the point?
Avoiding confusion :)
I personally find it more confusing to have two terms for essentially the same thing of different versions... should GBT be changed to remove sigops/sigoplimit and add sigopcost/sigopcostlimit as well?
"
btcdrak,386,Proposed BIP modification,Add BIP9 assignments,closed,2016-05-31 18:08:56,"Add a place to track various BIP9 deployment proposals.

As per IRC meeting http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-05-05-19.01.html
",https://github.com/bitcoin/bips/pull/386,"['bip-0009.mediawiki', 'bip-0009/assignments.mediawiki']",2016-05-31T18:08:56Z,,"['MarcoFalke', 'dabura667', 'petertodd', 'luke-jr', 'laanwj']","ACK b56f7d7b6da75a31acfff42a678ed31b0555259f
I think it would be better to format this as a table from future to past (rows, each being a year, or quarter-year), and bits (columns). Probably don't need testnet.
ACK, thanks, I was about to do this but you beat me to it by almost a week :)

I think having testnet in there is fine
ACK https://github.com/bitcoin/bips/pull/386/commits/6313ee0f3bd591a773a0ed7f2e1c7b360206b529
ping @luke-jr 
","Unfortunately it seems `class=""wikitable sortable""` won't render on GitHub.
![vg7ig4p](https://cloud.githubusercontent.com/assets/7275704/15093481/88acdc0c-1481-11e6-9aa7-647c563331e0.png)
seems to render ok https://github.com/btcdrak/bips/blob/bip9assign/bip-0009/assignments.mediawiki what am I missing?
Luke was suggesting to sort the table and the best way to do this would be
dynamic. (i.e. adding the sortable keyword). The actual mediawiki parser
understands sortable but the github parser does not, I think.
afaic, none of the fancy stuff works on Github rendering. Look at the README.mediawiki for example - it's got lots of formatting and colours in the markup, but doesnt render.
I'm not suggesting to merely sort it, but to format it in a way that it is clear which bits are used at what times.
That's slightly complicated since bits will become free earlier than expiry once activated. Maybe we should keep it simple... or simply ~~strikeout~~ the bit once activated?
"
luke-jr,391,Proposed BIP modification,BIP 9: GBT updates for versionbits,closed,2016-05-31 14:50:42,"Split out of #365 (ie, without segwit and misc changes)
",https://github.com/bitcoin/bips/pull/391,['bip-0009.mediawiki'],2016-05-31T14:50:42Z,,['sipa'],"@sipa @petertodd @gmaxwell @rustyrussell 
ACK
",
TheBlueMatt,393,,Update to new BIP 152 Protocol Flow,closed,2016-05-24 05:22:55,,https://github.com/bitcoin/bips/pull/393,['bip-0152/protocol-flow.png'],2016-05-24T05:22:55Z,,,,
TheBlueMatt,392,,Replace my generic bip@ email with bip-specific emails everywhere,closed,2016-05-23 10:31:57,,https://github.com/bitcoin/bips/pull/392,"['bip-0037.mediawiki', 'bip-0111.mediawiki']",2016-05-23T10:31:57Z,,,,
TheBlueMatt,389,New BIP,BIP 152: Compact Block Relay,closed,2016-05-23 10:30:36,"This is a first draft of BIP 152 - Compact Block Relay.
",https://github.com/bitcoin/bips/pull/389,"['README.mediawiki', 'bip-0152.mediawiki', 'bip-0152/protocol-flow.png']",2016-05-23T10:30:36Z,,"['btcdrak', 'luke-jr', 'sipa', 'dcousens']","Title case mismatch between README and bip-0152
I think I addressed all the concerns here.
Missing separator line in README
LGTM :)
Fixed nits
","Are there any statistics that support this savings to be non-trivial?
I can't foresee it saving more than say 5-10 kB per block,  but I may be underestimating. 

IMHO,  that added complexity and design quirks [of this new VarInt] more than offsets the potential savings if it is less than ~10%.
Please do discussion of the actual proposal on the bitcoin-dev ML.
@luke-jr is there any alternative to the ML for those of us that find it a pain to keep track of?  It just seems that given GitHub is set up as a collaboration platform that most development already occurs on,  discussion would be easier (for some) here.
s/Compact block relay/Compact Block Relay/ to match README.md (or vice versa)
@dcousens the thread is here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012624.html
maybe put `cmpctblock` etc  in backticks to make it clear it's protocol message, otherwise it reads like a spelling mistake/typo.
you can just enclose it in `<pre> </pre>` tags.
Nit: SipHash-2-4
"
techguy613,385,Proposed BIP modification,BIP75 Simplification and Enhancements,closed,2016-05-19 18:51:45,"This update for BIP75 makes the following changes:
- Remove duplicate, encrypted versions of each Payment Protocol message
- Add encapsulating messages that allow for both plaintext and encrypted messaging as well as status messaging within the protocol
- Change the AES-256 mode to GCM (from CBC), and including status_code || status_message as Additional Authenticated Data in the GCM cipher
- Update use of ECDH X-point to instead use SHA256(ECDH().x) to match up with the libsecp256k1 implementation of ECDH)

These changes aim to make the protocol much easier to implement on both the client and store & forward server sides.
",https://github.com/bitcoin/bips/pull/385,"['bip-0075.mediawiki', 'bip-0075/bip70-extension.png', 'bip-0075/encrypted-invoice-request-process.png', 'bip-0075/mobile-sf-encrypted-ir-without-payment.png', 'bip-0075/mobile-sf-ir-with-payment.png', 'bip-0075/mobile-sf-ir-without-payment.png', 'bip-0075/paymentrequest.proto']",2016-05-19T18:51:45Z,,['luke-jr'],"Can you merge this with the master branch please?
Master merged 👍 
Hey @luke-jr, can you please wait to merge this PR (if you were going to merge it soon?). I need to work on one more thing that I'm realizing needs a little bit of a revamp. Thanks!
Next time just close and reopen the PR ;)
Next time I will definitely close and re-open, but for now we're ready to go! 👍 Thanks @luke-jr 
Hey @luke-jr! There hasn't been much talk about this PR on the list outside of the announcement. What is the current status of (or issues holding up) merging the PR? Thanks sir!
Missed your previous comment. ;)
",
stevenroose,388,Proposed BIP modification,Error in BIP0009 code example,closed,2016-05-18 22:47:14,"A BIP in state STARTED that did not reach the threshold would disappear instead of stay in STARTED.

The hex error made me looking for a bug for almost an hour after copy pasting the hex values.
",https://github.com/bitcoin/bips/pull/388,['bip-0009.mediawiki'],2016-05-18T22:47:14Z,,"['sipa', 'luke-jr']","@sipa @petertodd @gmaxwell @rustyrussell 
The only real error is the hex. I thing the added return statement was just forgotten or considered obvious, however it is explicitly added in the fragment above.
ACK
",
jonasschnelli,362,New BIP,BIP 151: Peer-to-Peer Communication Encryption,closed,2016-05-18 19:37:53,"The Bitcoin network does not encrypt communication between peers today. This opens up security issues (eg: traffic manipulation by others) and allows for mass surveillance / analysis of bitcoin users. Mostly this is negligible because of the nature of Bitcoins trust model, however for SPV nodes this can have significant privacy impacts [1] and could reduce the censorship-resistance of a peer.
",https://github.com/bitcoin/bips/pull/362,"['README.mediawiki', 'bip-0151.mediawiki']",2016-05-18T19:37:53Z,,"['jonathancross', 'luke-jr']","Thanks @jonathancross!
Will overhaul the BIP soon.
Thanks for pushing this forward @jonasschnelli! I'm happy to see this BIP as it addresses concerns I've had for a long time. Happy to help edit the next version as well (native English speaker). Cheers!
I have removed the Authentication-BIP from the PR (needs further discussion) and finalized/overhauled the encryption BIP (BIP 151).

Thanks for feedback.
The filename is wrong and README needs to be updated.
Fixed the filename and updated the README.
","""information’s"" => ""information""
""Benefits of peer authentication:""
- ""elliptic curve cryptography"" or maybe just replace with ""ECDSA""?
- ""selective"" => ""selectively""
""requesting-to-responding""
""opposit"" => ""opposite""
Unfortunately messages cannot be ""responded"" in English.
Would this sentence below correctly capture what you mean?

An <code>auth</code> message request must be replied to with an identical <code>auth</code> message.
Should ""encryption/connection"" be ""encrypted connection""?
Suggestions for first sentence:
Encrypting peer traffic will make analysis and specific user targeting much more difficult than it currently is.
Suggestion for first sentence:
The Bitcoin network does not encrypt communication between peers today.  This opens up security issues (eg: traffic manipulation by others) and allows for mass surveillance / analysis of bitcoin users.
Both sides must also calculate the 256bit session-id using <code>HMAC_SHA256(key=ecdh_secret,msg=""session id"")</code>.
Seems the second ""C"" in ""ChaCha"" is normally capitalized, so I'd suggest writing as ""ChaCha20-Poly1305"" here and below.
- http://cr.yp.to/chacha/chacha-20080128.pdf
- https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant
- https://tools.ietf.org/html/draft-ietf-tls-chacha20-poly1305-04
""Responding peers must ignore the requesting peer after an unsuccessful authentication attempt to avoid resource attacks...""
Seems ""MUL"" here means ""MULTIPLIED BY""?
Might consider using `×` symbol or `*` multiplication operator. 
Needs apostrophe:
...and the remote peer's public key.
Suggestion:
This BIP describes a secure authentication protocol for use between peers within the Bitcoin network.
Nit: Can we add a space after each comma?
encryption, filtering, fee-estimation
"
dooglus,381,Proposed BIP modification,Update bip-0112.mediawiki,closed,2016-05-10 20:24:01,"CHECKLOCKTIMEVERIFY is absolute (not relative) isn't it?
",https://github.com/bitcoin/bips/pull/381,['bip-0112.mediawiki'],2016-05-10T20:24:01Z,,"['btcdrak', 'kanzure']","ACK bffcc0c29a25e3fcbf92ee15fa6f23fe53a7c469, my understanding is that OP_CHECKSEQUENCEVERIFY is relative (a.k.a OP_RELATIVECHECKLOCKTIMEVERIFY). Another interesting way to verify this is https://github.com/ElementsProject/lightning/blob/f4e94147a7281ec05e078ff9f3e6d65893417bad/bitcoin/script.c#L377
This is the second time this has come up so maybe it's worth addressing. That's it's an absolute timelock cannot be misunderstood because that's what the opcode does, but I would prefer to notate it as something like `<now + 24h>` similar to how it's notated in BIP65.
@btcdrak Using `<now + 24h>` is clear enough. Using a literal `""24h""` is simply confusing, especially when the two HTLC commitment examples use different string literals as they currently do:

> With CHECKSEQUENCEVERIFY, a HTLC payable to Alice might look like the following in Alice's commitment transaction:
> `""24h"" CHECKLOCKTIMEVERIFY DROP`
> and correspondingly in Bob's commitment transaction:
> `""2015/10/20 10:33"" CHECKLOCKTIMEVERIFY`
@dooglus Please make the change then I can ack it.
How would you like the change?

There are currently three examples of `CHECKLOCKTIMEVERIFY` in the BIP:

> ```
>     `""2015/12/15"" CHECKLOCKTIMEVERIFY DROP`
> 
>        `""24h"" CHECKLOCKTIMEVERIFY DROP`
> 
>   `""2015/10/20 10:33"" CHECKLOCKTIMEVERIFY`
> ```

Do you want them all to use a relative time offset? Or just the last two? Or do you want the Alice and Bob commitments, which are pretty much symmetrical, to use different types of offset, one relative and one absolute?

I'm not understanding your motivation for wanting any of them to be relative to `now` when the opcode itself uses an absolute time, and so it's hard to know exactly what kind of a change you would be willing to accept.
@dooglus Yes you are right. OK as is.

ACK bffcc0c
ping @luke-jr please can you merge this.
",
jl2012,384,,BIP141: BIP9 parameters for testnet,closed,2016-05-07 03:29:22,,https://github.com/bitcoin/bips/pull/384,['bip-0141.mediawiki'],2016-05-07T03:29:22Z,,,,
jl2012,378,,BIP141 clarifications and formatting,closed,2016-05-01 18:11:02,"Add rationale of block cost
Change the name of ""witness nonce"" to ""witness reserved value""
Update link to reference implementation
Formatting
",https://github.com/bitcoin/bips/pull/378,['bip-0141.mediawiki'],2016-05-01T18:11:02Z,,,,
dooglus,382,,Update bip-0068.mediawiki,closed,2016-05-01 18:10:25,"Fix typo.
",https://github.com/bitcoin/bips/pull/382,['bip-0068.mediawiki'],2016-05-01T18:10:25Z,,"['btcdrak', 'kinoshitajona', 'kanzure']","ACK 56cd35957f9c0b7c8cf0e8782a229322e4b54ca0
ACK 56cd35957f9c0b7c8cf0e8782a229322e4b54ca0
ACK 56cd359
",
achow101,380,,Update BIP 144 'havewitness' to service bit,closed,2016-04-29 04:54:56,"As per the meeting: http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-04-28-19.00.html

Updates BIP 144 to specify the use of the NODE_WTINESS service bit instead of a havewitness message.
",https://github.com/bitcoin/bips/pull/380,['bip-0144.mediawiki'],2016-04-29T04:54:56Z,,"['andre-amorim', 'CodeShark']","why he is trying to do that ? what for ? I'm here busy trying to read a
paper ...

  and on making the transition to computing centered on parallelism._/
development focused on improvements and innovations in parallel processing,
  nation place a much greater emphasis on IT and computer-science research
and /_Committee on Sustaining Growth in Computing Performance recommends
that our }»_J¥PS

On 28 April 2016 at 22:51, Andrew C notifications@github.com wrote:

> As per the meeting:
> http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-04-28-19.00.html
> 
> Updates BIP 144 to specify the use of the NODE_WTINESS service bit instead
> 
> ## of a havewitness message.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/bitcoin/bips/pull/380
> Commit Summary
> - Update to NODE_WITNESS service bit
> 
> File Changes
> - _M_ bip-0144.mediawiki
>   https://github.com/bitcoin/bips/pull/380/files#diff-0 (7)
> 
> Patch Links:
> - https://github.com/bitcoin/bips/pull/380.patch
> - https://github.com/bitcoin/bips/pull/380.diff
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/380
ACK
",
justusranvier,377,,BIP-0047: version 2 payment codes,closed,2016-04-26 00:00:18,"Define a bloom filter-based notification method that does not use notification addresses.
",https://github.com/bitcoin/bips/pull/377,['bip-0047.mediawiki'],2016-04-26T00:00:18Z,,"['dabura667', 'luke-jr']","Isn't raw multisig no longer standard?
BIP 11 doesn't seem to be going anywhere. If you mean Bitcoin Core's default policies, those really shouldn't influence BIPs.
",
jl2012,376,,BIP141: Add P2SH-P2WPKH example and clarify block cost,closed,2016-04-23 20:02:00,,https://github.com/bitcoin/bips/pull/376,['bip-0141.mediawiki'],2016-04-23T20:02:00Z,,,,
voisine,375,,fix BIP141 nested P2SH scriptSig byte representation,closed,2016-04-23 03:33:13,"The byte representation of ""<0 <32-byte-hash>>"" is ""0x220020{32-byte-hash}""

What was listed here would be the byte representation of ""0 <32-byte-hash>"". The text explains that there is only one item in scriptSig, so I'm guessing the byte representation is wrong. Also the corrected byte representation would produce the same sig/pubkey described in P2WSH after following the bip16 rules.
",https://github.com/bitcoin/bips/pull/375,['bip-0141.mediawiki'],2016-04-23T03:33:13Z,,['jl2012'],"Thanks. ACK
",
kanzure,374,,BIP143: Explicitly mention the SignatureHash function,closed,2016-04-20 19:41:40,"The purpose of BIP143 is to propose an updated SignatureHash function. However, the only keyword reference in the BIP text is ""sighash"" buried near the end, meanwhile some of the existing source code floating around does not use the name ""transaction digest algorithm"". Hopefully over time this will change. On a related note, SignatureHash is a really bizarre name....
",https://github.com/bitcoin/bips/pull/374,['bip-0143.mediawiki'],2016-04-20T19:41:40Z,,"['sipa', 'jl2012']","ACK
@kanzure Do you mind explaining what's bizarre about SignatureHash? It
doesn't really matter, as it's just the name of the function, but I'd like
to know what made you say that.
@sipa, it's not a signature and it's not a hash of the signature, couldn't possibly be a hash of the signature because the signature is made once signing the output of the function anyway.
@kanzure It's the hash being signed.
",
kanzure,373,,"BIP143: fix typo (""including"")",closed,2016-04-20 19:41:23,"Minor typo fix for BIP143, ""inculding"" -> ""including"".
",https://github.com/bitcoin/bips/pull/373,['bip-0143.mediawiki'],2016-04-20T19:41:23Z,,['jl2012'],"ACK
",
jl2012,372,Proposed BIP modification,BIP143 clarifying semantics of ACP|SINGLE,closed,2016-04-20 19:40:42,"This PR clarifies the semantics change when ANYONECANPAY is used with SINGLE, with other minor clarifications
",https://github.com/bitcoin/bips/pull/372,['bip-0143.mediawiki'],2016-04-20T19:40:42Z,,"['NicolasDorier', 'sipa', 'MarcoFalke', 'btcdrak', 'luke-jr']","@sipa 
ACK for me except a nit that might be a english mistake on my part:

> ""does not commit --to-- the input index""

I would say

> ""does not commit the input index""
@NicolasDorier fixed. Thanks
","...
I dont see it?
@luke-jr I think there was a hidden character but this PR removes it. Isn't it?
commit _to_ the amount being spent
https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
@MarcoFalke I think there was a BOM before, not now
revised and squashed 
"
justusranvier,371,,BIP-0047: Clarify usage and format of outpoints,closed,2016-04-17 22:17:57,"Introduce the terms 'designated input' and 'designated pubkey' for clarity

Update reference link for outpoint to a more canonical source to resolve ambiguity regarding the binary representation of txids.

Based on feedback from @SamouraiDev 
",https://github.com/bitcoin/bips/pull/371,['bip-0047.mediawiki'],2016-04-17T22:17:57Z,,['andre-amorim'],"I only accept Luke input at transistor level if he talk to me as electronic
engineer

On 17 April 2016 at 23:18, Luke-Jr notifications@github.com wrote:

> Merged #371 https://github.com/bitcoin/bips/pull/371.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/371#event-630546583
",
instagibbs,369,,Some clarification on path meaning and structure,closed,2016-04-14 10:38:10,,https://github.com/bitcoin/bips/pull/369,['bip-0114.mediawiki'],2016-04-14T10:38:10Z,,['jl2012'],"Thanks, ACK
",
jl2012,370,,BIP114: Clarifying reference implementation,closed,2016-04-14 10:37:54,,https://github.com/bitcoin/bips/pull/370,['bip-0114.mediawiki'],2016-04-14T10:37:54Z,,,,
jl2012,368,New BIP,BIP 114: Merkelized Abstract Syntax Tree,closed,2016-04-12 20:20:56,"This is a post-segwit BIP to implement Merkelized Abstract Syntax Tree
",https://github.com/bitcoin/bips/pull/368,['bip-mast.mediawiki'],2016-04-12T20:20:56Z,,,,
jl2012,367,,BIP141: commitment clarification. BIP144: new diagram,closed,2016-04-08 22:03:25,"@sipa @CodeShark 
BIP141: witness commitment is optional if the block has no witness data
BIP144: new diagram without spelling check lines
",https://github.com/bitcoin/bips/pull/367,"['bip-0141.mediawiki', 'bip-0144/witnesstx.png']",2016-04-08T22:03:25Z,,['sipa'],"In the diagram, for wxtid, flags will always be 0x01 (unless all witnesses are empty, in which case wtxid = txid).
revised.
it is mentioned in the text that wtxid = txid if witnesses are empty
ACK
",
btcdrak,366,Proposed BIP modification,"Clarify what remains ""to be decided""",closed,2016-03-31 19:23:30,"This is the result of feedback from the general public.

Basically we know we're using BIP9 deployment, but we haven't decided on the deployment variables `starttime`, `timeout`, and `bit`. I'm providing a template here so we can file them out once known.
",https://github.com/bitcoin/bips/pull/366,['bip-0141.mediawiki'],2016-03-31T19:23:30Z,,"['sipa', 'luke-jr', 'jl2012']","@CodeShark @jl2012 @sipa
ACK
ACK
",
jl2012,364,,BIP143: Provide private key used in the example,closed,2016-03-28 21:24:30,,https://github.com/bitcoin/bips/pull/364,['bip-0143.mediawiki'],2016-03-28T21:24:30Z,,,,
CodeShark,363,,Witness validation logic trigger clarifications,closed,2016-03-28 21:24:18,,https://github.com/bitcoin/bips/pull/363,['bip-0141.mediawiki'],2016-03-28T21:24:18Z,,['sipa'],"ACK
",
luke-jr,360,,Defer BIP 2,closed,2016-03-28 21:23:35,"Apparently this cannot achieve consensus for now, so shelving it until something changes.
",https://github.com/bitcoin/bips/pull/360,"['README.mediawiki', 'bip-0002.mediawiki']",2016-03-28T21:23:35Z,,,,
btcdrak,361,,Remove deployment section,closed,2016-03-21 17:23:05,"Now we know we will use BIP9 version bits, remove references to ISM() and leave TDB
as was done with BIP68,112 and 113.
",https://github.com/bitcoin/bips/pull/361,['bip-0141.mediawiki'],2016-03-21T17:23:05Z,,['CodeShark'],"ACK
",
btcdrak,359,Proposed BIP modification,"Set deployment schedule for BIP 68,112,113",closed,2016-03-18 19:20:00,,https://github.com/bitcoin/bips/pull/359,"['bip-0068.mediawiki', 'bip-0112.mediawiki', 'bip-0113.mediawiki']",2016-03-18T19:20:00Z,,"['morcos', 'afk11', 'luke-jr']","ACK modulo nit on deployment wording in all 3 BIPs (just commented on the first one)
@morcos nit fixed.
Note that ACK/NACK here is a strict boolean, and relevant only from the BIP(s) Authors.

In this case, since btcdrak is listed for 112 and 113, this just needs an ACK from either @maaku or @afk11 
ACK @ 63660c0
","""This BIP will be deployed simultaneously...""
"
techguy613,357,New BIP,BIP 75: Out of Band Address Exchange using Payment Protocol Encryption,closed,2016-03-17 05:40:17,"Pull request for BIP75 as discussed on the mailing list
",https://github.com/bitcoin/bips/pull/357,"['README.mediawiki', 'bip-0070/extensions.mediawiki', 'bip-0075.mediawiki', 'bip-0075/bip70-extension.png', 'bip-0075/encrypted-invoice-request-process.png', 'bip-0075/invoice-request-process.png', 'bip-0075/mobile-sf-encrypted-ir-without-payment.png', 'bip-0075/mobile-sf-ir-with-payment.png', 'bip-0075/mobile-sf-ir-without-payment.png', 'bip-0075/paymentrequest.proto']",2016-03-17T05:40:17Z,,"['jmacwhyte', 'luke-jr']","Fixed the header and committed to our branch.
Hey @luke-jr, I'm not sure what's causing this git issue exactly. Per http://stackoverflow.com/questions/13480346/git-commits-left-behind-when-switching-back-to-a-branch-from-detached-head, this is a bug that was fixed in Git v1.7.11.5 and per Travis CI, their VM are using Git 1.8. Have you seen this before?
The git message isn't an issue, it's normal. The issue was that you had BIP 75 _after_ BIP 8x in the README, and didn't use the comma-only formatting for the author list there. I fixed those for you and merged it.
Thanks @luke-jr!
Thanks @luke-jr!
","Please don't add spaces to align the headers (leave the authors list as-is).
"
jl2012,355,,BIP142: Deferred,closed,2016-03-16 18:22:52,"BIP142 will not be deployed with BIP141 at the same time. Initially, people are expected to use P2SH segwit, or payment protocol for native segwit
",https://github.com/bitcoin/bips/pull/355,"['README.mediawiki', 'bip-0142.mediawiki']",2016-03-16T18:22:52Z,,"['btcdrak', 'sipa']","@jl2012 Can I suggest instead you add a ""deployment"" section with the text ""This BIP must only be deployed after BIP141 has been activated"".
@btcdrak The assumption is that it will be substantially revised before that time.
",
sipa,354,,Small improvements to BIP9,closed,2016-03-15 19:04:40,"Suggested by @rustyrussell and @morcos.
",https://github.com/bitcoin/bips/pull/354,['bip-0009.mediawiki'],2016-03-15T19:04:40Z,,"['btcdrak', 'rustyrussell']","ACK
Ack!  Nice work; it seems like it's clear enough that nobody will get it wrong, but maybe I'm an optimist :)
",
dangershony,351,Proposed BIP modification,Crypzo has changed name to CoinVault,closed,2016-03-15 07:10:19,"The original link was broken use http://www.crypzo.com to get the redirect
",https://github.com/bitcoin/bips/pull/351,['bip-0044.mediawiki'],2016-03-15T07:10:19Z,,"['prusnak', 'luke-jr']","@slush0 @prusnak 
ack
",
priestc,353,,Added paragraph about address re-use for BIP131,closed,2016-03-15 06:34:42,"So many people are saying this BIP is bad because it encourages address re-use. I added a paragraph clarifying how address re-use is affected by this BIP.
",https://github.com/bitcoin/bips/pull/353,['bip-0131.mediawiki'],2016-03-15T06:34:42Z,,"['sipa', 'luke-jr', 'MarcoFalke']","As others have elaborated on, this change is wrong, but GitHub isn't the place to discuss it.
","> it is impossible to know which output is a recipient

This is not true.
That's not the primary reason to discourage it, as it's only a theoretical concern. The most important argument against is the same as what you list above: it hurts your own privacy (as now people who send to your will learn something about your incoming funds from others), and by extension, hurts the privacy of everyone interacting with you by enabling more analysis of linkage.
If somebody wants to give up some privacy for a massive decrease in transaction fees, then they should be able to do that. There are many many addresses that have multiple unspent outputs associated with them on the network today, proving that the decrease in privacy is acceptable to many people.

Technically, when you are going through the checkout at Walmart, you can look in to the cash register and get as much information as you would if you looked through someone's bitcoin history through a blockexplorer. Neither Walmart nor any other retailer finds it necessary to keep a privacy guard over the cash register. As long as you rotate your address every so often, its going to take a lot of work to figure out someone's complete financial story by through a block explorer.

By the way, if **I** re-use my address, that has no effect on anyone but myself. Other people are not affected at all.
> By the way, if I re-use my address, that has no effect on anyone but myself. Other people are not affected at all.

I disagree with that statement. If you, and you alone, are reusing your address, it already simplifies linking other people's addresses together. Due to Bitcoin's lack of full anonymity, privacy provided by the system is a public good, that must be treasured by everyone equally to be preserved.

> If somebody wants to give up some privacy for a massive decrease in transaction fees, then they should be able to do that. 

As a result, I disagree with that as well. We should aim for a design that does not allow one person to get a monetary benefit from hurting the privacy of others in the system.
> You, and you alone, reusing your address simplifies linking other people's addresses together.

If the senders of those transactions were using wallets that generate new addresses for each change output (which I refer to as ""non re-use by the sender"" in the PR), then their privacy is still preserved, no matter what. Yes, there is a link, but the link is meaningless. When doing analysis, you can't be sure that any output goes to the original owner, or to another recipient. The best you an do is determine a probability that one address is connected to another. If the sender _does_ re-use addresses for the change output, then it is a 100% probability that the addresses are linked.

> As a result, I disagree with that as well. We should aim for a design that does not allow one person to get a monetary benefit from hurting the privacy of others in the system.

Nobody's privacy is being hurt anywhere by enabling wildcard inputs.
"
MarcoFalke,334,Proposed BIP modification,[BIP 2] License header in preamble,closed,2016-03-08 18:13:27,,https://github.com/bitcoin/bips/pull/334,['bip-0002.mediawiki'],2016-03-08T18:13:27Z,,"['harding', 'luke-jr']","Would be nice to use an existing abbreviation list. Maybe [Gentoo's](https://gitweb.gentoo.org/repo/gentoo.git/tree/licenses)?

Also, it's not clear how one might specify needing two different licenses, such as when example code is not under the same licenses as the BIP text.

(and I'd prefer to disallow PD in new BIPs...)
@luke-jr do you have a write-up or link to why you'd like to disallow PD in future BIPs?  Using PD is my  preference for my own self-published documentation, but I'm interested in learning why you think it's a bad idea.
@harding Releasing into PD is not a legally valid action in some jurisdictions.
@luke-jr ah, fair point.  How do you feel about near alternatives like [CC0](https://creativecommons.org/publicdomain/zero/1.0/legalcode) that put the doc in PD if possible but have a unlimited-use copyright fallback when that isn't an option?
@harding CC0 is already on the list...
@luke-jr ah, sorry.  I overlooked that.  Anyway, concept ACK on not using PD for future BIPs as long as CC0 or similar public-domain-or-backup options are available.
@MarcoFalke ping?
Sorry, was busy last week. Will try to get back to this within some days.
> Would be nice to use an existing abbreviation list. Maybe Gentoo's?

I could not find GNU-ALL-PERMISSIVE so I will just leave it as is.

> Also, it's not clear how one might specify needing two different licenses, such as when example code is not under the same licenses as the BIP text.

Added a commit to address this concern.

> (and I'd prefer to disallow PD in new BIPs...)

It is already in the ""not recommended"" section but you can't forbid someone using it. Also we need the abbreviation to apply it to the other bips (grandfather policy).
Can't we forbid PD moving forward? It's essentially the same as no license at all in some places... (but yes, I agree we need an abbreviation for grandfathered-in stuff.)
Where are the abbreviations from?
> Where are the abbreviations from?

I have tried to stick to what their respective link says, or what appears to be commonly used. You are welcome to replace them with the Gentoo abbreviations but I don't think this is important as long as it is understandable/not misleading and unique.
","I don't think we should start defining ordering of headers here.

Also, it is undefined how to interpret multiple licenses (OR vs AND; probably want OR).
There is a strict order defined in https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki#bip-header-preamble so let's jut keep a strict order.
"
kanzure,331,Proposed BIP modification,BIP1: Formatfix for auxiliary files section and a small typofix,closed,2016-03-08 17:24:35,"This pull request contains two trivial changes for BIP1:
- Formatfix the ""auxiliary files"" section, and also consolidating the sentence about images into the section about auxiliary files.
- Typofix ""sumission"" -> ""submission"" in the changelog section.

and two less-than-trivial changes:
- Make ""BIP Header Preamble"" a subsection of ""BIP Formats and Templates"".
- Make ""auxiliary files"" a subsection of ""BIP Formats and Templates"".
",https://github.com/bitcoin/bips/pull/331,['bip-0001.mediawiki'],2016-03-08T17:24:35Z,,['btcdrak'],"ACK
",
jonathancross,349,Proposed BIP modification,Small typo in bip-0009.mediawiki,closed,2016-03-07 17:36:20,,https://github.com/bitcoin/bips/pull/349,['bip-0009.mediawiki'],2016-03-07T17:36:20Z,,"['sipa', 'petertodd', 'luke-jr']","@sipa @petertodd @gmaxwell @rustyrussell 
ACK
ACK
",
MarcoFalke,348,Proposed BIP modification,[Bip 133] Fix typos,closed,2016-03-07 16:06:52,"@morcos 
",https://github.com/bitcoin/bips/pull/348,['bip-0133.mediawiki'],2016-03-07T16:06:52Z,,"['morcos', 'luke-jr']","ACK other than preference for leaving it as nofeefilter
(Considering this as NACK until @morcos unconditional ACKs.)
@MarcoFalke oops.

ACK
","heh, i like ""-nofeefilter"" better!  in fact i tried to make the option called ""-nofeefilter"" but it was broken because of the negation logic.
""-no*"" is for backward compatibility, not intended behaviour.

But in any case, I disagree with implementation-specific details being in a BIP like this.
There is another Bitcoin Core specific detail in the section below `disabled by unsetting the ""-feefilter"" option`.

I am happy to change that as well, if @morcos agrees.
That makes sense to me.  Do you agree with just changing it to generic discussion of disabling it or not using it?  I think the fact that it is optional and you should be able to do that is relevant.
I think it is useful to mention that a node does not have to send a `feefilter` msg.
Did you check my most recent commit?
"
sipa,346,,Further tweaks to BIP9,closed,2016-03-02 19:40:29,,https://github.com/bitcoin/bips/pull/346,"['bip-0009.mediawiki', 'bip-0009/states.png']",2016-03-02T19:40:29Z,,,,
sipa,345,,Remove ABANDONED and fix ambiguity,closed,2016-03-02 13:31:58,,https://github.com/bitcoin/bips/pull/345,"['bip-0009.mediawiki', 'bip-0009/states.png']",2016-03-02T13:31:58Z,,"['btcdrak', 'CodeShark', 'dcousens']","ACK
ACK
ACK
",
morcos,343,,Remove BIP68's dependence on this BIP.  Remove deployment details.,closed,2016-03-01 04:17:38,,https://github.com/bitcoin/bips/pull/343,['bip-0113.mediawiki'],2016-03-01T04:17:38Z,,"['btcdrak', 'afk11']","ACK
ACK
",
morcos,342,,Clarify non-dependence on BIP113,closed,2016-03-01 03:35:42,,https://github.com/bitcoin/bips/pull/342,['bip-0068.mediawiki'],2016-03-01T03:35:42Z,,"['btcdrak', 'afk11']","ACK
ACK
",
sipa,344,,Various changes to BIP9,closed,2016-03-01 03:19:22,"- Add start time
- Specify the state transitions less ambiguously.
- Add a state diagram.
",https://github.com/bitcoin/bips/pull/344,"['bip-0009.mediawiki', 'bip-0009/states.png']",2016-03-01T03:19:22Z,,"['jtimon', 'CodeShark', 'sdaftuar', 'FelixWeis']","@gmaxwell @rustyrussell @CodeShark @petertodd Feel free to comment here
@sipa I have a question about this sentence:

> Having more than 29 available bits for parallel soft forks does not add anything anyway, as the (nVersion >= 3) requirement already makes that impossible.

This statement seems incorrect: couldn't we just use 01 as the first two bits, which would satisfy all prior ISM rollouts while also leaving 30 bits available for parallel softfork deployment?  Am I missing something?
Nice catch. The sentence dates from before the 001 prefix was introduced.
Yeah, that was very confusing. On the other hand, from what I understand there's still only 29 bits available since the first bit (aka hardfork bit) is still invalid and the other zero in the prefix is reserved for future use.
Also, I insist the threshold is per-chain while the start time, bit and time out are per-deployment.
@sipa this is what you have implemented. I challenge you to implement a per-deployment threshold without completely breaking the warning check.  
@sipa I gave it a once over and I really like what you did.
really like the proposal. Maybe just make it a little more clear how/if a bit becomes available again once it reached one of the final stages.
","why this additional state? isn't enough that it fails that it also has to be abandoned?
I think having a retargeting period where the bit cannot be reused is a good idea. Having an extra state can force this.
"
CodeShark,219,Proposed BIP modification,Added clarifications to BIP0009.,closed,2016-03-01 00:25:30,"I added explicit parameters for deployment at the beginning of the specification. I think this greatly clarifies the spec for someone approaching it for the first time.

We've decided for now not to consensus-enforce the bit states, making the RFC language that had been previously proposed a bit superfluous. The only thing that remains consensus-enforced is the moment of activation which should be clear from context.
",https://github.com/bitcoin/bips/pull/219,['bip-0009.mediawiki'],2016-03-01T00:25:30Z,,"['andre-amorim', 'btcdrak', 'rustyrussell', 'morcos', 'jtimon', 'NicolasDorier', 'sipa', 'luke-jr']","ACK
Probably it should be clarified that even the strongest ""rules"" here are ultimately up to the softforking BIP, and can in theory be overridden?
I removed the RFC language for now but kept in the parameters at the beginning of the specification, which IMO was the more important change I had made.
your money means nothing for bitcoin XT

On 19 October 2015 at 04:16, Eric Lombrozo notifications@github.com wrote:

> I removed the RFC language for now but kept in the parameters at the
> beginning of the specification, which IMO was the more important change I
> had made.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/219#issuecomment-149085789.
I like the idea of retaining the flexibility to specify a different threshold for each fork or to change it for all forks in the future. The way I see it, the thresholds used for mainnet and testnet are recommendations.
Eric Lombrozo notifications@github.com writes:

> I like the idea of retaining the flexibility to specify a different threshold for each fork or to change it for all forks in the future. The way I see it, the thresholds used for mainnet and testnet are recommendations.

Sure, you could do that but you'll break everyone's warning system.
And it's hard enough to propose a good soft fork without worrying about
even more parameters.

Cheers,
Rusty.
I'm not saying we should be changing these parameters arbitrarily on an ad hoc basis - I just think the flexibility costs nothing and it makes the spec more clear...and the BIP document even talks about potentially modifying thresholds in the future, so might as well have that flexibility from the beginning.
Eric Lombrozo notifications@github.com writes:

> I'm not saying we should be changing these parameters arbitrarily on an ad hoc basis - I just think the flexibility costs nothing and it makes the spec more clear...and the BIP document even talks about potentially modifying thresholds in the future, so might as well have that flexibility from the beginning.

I don't understand?

It's just a document, you can take or leave it.  It does describe some
of the considerations if you decide to do something different.

But the way these things actually work is:

1) Grumpy engineer who has better things to do gets referred to document
   as another hurdle they have to jump before finishing what they're
   trying to do.
2) They skim the document to see if they have to bother.
3) If it clearly, says they have to they read the minimum amout to see
   what they need.

So, yeah, the default language says ""DO THIS. THEN THIS.  THEN THIS.
DONE"".  Because I guarantee that nobody will read the rest of it.

Cheers,
Rusty.
@btcdrak This needs an ACK from at least one of @sipa @petertodd @gmaxwell @rustyrussell to be merged.
NAK, seems controversial (the consensus logic affected by a start date).
@sipa I thought we agreed that a start time is needed. How do you propose we accomplish this, then?
See @rustyrussell's comment and the discussion above.
@sipa regardless, the thrust of this PR was actually adding the deployment parameters to the top of the spec in an easy-to-reference list. I removed the start time, then readded it after talking to you about it and you agreeing it was necessary.

I'll get rid of the start time, if nobody wants it.
I'm not the only one to decide that (anymore).
Can we at least merge this for now pending resolution of the controversy?
Ack.  Specifying the parameters up front is nice (though in practice the BIP recommends specific threshold and timeout values).
@sipa Do you still NACK this, or can it be merged?
ACK
@rustyrussell Regarding the previous point brought up in this PR, I'd very much like to argue in favor of a start date regardless that is part of the BIP9 consensus logic. The reason is that:
- Experience has shown that some miners and other nodes do in fact run pre-release code, and this does cause problems.
- The suggestion of not setting a bit until a certain date leads to ambiguous behaviour (for example, the warning logic would need to be more complicated and take bits that you wouldn't set yourself into account).
- Using a start and end date is a much cleaner way of avoiding bits that depend on each other than defining them recursively (if that's ever needed).
Mhmm, I thought that we wanted a star time per deployment, but not a different activation threshold per development (the bip implicitly states that there's at least one per chain, by specifying testnet's threshold).
Pieter Wuille notifications@github.com writes:

> @rustyrussell Regarding the previous point brought up in this PR, I'd
> very much like to argue in favor of a start date regardless that is
> part of the BIP9 consensus logic. The reason is that:
> - Experience has shown that some miners and other nodes do in fact run
>   pre-release code, and this does cause problems.

OK, I respectfully disagree, but I'm often wrong :)

> - Using a start and end date is a much cleaner way of avoiding bits that depend on each other than defining them recursively (if that's ever needed).

I look forward to reading your BIP patch which shows BIP authors how to
choose the start date.

Perhaps we should make this the only decision, and make ""end date =
start date + 3 years"" (ie. 94608000 seconds)?  That still gives us
failed softfork every 6 weeks still.

Thanks,
Rusty.
@rustyrussell BIP65 was deployed by 20% of the hash power before the stable release.

I am very much for a start date and I dont think it needs needs to be complicated. The idea is simply to set the start date reasonably to a time after you plan a stable release. 
NACK against automatically setting the end date. That would create a lack of flexibility and for the time being it's clear 3 year expiry is _way_ too long considering all softforks have been enforced in just a few months. Unless mining decentralises a bit I see no reason for it to take longer unless they actually do reject it, in which case a year is probably a good window.

tl;dr, The start and end dates should be configurable per softfork. The way it is implemented in core PR 7575 is ideal.
I slightly prefer having possibility to set startdate and enddate manually.

If I understand @rustyrussell point, this is about not having to think about more parameters during the soft fork creation. But even if there was no startdate to configure programmatically in BIP9, the startdate will need to be debated anyway by deciding when the soft fork will be merged.

At the end of the day, I don't think this matter a lot.
฿tcDrak notifications@github.com writes:

> @rustyrussell BIP65 was deployed by 20% of the hash power before the stable release.

I know; and that's a long way from 95%.  But I've already conceded the
start date.

> I am very much for a start date and I dont think it needs needs to be complicated. The idea is simply to set the start date reasonably to a time after you plan a stable release. 

As a BIP author, this means I need to know when it's likely to be
merged, and what the release cycle timing will be.  So some advice about
how to select this would be nice.  Perhaps suggest aiming for 3 months
after an expected production release?

> NACK against automatically setting the end date. That would create a lack of flexibility and for the time being it's clear 3 year expiry is _way_ too long considering all softforks have been enforced in just a few months. Unless mining decentralises a bit I see no reason for it to take longer unless they actually do reject it, in which case a year is probably a good window.

OK, let's make it a year then, but let's choose something for BIP9.
You could change it for each BIP, just like you could change the
thresholds, but why would one softfork choose 1 year and one choose 3
years?  How would I, as a random BIP author, tell?

We can always have a new BIP which changes that advice if necessary, but
I feel that punting to each BIP author is reneging on our
responsibilities.

Cheers,
Rusty.
@rustyrussell I agree BIP9 could recommend some sane defaults. In any case, each softfork BIP already must specify the exact deployment details, for example which bit they intend to use. A typical deployment section for a BIP9 deployment might say ""This will be deployed using BIP9 with bit 5 set with a start date of 2016-04-01 00:00:00 and a timeout of 1 year"".

I would also point out that draft softfork BIPs usually have the deployment section blank as ""TBD"" until exact deployment methodology is known (which is the case for the current BIP68,112 and 113). 

Additionally, we've tended to separate the softfork feature patch and the deployment code. In fact sometimes it's even been necessary to release mempool only code first as was the case of BIP113.

How about wording for BIP9 something to the effect of:-

""It is recommended that the '''starttime''' be at least 1 month after expected production release of the softfork proposal, with a '''timeout''' of 1 year.""
฿tcDrak notifications@github.com writes:

> How about wording for BIP9 something to the effect of:-
> 
> ""It is recommended that the '''starttime''' be at least 1 month after expected production release of the softfork proposal, with a '''timeout''' of 1 year.""

OK, here's a patch (also available at
https://github.com/rustyrussell/bips/tree/bip9-recommendations ) which
makes the recommendations more explicit.  If people like it after
bikeshedding, I'll open a new PR:

(Moved to a separate section immediately following ==Specification==):

===Selection guidelines===

The following guidelines are suggested for selecting these parameters for a soft fork:

# '''bit''' should be selected such that no two concurrent softforks use the same bit.

# '''starttime''' should be set to some date in the future, approximately one month software release date including the soft fork.  This allows for some release delays, while preventing triggers as a result of parties running pre-release software.

# '''timeout''' should be 1 year (31536000 seconds) after starttime.

A later deployment using the same bit is possible as long as the starttime is after the previous one's
timeout or activation, though it is recommended to have a pause in between to detect buggy software.

Cheers,
Rusty.
Typo: one month software release.

ACK otherwise
I think we should recommend that a previously unused bit is used if available, otherwise it becomes a bit annoying in regtest to figure out how to activate both soft forks.
","s/deploment/deployment/
MUST
I prefer MUST over SHALL.
MUST
This is not a SHOULD.  Try ""Note that the states...""
... and this is not a MAY.  It's a might.
This is not a MAY, it's a might.
""could""?
Is it MUST? I thought we agreed that until activation it was still considered optional or else lock-in itself would be a soft fork.
In the RFC they are synonymous, I have no strong preference either way. MUST is fine.
I'm not so sure this is a MUST. If it is a MUST I think we need to specify for how long they need to cease setting the bit since eventually the bit might get reused at which point the correct behavior for a client unaware of the new rule change is to accept the block but warn the user.
You are absolutely correct - damn search-and-replace :p
I guess the bigger point here is that we need to draw a distinction between behaviors that will result in invalid blocks vs. behaviors that will still produce valid blocks although we discourage them.

Unfortunately, we don't really have a good way to enforce the correct application of rules by miners, so about the best we can hope for right now is to reduce as much as possible any incentives for miners to feed misleading signals and to detect when miners are in fact feeding misleading signals or not enforcing the rules to allow for intervention.
Eric Lombrozo notifications@github.com writes:

> > @@ -120,7 +124,7 @@ adding three to the current calendar year when drafting the soft fork proposal):
> > 
> >  If the soft fork still not ''locked-in'' and the
> >  GetMedianTimePast() of a block following a retarget period is at or
> > -past this timeout, miners should cease setting this bit.
> > +past this timeout, miners SHOULD cease setting this bit.
> 
> I guess the bigger point here is that we need to draw a distinction between behaviors that will result in invalid blocks vs. behaviors that will still produce valid blocks although we discourage them.

Simple rules win.  An implementer reading this doesn't need to know how
bad things will break if they screw up, just what to do.

> Unfortunately, we don't really have a good way to enforce the correct application of rules by miners, so about the best we can hope for right now is to reduce as much as possible any incentives for miners to feed misleading signals and to detect when miners are in fact feeding misleading signals or not enforcing the rules to allow for intervention.

All language is simply words.  We have no enforcement ability :(

As an aside, I feel RFC 2119 reflected a reduction in flexibility and
increase in dogmatism for IETF.  Shouting at people feels wrong, even if
the aim is clarity, and a turn away from the original peer-like humiity
of ""Request For Comments"".

Cheers,
Rusty.
Eric Lombrozo notifications@github.com writes:

> > @@ -55,10 +61,8 @@ visible.
> >      }
> > 
> >  '''Success: Activation Delay'''
> > -The consensus rules related to ''locked-in'' soft fork will be enforced in
> > -the second retarget period; ie. there is a one retarget period in
> > -which the remaining 5% can upgrade.  At the that activation block and
> > -after, miners should stop setting bit B, which may be reused for a different soft fork.
> > +The consensus rules related to ''locked-in'' soft fork will be enforced in the second retarget period; ie. there is a one retarget period in
> > +which the remaining 5% can upgrade.  Upon reaching the end of the period, the soft fork is considered active and miners SHALL enforce the new rules beginning with the next block whose height is divisible by 2016. At this point, miners SHALL stop setting bit B which MAY now be reused for a different soft fork.
> 
> In the RFC they are synonymous, I have no strong preference either way. MUST is fine.

Indeed; if you can stick with the same subset throughout it makes life
easier for the reader.

Thanks,
Rusty.
Eric Lombrozo notifications@github.com writes:

> > @@ -120,7 +124,7 @@ adding three to the current calendar year when drafting the soft fork proposal):
> > 
> >  If the soft fork still not ''locked-in'' and the
> >  GetMedianTimePast() of a block following a retarget period is at or
> > -past this timeout, miners should cease setting this bit.
> > +past this timeout, miners SHOULD cease setting this bit.
> 
> I'm not so sure this is a MUST. If it is a MUST I think we need to specify for how long they need to cease setting the bit since eventually the bit might get reused at which point the correct behavior for a client unaware of the new rule change is to accept the block but warn the user.

Oh, in the theoretical case where we assign the bit to mean something
else back-to-back?

I don't want them to think they don't have to stop!  We can add
""... until reused for another soft fork"" to be clearer?

Cheers,
Rusty.
Eric Lombrozo notifications@github.com writes:

> > ```
> >  if (BState != activated && BState != failed) {
> >      SetBInBlock();
> >  }
> > ```
> > 
> >  '''Success: Lock-in Threshold'''
> > -If bit B is set in 1916 (1512 on testnet) or
> > -more of the 2016 blocks within a retarget period, it is considered
> > -''locked-in''.  Miners should continue setting bit B, so uptake is
> > -visible.
> > +For each retarget interval, the number of blocks in which bit B is set is counted. If bit B is set in at least some threshold number of blocks (1916 on mainnet, 1512 on testnet) of the 2016 blocks within a retarget period, it is considered ''locked-in''. Miners SHOULD continue setting bit B so uptake is visible.
> 
> Is it MUST? I thought we agreed that until activation it was still considered optional or else lock-in itself would be a soft fork.

No, that's enforcement.  Setting the bit is compulsory, and was the
intent of the last BIP change.

Cheers,
Rusty.
"
morcos,341,New BIP,BIP 133: feefilter message,closed,2016-03-01 00:14:34,"133 assigned by @luke-jr 

See mailing list discussion at:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012449.html
",https://github.com/bitcoin/bips/pull/341,"['README.mediawiki', 'bip-0133.mediawiki']",2016-03-01T00:14:34Z,,['luke-jr'],"Needs Copyright section
@luke-jr I added what other BIPs appear to have.  I have no preference so if you'd like other text, just let me know.  But please just give me the exact text, I found BIP 2 too confusing.
That's fine.

But independently from this PR, if BIP 2 is too confusing, please work with me to help clarify it. It's so simple that I have no idea how it can possibly be confused...?
",
ghost,230,Proposed BIP modification,add link to btcsuite implementation of bip 0069,closed,2016-02-24 21:12:36,"Hi, adding a link to recently merged golang implementation of bip 0069.
",https://github.com/bitcoin/bips/pull/230,['bip-0069.mediawiki'],2016-02-24T21:12:36Z,,"['kristovatlas', 'luke-jr']","@kristovatlas This requires your approval. Please either ACK or NACK it.
ACK
",
SamouraiDev,257,Proposed BIP modification,Add link to BIP47 test vectors,closed,2016-02-24 21:11:29,"Results obtained upon implementing BIP47 for Samourai Wallet. Payment codes are calculated assuming v1 specification without use of BitMessage. Also assumes notification transaction from Alice to Bob has been sent.
",https://github.com/bitcoin/bips/pull/257,['bip-0047.mediawiki'],2016-02-24T21:11:29Z,,"['andre-amorim', 'afk11', 'dfkthf125', 'matiu', 'dabura667', 'wizardofozzie', 'jprichardson', 'justusranvier', 'luke-jr']","Hello,

I am trying to very the payment codes using bitcore. For the first, simplest, case:

Master seed: b7b8706d714d9166e66e7ed5b3c61048

Payment code should be: ""PM8TJTLJbPRGxSbc8EJi42Wrr6QbNSaSSVJ5Y3E4pbCYiTHUskHg13935Ubb7q8tx9GVbh2UuRnBc3WSyJHhUrw8KhprKnn9eDznYGieTzFcwQRya4GA""

But this is what I get:

1) Master seed: b7b8706d714d9166e66e7ed5b3c61048

2) Master xpriv: xprv9s21ZrQH143K2oD6EPXhzTGnQ6rcGedZRKc2j46W8FUbx2CrhQXpMWerpMfJjDgtpezs6N15qnrM8CQjma4FRNfK8Ec9yUAF6VFEy6ZZt6c

3) Master xpub xpub661MyMwAqRbcFHHZLR4iMbDWx8h6g7MQnYXdXSW7gb1appY1Ewr4uJyLfe3MrVWAFpBkkbMJD1iFSv2HYV4mMHys3MEmPVg2CRskCw8Pm7M

4) 47'/0'/0' xpriv: xprv9yh5yLTKjyvKEjEAPciUAP8JY4TkB2KdDwqHM5K3FY1i9JjiGknuA6tWV69W3bp9LVUKVYJMPARTfLf5cBhFqmLJuNSFchEz1PjY57siDHY

5) 47'/0'/0' xpub: xpub6CgSNqzDaMUcTDJdVeFUXX5366JEaV3UbAkt9TieosYh274rpJ79huCzLM1oB1t8RKLsuKE5fT5Zqyysi9cJaayC9UX6GNZ31EpoEQJcfrC

 6) 47'/0'/0' xpub relevant data 

> chainCode: '6d22f48b78b68898b5e41df6ff4f800fa03bc7e1beb3d2155c86e2934010c34b',
> publicKey: '025a50e3baddb98f48672f4ad32c7558482a562ed9a26279c9b58a113d5b38f6b0',

7) paymentCode in HEX 0100025a50e3baddb98f48672f4ad32c7558482a562ed9a26279c9b58a113d5b38f6b06d22f48b78b68898b5e41df6ff4f800fa03bc7e1beb3d2155c86e2934010c34b00000000000000000000000000

8) base58check paymentcode:

PM8TJNp5z9XVg3NQzgiBSccj2FUw2EkT4aqsZtAmRioHH31oHvHxCW9fHirkr5rMSHkJVzsNMkBcevfPwJujdep8tqnDuAwsU5aAEuT3cda7m7QyEhwQ
So which is incorrect, @SamouraiDev's test vectors, or bitcore's implementation?
When comparing these two tools:

https://bip32jp.github.io/english/
https://bitcore.io/playground/#/hdkeys

only the first one allows me to enter a seed directly as hex.

When I put in the root xpriv that bip32jp.github.io calculates into bitcore.io, both agree that m/47'/0'/0' is:

`xprv9z4XcXV3eLXcvuA72k9mcMAjFtqYoY8QsFLmc5G9bGnAAwJtr9CuMqME9BsaAhddpBsq2w2Xc6XLWmLG1RHfquXb4dy9yehambtmLT6iJuR`

and

`xpub6D3t231wUi5v9PEa8mgmyV7Tovg3CzrGEUGNQTfm9cK93je3PgX9udfhzUDx29pkeeHQBPpTSHpAxnDgsf2XRbvLrmbCUQybjtHx8SUb3JB`

The issue appears to be a difference between how Bitcore calculates the root node from a seed and how Samourai calculates a root node from a seed.

When I put the hex seed from BIP32 test vector 1 into bip32jp.github.io (https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Test_Vectors), it produces the wrong root xpriv.

test vector: `xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi`

bip32jp.github.io:  `xprv9s21ZrQH143K2XojduRLQnU8D8K59KSBoMuQKGx8dW3NBitFDMkYGiJPwZdanjZonM7eXvcEbxwuGf3RdkCyyXjsbHSkwtLnJcsZ9US42Gd`
It appears that there was some confusion about the use of the 'hex seed' to define the wallet. This is the BIP39 hex seed. The document has been changed to reflect that and the mnemonic codes for each wallet have been provided to avoid any ambiguity.
Witch compiler version ?

On Sat, 5 Dec 2015 19:52 T Dev D notifications@github.com wrote:

> It appears that there was some confusion about the use of the 'hex seed'
> to define the wallet. This is the BIP39 hex seed. The document has been
> changed to reflect that and the mnemonic codes for each wallet have been
> provided to avoid any ambiguity.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/257#issuecomment-162240929.
@SamouraiDev @justusranvier 
Can you tell me, for `HMAC-SHA512(x,o)`, what `o` is, specifically, and whether the donation is indicating `x` and `o` are data and salt, respectively? I can calculate Alice's `S0`, but I'm stuck on this part.
Perhaps clarification in the BIP?
""o"" is the outpoint being spent by the first pubkey-exposing input of the transaction. The inputs sent by Alice must not be associated with her notification address. Basically, they can come from anywhere which is why I didn't include notification transactions in the test vectors. Currently I'm using the bitcoinj serialization of the outpoint hex identifier.
@wizardofozzie A notification transaction must expose a public key in its input scripts, so the recipient can perform an ECDH calculation. By BIP47 protocol, the recipient looks at the first exposed pubkey for by checking appropriate script types in the inputs. (we should probably enumerate those in BIP47).

If we only used the ECDH secret to blind the payment code in the notification transaction, there's a possibility that somebody might make a client that re-uses a public key. (if the first input for two notification transactions spends funds from the same address) and use the same blinding factor more than once.

To make sure the binding factor is always unique, we take an HMAC that uses the ECDH secret and the outpoint of the input which provides the public key. Since causing an outpoint collision is infeasible, this insures the binding factor is always different, even if a public key is improperly reused.
@SamouraiDev @justusranvier 
Ok, I think I see where the outpoint comes from now. Is that value, `o`, included in the test vectors? Also to clarify, is `o` the outpoint's txid, or are we using the pubkey? If it's the pubkey being used, are we keeping the 02 or 03?

Also, can you please clarify `HMAC-SHA512(x, o)`? Are we concatenating x and o? Or is x the payload, and o is the salt? (ie `o` is like the optional password from BIP39)
@wizardofozzie `o` is the complete output, serialized exactly as it appears in a transaction.

See here for definition: https://bitcoin.org/en/glossary/outpoint

`x` is the shared secret derived as part of the BIP-47 notification procedure.

`HMAC-SHA512(x, o)` notation comes from RFC 2104. (https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Definition_.28from_RFC_2104.29)

Whatever library you use for BIP-32 should also provide HMAC-SHA215.
@SamouraiDev @justusranvier 
Can we have some example TxIDs? The Twitter feed for @SamouraiDev mentions [bad5802e2183be44007b6b94395113d7cb513dbeb68d40245a83f5fadfcc76f3](https://chain.so/tx/BTC/bad5802e2183be44007b6b94395113d7cb513dbeb68d40245a83f5fadfcc76f3). What is this Tx showing?
@justusranvier Fantastic! 
FYI I'm writing a `bip47.py` for [my fork of pybitcointools](https://github.com/wizardofozzie/pybitcointools)
 я в этих таблицах и формулах нечего не понимаю

> Четверг, 17 декабря 2015, 16:29 -08:00 от WizardOfOzzie notifications@github.com:
> 
> @SamouraiDev @justusranvier
> Ok, I think I see where the outpoint comes from now. Is that value, o, included in the test vectors? Also to clarify, is o the outpoint's txid, or are we using the pubkey? If it's the pubkey being used, are we keeping the 02 or 03?
> Also, can you please clarify HMAC-SHA512(x, o)? Are we concatenating x and o? Or is x the payload, and o is the salt? (ie o is like the optional password from BIP39)
> —
> Reply to this email directly or  view it on GitHub .


@wizardofozzie Notifications transactions were not included in the test vectors. Only the calculation of payment addresses was covered. Here is a notification transaction that uses the same Alice & Bob wallets as in the test vectors: https://live.blockcypher.com/btc/tx/9414f1681fb1255bd168a806254321a837008dd4480c02226063183deb100204/
Added BIP32 hex seed values following suggestions by caedes from darkwallet.
@SamouraiDev I _finally_ understand how this works! Genius!
Can I recommend rephrasing phrases such as _""Alice selects the private key corresponding to the first exposed public key, of the first pubkey-exposing input, of the transaction""_. To me, that is downright confusing. Perhaps even:

""Alice selects the private key (`a`) corresponding to the first exposed public key (`A`), of the first P2PKH input, for Alice's transaction (`Atx`)""
@justusranvier ACK/NACK?
Would you embed the test vectors into the actual BIP document as opposed to an external link?
@justusranvier 

> enter a seed directly as hex.

You misunderstand. The site does not say ""enter seed"" but it says ""enter entropy.""

It does not use the hex string you input directly as a seed. It uses the entry as entropy to derive the BIP39 phrase.
@luke-jr 
@jprichardson

I agree with this PR as it stands, and I also agree that merging it into the main text is advisable.

I'd rather see this merged to avoid holding up progress, and then anyone with the cycles/motivation to do the merge into a single document submit that as a separate PR.
",
Sjors,337,Proposed BIP modification,BIP 69: Add link to Blockchain.info implementation,closed,2016-02-24 21:11:00,"We might switch to the BitcoinJS implementation in the future.

cc @kristovatlas
",https://github.com/bitcoin/bips/pull/337,['bip-0069.mediawiki'],2016-02-24T21:11:00Z,,"['kristovatlas', 'luke-jr']","@kristovatlas 
ACK
",
dcousens,309,Proposed BIP modification,Add BIP38 Javascript implementation,closed,2016-02-24 20:35:34,,https://github.com/bitcoin/bips/pull/309,['bip-0038.mediawiki'],2016-02-24T20:35:34Z,,"['luke-jr', 'voisine']","@voisine 
ack... although I'm concerned about security issues with most existing javascript platforms, those concerns are outside the scope of this BIP.
",
btcdrak,333,,Update BIP112 reference example,closed,2016-02-24 05:37:51,,https://github.com/bitcoin/bips/pull/333,['bip-0112.mediawiki'],2016-02-24T05:37:51Z,,,,
dangershony,326,Proposed BIP modification,Adding crypzo to BIP44 supported wallets,closed,2016-02-24 05:08:20,"Some of the source will be released soon.
",https://github.com/bitcoin/bips/pull/326,['bip-0044.mediawiki'],2016-02-24T05:08:20Z,,"['prusnak', 'luke-jr']","@prusnak @slush0 
ACK if there is a sign that this wallet indeed uses BIP44
Fair point, I can't think of any way to proof that (yet).
Two options I'll either expose source code or create a sand box page on the site.
I'll then update the pull request.
Hi @prusnak @luke-jr @slush0 
Please check out this link showing Crypzo support BIP32/BIP44 
https://www.dropbox.com/s/gmxjnwln8ur5ywt/crypzo-bip44-proofe.pdf?dl=0
I'll still be opensourceing some of the code but not quite yet (when it's out of beta).
ACK
Gentle reminder @luke-jr
",
gavinandresen,329,,Withdraw BIP 101 proposal,closed,2016-02-13 04:31:30,"It is clear that BIP101 will not be adopted, so I'm withdrawing it.
",https://github.com/bitcoin/bips/pull/329,"['README.mediawiki', 'bip-0101.mediawiki']",2016-02-13T04:31:30Z,,"['JohnHanks', 'luke-jr']","Please update README.mediawiki with the withdrawn colour:

``` mediawiki
|- style=""background-color: #ffcfcf""
```
AAACCKK
",
btcdrak,327,Proposed BIP modification,Correct typo,closed,2016-02-12 22:33:52,"Bitcoin Core didn't exist until 0.9.
",https://github.com/bitcoin/bips/pull/327,['bip-0050.mediawiki'],2016-02-12T22:33:52Z,,"['gavinandresen', 'petertodd', 'luke-jr']","Yet some distinction seems necessary, since 0.8.0 was not correctly implementing Bitcoin.
-ENOCARE.  Everybody knows what ""Bitcoin Core version 0.8.0"" means.
ACK

Note how under that logic, this could be changed to ""Bitcoin Classic 0.8""...
",
paveljanik,332,Proposed BIP modification,"ISM: Proper case, update PR number",closed,2016-02-12 18:08:07,"Fix IsSuperMajority name, update to reflect new PR number.
",https://github.com/bitcoin/bips/pull/332,['bip-0112.mediawiki'],2016-02-12T18:08:07Z,,['btcdrak'],"ACK
While you are at it can you update the link to the implementation also?
ACK 545017f

Thank you.
",
luke-jr,314,,"Promote Accepted->Final BIPs 11, 14, 21, 22, 23, 31, 32, 34, 35, 37, 65",closed,2016-02-12 07:27:23,"These seem to meet the criteria for Final, and are already Accepted status.
",https://github.com/bitcoin/bips/pull/314,"['README.mediawiki', 'bip-0011.mediawiki', 'bip-0014.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0034.mediawiki', 'bip-0035.mediawiki', 'bip-0037.mediawiki', 'bip-0065.mediawiki']",2016-02-12T07:27:23Z,,"['dcousens', 'MarcoFalke']","ACK
Looks good. Needs rebase.

(Oh, right. You are doing it with the merge.)
(Not going to rebase.)
",
btcdrak,330,,Update BIP68 implementation to match spec,closed,2016-02-12 04:33:26,"Refs bitcoin/bitcoin#7184
",https://github.com/bitcoin/bips/pull/330,['bip-0068.mediawiki'],2016-02-12T04:33:26Z,,,,
gavinandresen,328,New BIP,BIP109:  BIP102 variation for a 2mb block size bump,closed,2016-02-12 00:47:56,"Thanks to @luke-jr for promptly assigning a BIP number.

This was discussed on the bitcoin-dev mailing list, but that discussion went sideways fairly quickly (as do all discussions about hard forks, it seems). It is implemented in Bitcoin Classic.
",https://github.com/bitcoin/bips/pull/328,"['README.mediawiki', 'bip-0109.mediawiki']",2016-02-12T00:47:56Z,,"['btcdrak', 'harding', 'luke-jr']","Fixed the malformed author line.  Removed a troll-ish comment that is not appropriate for the BIPs repository.
@gavinandresen Stop deleting comments you don't like on pull requests. https://archive.is/bP0OG
@luke-jr : I think the force-push-update confused the travis syntax tester doo-hickey.  Let me know if I need to fix something, or if that script needs to be fixed.
@gavinandresen I believe the problem is the README.mediawiki title for the BIP doesn't match the actual BIP Title header.
@btcdrak I agree with @gavinandresen that your comment was not appropriate for the BIPs repository, I don't think he did anything inappropriate by deleting it, and I wouldn't have a problem with him deleting your repost of it in the form of an archive.is link.

This repository exists to provide information to the community about situations that affect multiple implementations.  Anyone who usefully contributes to this body of knowledge is to be thanked, not yelled at for something they previously did or did not do.
@luke-jr that was exactly the problem.  It'd be awesome if the travis failures were a little more user friendly (I'd volunteer to fix, but my Perl is beyond rusty).
@gavinandresen The relevant test in this case is the diff'ing. It looks for inconsistencies in README.mediawiki with the Perl-generated table (which is based on the BIP headers).
","Missing email address should be in the form `name <email@example.com>`
Needs a Copyright section according to BIP1
"
luke-jr,323,Proposed BIP modification,bip-0050: Final update to what actually occurred,closed,2016-02-09 13:08:06,"@gavinandresen This look okay? Particularly note the addition of the public domain release.
",https://github.com/bitcoin/bips/pull/323,['bip-0050.mediawiki'],2016-02-09T13:08:06Z,,"['btcdrak', 'andre-amorim', 'jl2012']","the name bitcoin core did not exist until 0.9
for some reason I'm here thinking about libgcrypt and the comments ""/\* (Do not change these values unless synced with the asm code.)  */"" it's too deep thoughts, it would take me ages to explain. I'm going in quiet mode, until I have a mathematical formula to express thyself better.
","Bitcoin ""Core"" didnt exist until 0.9
"
luke-jr,324,New BIP,BIP 145: getblocktemplate Updates for Segregated Witness,closed,2016-02-09 05:22:23,,https://github.com/bitcoin/bips/pull/324,"['README.mediawiki', 'bip-0145.mediawiki']",2016-02-09T05:22:23Z,,,,
luke-jr,322,enhancement,Travis: Initial formatting tests,closed,2016-02-09 05:18:40,"This needs an admin to actually enable Travis...
",https://github.com/bitcoin/bips/pull/322,"['.travis.yml', 'scripts/buildtable.pl']",2016-02-09T05:18:40Z,,"['laanwj', 'MarcoFalke']","I've enabled travis for this repository
I was planning this as well. Thanks for going forward. Do you think it makes sense to grep for the copyright section as well; Or even add another field for the copyright?
That sounds reasonable to me, especially since it's a common omission.
> Or even add another field for the copyright?

Adding a field in the header would be the cleanest (and machine-readable) solution, imo. But this would require extending BIP 1?
It should be sufficient to add it in BIP 2 IMO.
",
Roasbeef,321,,BIP 68 Nit: fix spelling Contrats -> Contracts,closed,2016-02-08 08:42:25,,https://github.com/bitcoin/bips/pull/321,['bip-0068.mediawiki'],2016-02-08T08:42:25Z,,['btcdrak'],"ACK
",
btcdrak,319,,Minor update of implementation for BIP68,closed,2016-02-04 23:51:03,"This patch syncronised latest implementation
Adds comments, adds assert()
",https://github.com/bitcoin/bips/pull/319,['bip-0068.mediawiki'],2016-02-04T23:51:03Z,,,,
jl2012,318,,BIP34 correction: the height has a sign bit,closed,2016-02-04 23:50:38,"The height has a sign bit so a 3-byte height should last for 150 years instead of 300
",https://github.com/bitcoin/bips/pull/318,['bip-0034.mediawiki'],2016-02-04T23:50:38Z,,['gavinandresen'],"ACK.
",
paoloaga,306,Proposed BIP modification,Added bip39 Italian wordlist,closed,2016-02-03 18:45:56,"Here you can find the proposed Italian wordlist for BIP0039.

Words have been chosen using the following rules:
1. Simple and common italian words.
2. Length between 4 and 8 characters.
3. First 4 letters must be unique between all words.
4. No accents or special characters.
5. No complex verb forms.
6. No plural words.
7. No words that remind negative/sad/bad things.
8. If both female/male words are available, choose male version.
9. No words with double vocals (like: lineetta).
10. No words already used in other languages mnemonic sets.
11. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there must be at least other 3 different letters.
12. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there not must be the same sequence of 3 or more letters.

Rules 11 and 12 prevent the selection words that are not different enough. This makes each word more recognizable among others and less error prone. For example: the wordlist contains ""atono"", then ""atomo"" is rejected, but ""atomico"" is good.

All the words have been manually selected and automatically checked against the rules.

Words have been checked automatically against an italian dictionary and spell-checker and reviewed one by one.
",https://github.com/bitcoin/bips/pull/306,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/italian.txt']",2016-02-03T18:45:56Z,,"['laanwj', 'voisine', 'HostFat', 'Polve', 'luke-jr', 'dcousens']","I apologize for the multiple commits, I tried to squash everything into one but failed (resulting also in 2 closed pull requests). Is it possible to proceed from here?
Sure, doesn't matter how many commits there are. Can you get an ACK from one of the BIP 39 Authors?
@paoloaga is the word list NFKD normalized? (I haven't checked)
@voisine [its](https://github.com/paoloaga/bips/blob/bip0039-italian/bip-0039/italian.txt) not using any non-ascii characters, AFAIK it should be OK 
@voisine yes, all the words are using standard ASCII charset. Chosen words don't have any accent or special char in native language so they don't cause any confusion. They are also different enough so that they can't be misspelled/misunderstood, they are all recognizable from the first 4 characters, there are at least 3 different chars between words, and words that have similar letter patterns have been avoided.
Great work @paoloaga :+1: 
@voisine looks like this word list meets all the requirements; just waiting for your ACK to merge
non-itallian speaking ACK, thanks @paoloaga 
italian speaking ACK
Italian speaking ACK :+1: 
Thanks @dcousens , @voisine , @HostFat , @Polve .
",
prusnak,313,,update location of slip-0044,closed,2016-02-01 19:07:32,,https://github.com/bitcoin/bips/pull/313,['bip-0044.mediawiki'],2016-02-01T19:07:32Z,,['dfkthf125'],,"- [[HTTPS: // GitHub. COM / satoshilabs / скользит / BLOB / мастер / скольжения 0044. MD | SLIP-0044: зарегистрированных типов монет для BIP-0044]
"
toby,312,New BIP,BIP74 Draft,closed,2016-01-29 01:59:02,"PaymentRequests currently support any valid script
serialized in the PaymentDetails protocol buffer.
Zero value outputs are ignored and not included in the
transaction. This means that OP_RETURN scripts are
currently supported but they must have a > zero value,
effectively destroying the value assigned to that output.

This BIP allows zero value PaymentRequest outputs ONLY
if the script is an OP_RETURN.
",https://github.com/bitcoin/bips/pull/312,"['README.mediawiki', 'bip-0074.mediawiki']",2016-01-29T01:59:02Z,,['dabura667'],"This will also help allow websites to exchange payment code notification info.

+1 can't wait for wallets to implement.
",
CodeShark,311,,Updated BIP table,closed,2016-01-29 01:23:24,,https://github.com/bitcoin/bips/pull/311,['bip-0123.mediawiki'],2016-01-29T01:23:24Z,,,,
jl2012,303,,BIP141: Add 520 bytes witness stack limit,closed,2016-01-29 00:03:35,"@sipa
",https://github.com/bitcoin/bips/pull/303,['bip-0141.mediawiki'],2016-01-29T00:03:35Z,,"['sipa', 'andre-amorim', 'NicolasDorier', 'luke-jr']","??? Why a limit?
Why a limit? Because DoS potential. I don't like things that allow
arbitrary size data in consensus code.

Script already can't deal with stack items larger than 73 bytes anyway, and
I don't think we should support more, but with 520 bytes we're certain that
it doesn't remove any former functionality.
The script itself should be longer than 520 bytes or we get the P2SH regression again...
The restriction does not apply to the script itself, only to the input
stack fed to it.
@luke-jr @sipa The script limit for P2WSH is 10000 bytes, right?
@sipa This is unclear, as the witnessScript is popped off the witness stack...
Testing with witnessScript of 10000 and 10001 bytes:
https://www.irccloud.com/pastebin/xAEd96Yk/
https://www.irccloud.com/pastebin/k6yfZjTa/
@jl2012 From left to right top to bottom coordinates of meaning.. is the first link to 10000 and the 10001 to 2nd link ? 
@andre-amorim yes, you can find it by clicking the links
Thanks @jl2012 it's 212k on my lp0, yep I printed it out.
","@luke-jr re: witnessScript size and witness stack size
This seems to leave a valid infinite-sized data?
That's still subject to normal Script validation rules.
I do not understand your response.
This text describes data that goes into the scriptPubKey or the P2SH
redeemscript.

It gets executed as normal when spent (with an empty or redeemscript-only
scriptSig), before witness execution takes place. During that first
execution, it is subject to the normal script evaluation rules, which for
example limit the size of pushes. Thus, it is not unlimited.
Aha, got it.
@sipa, I am talking about the witness stack here, not scriptPubKey nor scriptSig. There is no size limit for the witness stack if the witness program is v1 or above
@luke-jr yes, I think leave a valid infinite-sized data, but v1-v16 witness program is non-standard, so only miners can do it.
Hmm, I suppose as long as the costlimit is in place that isn't too bad.
I would say ""witness redeem"" instead of witnessScript.
WitnessScript are the pushes for a particular input.
"
afk11,300,Proposed BIP modification,"BIP141, fix small typo",closed,2016-01-29 00:01:48,,https://github.com/bitcoin/bips/pull/300,['bip-0141.mediawiki'],2016-01-29T00:01:48Z,,"['luke-jr', 'jl2012']","@CodeShark @jl2012 @sipa
ACK
",
jonathancross,298,Proposed BIP modification,Improvements to BIP 122,closed,2016-01-25 18:08:35,"Grammar, punctuation and labeling improvements meant to clarify the BIP and improve readability.
",https://github.com/bitcoin/bips/pull/298,['bip-0122.mediawiki'],2016-01-25T18:08:35Z,,"['MarcoPon', 'luke-jr']","@MarcoPon 
English isn't my main language, so any improvement in that sense is surely welcome! ACK!
@MarcoPon Happy that I can help in some way.  Thanks for the proposal!
",
jl2012,302,,BIP141 Non-upgraded wallet description,closed,2016-01-25 18:07:57,"Update non-upgraded wallet description; remove BIP142
",https://github.com/bitcoin/bips/pull/302,['bip-0141.mediawiki'],2016-01-25T18:07:57Z,,,,
justusranvier,170,New BIP,BIP 80 & 81: Hierarchies for Voting Pool Deterministic Multisig Wallets,closed,2016-01-24 17:45:39,"Two informational BIPs are submitted for voting pool HD wallets.

This wallet format follows the BIP43 recommendation to use reserved BIP numbers to avoid namespace collisions.

The purpose of the wallet formats is to efficiently implement multisig, FIFO cold storage for bulk bitcoins and for colored bitcoins.
",https://github.com/bitcoin/bips/pull/170,"['README.mediawiki', 'bip-0080.mediawiki', 'bip-0081.mediawiki']",2016-01-24T17:45:39Z,,"['UdjinM6', 'luke-jr', 'gsalgado']","@justusranvier Can you add the Copyright sections?
Since my contract with them is ended, I no longer have access to the Monetas repo from which pull request originated.

If they are not interested in maintaining this BIP, I'll resubmit it from another organization.
@justusranvier If you own copyright to these files (please be sure they aren't considered work-made-for-hire and therefore the company owns them!), just ACKing a specific license/PD here is sufficient and I can add it in the merge...
I'm not sure what their status is, but here's my best guess:

The are for sure a work for hire, but the original version of the documents was released under an AGPL-3 license:

https://github.com/Open-Transactions/rfc/tree/master/bips

The documents in this pull request are derived from that. Monetas probably has the right to release them under any additional license they wish - anyone except them is limited to AGPL-3 terms for derived works.

Since their work on implementing this in btcwallet is still ongoing: https://github.com/btcsuite/btcwallet/pull/345, then probably the best person to ask about the status of these bips is @al-maisan or @gsalgado.
I can add that. Should I also change your email address, @justusranvier, since your @monetas.net one probably no longer works?
I think I can merge this as a Draft, but since BIP 1 does not allow for AGPL, it can't proceed until either the license is changed, or a BIP allowing more licenses becomes active.

How exactly is AGPL intended to be applicable to something like a BIP, btw?
I don't know what was the rationale for using AGPL-3 for those BIPs, but I just spoke to @al-maisan and Monetas is ok with placing them on the public domain, so I've updated the copyright sections to reflect that
","Quote from https://github.com/btcsuite/btcd

> One key difference between btcd and Bitcoin Core is that btcd does NOT include wallet functionality and this was a very intentional design decision.

Should mention https://github.com/btcsuite/btcwallet here instead imo
This reference is wrong (should say ""BIP**80** - ..."") and it's never being used in the text above actually so I guess it should be removed.
Thanks. Fixed this in the most recent commit.
"
fanatid,295,,BIP 141: fix URLs,closed,2016-01-24 17:43:32,,https://github.com/bitcoin/bips/pull/295,['bip-0141.mediawiki'],2016-01-24T17:43:32Z,,"['btcdrak', 'afk11', 'jl2012']","Trivial ACK
ACK
oops....I'm sorry
ACK
",
jl2012,296,,Clarify txid and wtxid,closed,2016-01-24 17:43:15,,https://github.com/bitcoin/bips/pull/296,['bip-0141.mediawiki'],2016-01-24T17:43:15Z,,,,
CodeShark,297,,Script witness encoding.,closed,2016-01-24 17:43:03,,https://github.com/bitcoin/bips/pull/297,['bip-0144.mediawiki'],2016-01-24T17:43:03Z,,,,
afk11,294,,142: typo in References section,closed,2016-01-24 17:41:32,,https://github.com/bitcoin/bips/pull/294,['bip-0142.mediawiki'],2016-01-24T17:41:32Z,,['jl2012'],"ACK, thanks
",
jonasschnelli,290,,Fix little typo in p2wpkh address creation,closed,2016-01-22 05:39:28,"Was stumbling over this while reading the BIP.
",https://github.com/bitcoin/bips/pull/290,['bip-0142.mediawiki'],2016-01-22T05:39:28Z,,"['schildbach', 'jl2012']","See #291 
","programm -> program
Eik. Thanks. Force push fixed.
"
JornC,291,,BIP142 - Typos and grammar,closed,2016-01-22 05:39:27,,https://github.com/bitcoin/bips/pull/291,['bip-0142.mediawiki'],2016-01-22T05:39:27Z,,"['harding', 'jonasschnelli', 'jl2012']","ACK and thanks!
LGTM.
","Technically this is version 0 - not sure what the common nomenclature is here.
You might want to include https://github.com/bitcoin/bips/pull/290 here.
It should be `Using 0x06 as address version, followed by 0x00 as witness program version[...]`
Rebased
It is called version 1 address on the Bitcoin wiki: https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses
"
jl2012,292,,BIP143 example and clarify,closed,2016-01-22 02:26:05,,https://github.com/bitcoin/bips/pull/292,"['bip-0141.mediawiki', 'bip-0142.mediawiki', 'bip-0143.mediawiki', 'bip-0144.mediawiki']",2016-01-22T02:26:05Z,,"['btcdrak', 'CodeShark', 'sipa']","@sipa please review the scriptCode part.

I have doubled checked the example and verified the sigHash
ACK
ACK
","The length is not prepended again.
"
iamsamwood,288,Proposed BIP modification,Adds a missing BIP 141 segwit BIP reference,closed,2016-01-20 16:57:27,"Adding a missing reference to BIP 141 for clarity.
",https://github.com/bitcoin/bips/pull/288,['bip-0144.mediawiki'],2016-01-20T16:57:27Z,,"['sipa', 'luke-jr']","@sipa @CodeShark 
Agree with the change, but that section is soon to be rewritten anyway.
",
jl2012,289,,Tidy up Witness Program section,closed,2016-01-20 16:56:10,"by @instagibbs 
",https://github.com/bitcoin/bips/pull/289,['bip-0141.mediawiki'],2016-01-20T16:56:10Z,,,,
jl2012,286,,"Introducing the term ""witnessscript"" in BIP141",closed,2016-01-19 18:00:49,,https://github.com/bitcoin/bips/pull/286,['bip-0141.mediawiki'],2016-01-19T18:00:49Z,,"['CodeShark', 'dcousens']","ACK
ACK
",
andychase,285,New BIP,BIP 132: Add Committee-based BIP Acceptance Process,closed,2016-01-19 18:00:23,"Previous discussions:
- https://gist.github.com/andychase/dddb83c294295879308b
- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010948.html
- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010914.html

I would like to be assigned a number please! Thanks.
",https://github.com/bitcoin/bips/pull/285,['bip-andychase.mediawiki'],2016-01-19T18:00:23Z,,"['btcdrak', 'luke-jr']","I am tentatively soft-assigning this to BIP 2. Unless someone gives a good reason within the next week why this should not become BIP 2, it will get this assignment.
@andychase The whole concept of ""acceptance by committee"" is wrong and invalidates much of this BIP see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010955.html

tl;dr: The status of a BIP is defined by it's adoption, not by a committee.
@btcdrak Thanks for your continued feedback. Can you send your comment to the mailing list? I'd love for it to see a wider audience.

Furthermore I want to reply but I believe that this forum isn't for conceptional discussions relating to BIPs. I value your thoughts but I want to make I follow the right procedures!
After some thought I'd like to raise an objection to the BIP-2 number assignment. I think BIPS 1-9 should be specifically reserved for a BIPS that proposes to replace BIP-1 in its entirety.

This one is for a specific part of the BIP lifecycle; and will hopefully inspire other ones similar.
","Until this BIP is active, its rules do not apply, so this would be a form of circular reasoning. I like the idea of putting conditions for activation in the BIP text, but I don't think we can just let the author set any conditions they like either...
The idea here is that if the system doesn't even work for itself, it shouldn't activate. Currently the conditions are a bit fuzzy with some flaws, so I'd like to narrow those down before changing the BIP from being a draft and making it eligible for succeeding by its own rules.
Ok, so these are _additional_ conditions? Can you clarify this in the draft?
"
schildbach,287,,Fix typo in proposed BIP144.,closed,2016-01-19 17:48:46,,https://github.com/bitcoin/bips/pull/287,['bip-0144.mediawiki'],2016-01-19T17:48:46Z,,['CodeShark'],"ACK
",
jgarzik,262,Proposed BIP modification,BIP 102: update to match implementation,closed,2016-01-19 07:24:22,"Contains latest ISM changes.
",https://github.com/bitcoin/bips/pull/262,['bip-0102.mediawiki'],2016-01-19T07:24:22Z,,"['btcdrak', 'jameshilliard', 'luke-jr', 'MarcoFalke']","Strong NAK. This is a fundamental change to a long standing BIP proposal. BIP102 is titled ""Block size increase to 2MB"", and this PR changes it to a never ending blocksize increase. Allowing such a radical change would be confusing to people who has already backed BIP102. There should be a separate BIP proposal.

The change to the deployment methodology alone is fine.
This is still Draft, so technically @jgarzik should be able to make any changes he wants, but I agree with the general sentiment here and strongly encourage not changing the BIP in such a very significant manner considering real-world use of the ""BIP 102"" concept in discussion.
The difficulty is that ""BIP102"" has been is already widely understood as a flat 2MB increase and has had a concrete PR open for several months. This change is a bit like tacking on defence spending onto a well oiled healthcare bill.
NACK major changes like this should use a different BIP number, this will cause major confusion in regards to statements people have made in support of a particular proposal or against a proposal. For example the BIP100 tagging by miners was in support of the original draft proposal but NOT the subsequent changes made afterwards which made significant modifications to the cap decrease threshold in addition to the removal of the 32MB ceiling. I think non-trivial changes to draft BIP's should not be allowed without creating a new BIP number even if the proposal has not been officially submitted to this repo in order to ensure that people's statements in support of a particular proposal are not ambiguous.
Updated back to fixed one-time bump.
Update to 95%
@jgarzik I assume you will merge this yourself when ready?
Does anyone (especially @jgarzik ) object to BIP 102 turning into ""Bitcoin Classic""'s hardfork proposal? In particular, they seem to want miner voting and add some new limits (to prevent DoS attacks; generally agreed to be necessary for size increases). I need to evaluate whether a new BIP would be redundant with BIP 102, or whether it would be best as a modification to it.

@jgarzik In addition to the above, would you be okay with considering an additional Champion/Author working on Classic (if applicable - I don't know how involved you are with their project)?
BIP 102 is not suddenly morphed into a tracking BIP for whatever Bitcoin Classic does.  That just creates additional confusion and a moving target.

We can assign a new BIP number to whatever Bitcoin Classic does.
","People referring to BIP 102 have ""bump to 2 MB once"" in mind. I guess this needs a new BIP number?
Shouldn't this be 95%?
Agreed, 95%
Updated
"
priestc,268,New BIP,"BIP 131: ""Coalescing Transaction"" Specification (wildcard inputs)",closed,2016-01-19 01:39:46,"I wrote this BIP from getting feedback from the dev mailing list. There is no implementation yet, but that can come after a number has been assigned. I have not included any numbers in this pull request. Once a number has been assigned I'll update this PR with the number.
",https://github.com/bitcoin/bips/pull/268,['bip-coalesce-wildcard.mediawiki'],2016-01-19T01:39:46Z,,"['jonathancross', 'luke-jr', 'jl2012']","This needs to add a Copyright section and address backward compatibility. If I understand correctly, it is a proposed hardfork?
With Schnorr signature it is only possible to combine signature of the same public key, but also different public keys, as long as they are signing the same hash. I think it is the plan after BIP141 is deployed
I agree this would make a _lot_ of sense as a SegWit upgrade, but I'm not sure if that's what the Author has in mind as the draft here is too lacking in specification.
@luke-jr I think the best way to describe this change is ""non-contentious hard fork"". I haven't heard of any serious objections against the change. This change is a ""win"" for all parties involved: users, miners and nodes. It should be deployed the same way that CLTV was done. I don't think its even possible to make this a softfork.

By the way, what do you men by copyright section? I looked at a bunch of other BIPs and there was no copyright anywhere on any of them. I want this BIP to be public domain. There is no sense in any one person retaining a copyright...

@jl2012 I don't see how this has anything to do with schnorr signatures. I'm not an expert on schnorr signatures, but I assume it's an alternative to ECDSA? The signature verification process occurs inside the scripting language which is self-contained inside an input. If your transaction has 4 inputs, there are 4 different independent script instances. Each script instance has no notion of what other scripts are doing.

Wildcard inputs exists a step above the signature process. Its a change to the _transaction_. Segwit as I understand it is only a change to the signature process, which is completely contained inside the script. I struggle to understand how you'd reference many other inputs from inside an input.

This change only effects how a signature is interpreted, not how the actual signature is created or verified.
@priestc

> I think the best way to describe this change is ""non-contentious hard fork"". I haven't heard of any serious objections against the change. This change is a ""win"" for all parties involved: users, miners and nodes.

All hardforks, contentious or not, have a serious loss of _all_ security for old nodes that get left behind. With Bitcoin today, I do not think your ""win"" outweighs this ""loss"". Furthermore, (as it stands today), I would object on the basis that it encourages address reuse, which is harmful in many ways. That being said...

> I don't think its even possible to make this a softfork.

With segregated witness, this becomes possible. You would bump the script version and make a rule that basically allows inputs to share the same witness.

> By the way, what do you men by copyright section? I looked at a bunch of other BIPs and there was no copyright anywhere on any of them. I want this BIP to be public domain. There is no sense in any one person retaining a copyright...

BIPs are supposed to all have a section titled Copyright stating what license they are under, or declaring themselves to be public domain. Just add that and I can assign a number and merge this (although I do _recommend_ you reconsider the approach and try to make it a segwit extension that can handle non-address-reuse scenarios using the Scnorr stuff @jl2012 mentioned).
> Furthermore, (as it stands today), I would object on the basis that it encourages address reuse, which is harmful in many ways.

I'm glad you brought this up. Someone on the dev mailing list brought this up, and the answer I gave was pretty terrible. Lets hope this time around I can make a better case:

The advice that you shouldn't reuse addresses is not exactly right. The advise should be ""never reuse private keys"". When you re-use a private key multiple times, you make it easier for other people to figure out your key by analyzing the signatures you publish. If you only ever publish one signature per private key, no one will ever be able to guess your private key.

Before wildcard inputs, re-using addresses inevitably lead to re-using a private key. After wildcard inputs become enabled, re-using address _does not necessarily_ lead to re-using private keys. Someone could send you 100 payments to the same address, but when you spend those payments, you do so with only one signature.

If you want a better argument against Wildcard inputs, one you could use is ""wildcard inputs leads to encouraging people to use on-chain microtransactions"". This change will make it easier to spend coin given to you via very small amounts. Before wildcard inputs, if 1000 people sent you one cent worth of bitcoin, you would lose most of that money to miner fees. After wildcard inputs, spending all those tiny inputs becomes just as cheap of spending from a single UTXO.

> With segregated witness, this becomes possible. You would bump the script version and make a rule that basically allows inputs to share the same witness.

I noticed that the transaction version field has been historically used to denote script version. So far each transaction version bump has been used to denote a change in the way the scripting language works. Segwit as I understand it is a change to the way script works, so it should be implemented with a version bump.

Wildcard inputs on the other hand, have nothing to do with the script language. No change whatsoever is needed in the way signatures are handled. Bumping the transaction version number will not work, hence the need to re-define the transaction version field. Otherwise future script improvements won't be available to the wildcard input version.

The BIP I wrote is really in two parts. The first part describes changing the 8 byte transaction version into two fields. The first 4 bytes is transaction version (used to denote script version) and the second 4 bytes are used to denote ""transaction type"". This part could actually be split into another BIP.

> (although I do recommend you reconsider the approach and try to make it a segwit extension that can handle non-address-reuse scenarios using the Scnorr stuff @jl2012 mentioned).

This specification is already compatible with segregated witness. I'm not sure what I would change about it to make it a ""segwit extension"".
> The advice that you shouldn't reuse addresses is not exactly right. The advise should be ""never reuse private keys"". When you re-use a private key multiple times, you make it easier for other people to figure out your key by analyzing the signatures you publish. If you only ever publish one signature per private key, no one will ever be able to guess your private key.

It also links the UTXOs together so third-parties can determine they are part of the same wallet.

> Before wildcard inputs, re-using addresses inevitably lead to re-using a private key. After wildcard inputs become enabled, re-using address does not necessarily lead to re-using private keys. Someone could send you 100 payments to the same address, but when you spend those payments, you do so with only one signature.

What happens when you spend after 100, and then the same person sends a 101st? You can't really say ""oh, this address is good for only 100 transactions"" - it's unreasonable for them to expect to count. You're in the clear if you say ""one only, period"", or if you explicitly tell them to reuse it, but an exact count over 1 is just a nusaince. Furthermore, if you knew they will send 100 before you spend, you could just as well have them wait until the sum accrues and have them send that sum in a single transaction.

> This specification is already compatible with segregated witness. I'm not sure what I would change about it to make it a ""segwit extension"".

You could use a single Schnorr signature for N inputs that require _any_ key. You would do some fancy math to combine all the keys, and check the signature is signed by the combination, rather than checking for each key individually. So, suddenly your proposal here would become useful in non-reuse circumstances as well.

I will assign your BIP number different based on whether you intend to move forward with this as-is (13x range), or whether you intend to make it a segwit extension (14x range). Just let me know and I will assign and merge (you don't need to update the draft first, just telling me which you intend is sufficient).
> It also links the UTXOs together so third-parties can determine they are part of the same wallet.

Yes, and sometimes this is desired behavior. Sometimes a person may want to publish on of their address, and people who send payments to that address, may be OK with one of their addresses being linked to that address. Consider the case of The Red Cross publishing an address for donations. If I send money to their public address, my wallet is linked to the Red Cross. When I'm doing my taxes, I can easily reference the TXID that has my wallet on one end, and the Red Cross on the other end. If my wallet re-used addresses, and if the Red Cross had used a stealth address, I would have no way to prove to the IRS I had made that donation. With publishing addresses (which leads to re-using addresses), this is possible.

On the other hand, if I were buying bulk xanax from the darknet, I would _not_ want either wallet to re-use addresses.

It depends on the usecase.

> What happens when you spend after 100, and then the same person sends a 101st?

Then you'd have to re-use the private key to move the funds that come after your first coalescing transaction. So you'd have to use the private key twice to move 101 payments. Without wildcard inputs, you'd need to re-use the private key 101 times. Two published signatures is much safer than having 101 published signatures.

> Furthermore, if you knew they will send 100 before you spend, you could just as well have them wait until the sum accrues and have them send that sum in a single transaction.

Only if all the payments are coming from the same source.

Take for example a donate address written at the bottom of a blog post that just went viral. 1000 people from around the world sends $0.05 worth of btc to that address. None of the senders are connected in any way. They are all independent entities. There is no way for them to coordinate together to batch their payments into the same transaction. 

> You could use a single Schnorr signature for N inputs that require any key. You would do some fancy math to combine all the keys, and check the signature is signed by the combination, rather than checking for each key individually. So, suddenly your proposal here would become useful in non-reuse circumstances as well.

You lost me at ""fancy math"". It sounds like to me you're describing a way to do wildcard inputs in a way that doesn't result in address-reuse. It could be considered a more private version of regular wildcard inputs. 

I wrote the BIP the way I wrote it because I wanted the change to be as easy as possible to implement. I'm not very knowledgeable about cryptography and I know many other developers who are interested in building things on top of bitcoin are not very knowledgeable about cryptography either. I think anything that can be achieved _without_ using cryptography is preferable to a method that uses cryptography. Making this a segwit extension means in order to implement it safely, you have to have a certain level of cryptographic knowledge not required by the non-seqwit version. The questions is, is there a usecase for private wildcard transactions? It seems to me that if you're doing private payments between two parties, its better to not have _any_ linking between addresses.

> I will assign your BIP number different based on whether you intend to move forward with this as-is (13x range), or whether you intend to make it a segwit extension (14x range). Just let me know and I will assign and merge (you don't need to update the draft first, just telling me which you intend is sufficient).

Couldn't both be done? I think its best to do the non-segwit version first, then some time after segwit gets merged, someone could add the segwit version. I think its better to do it simple first.
> Yes, and sometimes this is desired behavior. Sometimes a person may want to publish on of their address, and people who send payments to that address, may be OK with one of their addresses being linked to that address. Consider the case of The Red Cross publishing an address for donations. If I send money to their public address, my wallet is linked to the Red Cross. When I'm doing my taxes, I can easily reference the TXID that has my wallet on one end, and the Red Cross on the other end. If my wallet re-used addresses, and if the Red Cross had used a stealth address, I would have no way to prove to the IRS I had made that donation. With publishing addresses (which leads to re-using addresses), this is possible.

Or they can just provide receipts like they do today... By reusing addresses, you not only harm the privacy of both parties involved, but also of everyone else using Bitcoin since the observer knows it _wasn't_ involving their wallet.

> Then you'd have to re-use the private key to move the funds that come after your first coalescing transaction. So you'd have to use the private key twice to move 101 payments. Without wildcard inputs, you'd need to re-use the private key 101 times. Two published signatures is much safer than having 101 published signatures.

My point is that it is never safe to reuse the address, because you can't know when the sender is done with it if you've given them the okay to reuse.

> Only if all the payments are coming from the same source.

Even if they aren't, you could have the senders all make an anyone-can-pay transaction. Eg, Lighthouse.

> Take for example a donate address written at the bottom of a blog post that just went viral. 1000 people from around the world sends $0.05 worth of btc to that address. None of the senders are connected in any way. They are all independent entities. There is no way for them to coordinate together to batch their payments into the same transaction.

But there's also no way to tell them ""okay, stop using that address now"".

> Couldn't both be done? I think its best to do the non-segwit version first, then some time after segwit gets merged, someone could add the segwit version. I think its better to do it simple first.

Sure. Let's just make this be the non-segwit version at BIP 131 then, and a segwit version can be a separate BIP.
","Extra ""a"" in this line:
- the minimum economical value of **a** spending a UTXO
"
jl2012,283,,"New witness program definition in BIP141, and related revision in 142 - 144",closed,2016-01-18 19:06:10,"BIP141: New witness program definition
BIP142: Title change; new address definition
BIP143: Title change and update reference implementation
BIP144: Update reference implementation
",https://github.com/bitcoin/bips/pull/283,"['README.mediawiki', 'bip-0141.mediawiki', 'bip-0142.mediawiki', 'bip-0143.mediawiki', 'bip-0144.mediawiki']",2016-01-18T19:06:10Z,,"['NicolasDorier', 'CodeShark', 'schildbach', 'btcdrak', 'luke-jr', 'dcousens']","ACK on the 141 and 143 changes
ACK on all BIPs.
ACK BIP 142,  **much** improved.
ACK
NACK for 142. This would make a conflict between two version bytes, breaking client who depended on the base58 to infer the network of a base58 string.

Main EXT_PUBLIC_KEY 4,136,178,30 <=> TestNet WITNESS_P2WPKH 4

Solution without conflict:

```
base58Prefixes[(int)Base58Type.WITNESS_P2WPKH] = new byte[] { (0x03) };
base58Prefixes[(int)Base58Type.WITNESS_P2WSH] = new byte[] { (40) };

base58Prefixes[(int)Base58Type.WITNESS_P2WPKH] = new byte[] { 0x6 };
base58Prefixes[(int)Base58Type.WITNESS_P2WSH] = new byte[] { (10) };
```

I also want to note there is conflict with the segnet and mainnet as well

```
Main SCRIPT_ADDRESS 5 <=> segnet EXT_PUBLIC_KEY 5,53,135,207
Main SCRIPT_ADDRESS 5 <=> segnet EXT_SECRET_KEY 5,53,131,148
```

@sipa I think this should be changed for the public segnet, or people trying the segnet will break when they wanted to extract the network from the base58 string.

It's a weak NACK, I understand that not making collision will be harder and harder though.
BIP142 revised to resolve the conflict
Thanks, last thing I am thinking. Why making a scheme address specific for v0 and not something general to all segwit payment ? If we use the BIP142 scheme, the problem is that when a new segwit will release, no wallet will be able to send to it... all wallets want to do is sending money, they should not need to implement a new address scheme for a new segwit version.

There should be one address version for both wsh and wpkh.
@NicolasDorier This is actually generalizable, as long as the future version is 20 byte or 32 byte or both. It's very likely that future versions will be 32 byte.

In the very first version of BIP142 I actually made it completely generalizable to any script length but that idea was not very popular: https://github.com/bitcoin/bips/pull/267
well, in future version a new address version should be found. And during a while, all wallet will not be able to send to it.
I see, ACK. In the future when a new segwit version will be out, maybe a new address scheme will be implemented which is generaly secure for scripts.
","signle > single
@schildbach Corrected. Thanks
Don't need a BOM here...
"
CodeShark,218,Proposed BIP modification,Updated C++ library link and added acknowledgement.,closed,2016-01-18 18:29:15,,https://github.com/bitcoin/bips/pull/218,['bip-0032.mediawiki'],2016-01-18T18:29:15Z,,"['sipa', 'jonasschnelli', 'luke-jr']","ACK
I really hate to nitpick about this, but I don't think I can acknowledge
you in a BIP for an implementation that didn't exist at the time.
I had an implementation way before Bitcoin Core did...and the implementation has been listed in this BIP document forever. I'll take that part out if it bugs you - it's more important that the link to the implementation be there.
.
Sure, but not when the BIP was written...
@sipa Please merge or close this.
ACK
I have no authority over the bips repository, nor is there any reason why I should. The fact that it is hosted under the bitcoin organization is coincidental, so I do not use this to merge bip changes.
",
btcdrak,284,,[BIP68] Update reference implementation,closed,2016-01-18 18:21:45,,https://github.com/bitcoin/bips/pull/284,['bip-0068.mediawiki'],2016-01-18T18:21:45Z,,['NicolasDorier'],"ACK
",
petertodd,282,,Remove merge-mining suggest re: witness nonce,closed,2016-01-14 04:07:10,"Very likely that this won't be done correctly; better to not suggest it at all.
",https://github.com/bitcoin/bips/pull/282,['bip-0141.mediawiki'],2016-01-14T04:07:10Z,,"['CodeShark', 'jl2012']","ACK
ACK
",
MarcoPon,281,,added ABNF grammar,closed,2016-01-13 04:24:15,,https://github.com/bitcoin/bips/pull/281,['bip-0122.mediawiki'],2016-01-13T04:24:15Z,,,"@jtimon Added the ABNF grammar. I tried it a bit with abnfgen and it seems to generate the expected kind of results. AFAIK, that should be it.
",
CodeShark,246,New BIP,BIP 124: Hierarchical Deterministic Script Templates,closed,2016-01-13 04:23:57,"Defines a generalized script template format for wallet interoperability.
",https://github.com/bitcoin/bips/pull/246,"['README.mediawiki', 'bip-0124.mediawiki']",2016-01-13T04:23:57Z,,"['jtimon', 'afk11', 'kanzure', 'NicolasDorier', 'btcdrak', 'luke-jr']","http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-November/011795.html
I really don't like the lexicographic sorting of keys.
Why not assuming that when m's are chosen, the order is important.

Instead of defining a particular key by using Sort<sub>i</sub>(K<sub>k</sub>) it is way easier to use K<sub>k,i</sub>.

Worse than that. Normally a key derivation m<sub>i</sub> should define a particular function for all the k derived keys (for example, ""temp keys"" in HTLC).
If you use lexicographic order, Sort<sub>i</sub>(K<sub>k</sub>) will not refer to a key which has the same function as  Sort<sub>i</sub>(K<sub>k+1</sub>)

So for example in multi sig take 

K/k = {m<sub>1</sub>/k,m<sub>2</sub>/k,m<sub>3</sub>/k}

Where m is derivation respectively of Alice,Bob,Satoshi.

Sort<sub>1</sub>(K<sub>1</sub>) may define Alice but  Sort<sub>1</sub>(K<sub>2</sub>) will define Bob. This is odd... It might not matter for multi sig because the order of keys does not matter as long as everybody agrees the same. But this is a special case.

Better say K<sub>1,1</sub> define first key of Alice, K<sub>2,1</sub> second one etc...
@NicolasDorier Ordering of keys is really important, see BIP67 - https://github.com/bitcoin/bips/blob/master/bip-0067.mediawiki
@NicolasDorier

What use-cases does sorting prevent? It's just as stateful a process as ""sort in the order of [Alice, Bob, Satoshi] always"", but sorting addresses a privacy leak, and is a bit more universal (and if everyone sorts, there's one less barrier to wallet interoperability)

I would think software advanced enough to perform signing should be able to tell which public key is it's own, and add the signature irrespective of the actual ordering scheme?
@btcdrak I know this bip and never enforced it in what I develop because there is stricly no utility into doing that.

@afk11 , except if I don't understand the goal of what is called ""group key"" here is an example (but if I understand correctly, the concept of group is only useful in multi sig scenario thus hurting the generic aspect of this BIP):

Let's take this contract sample (don't need to understand, this is only for my point)

```
OP_IF
        OP_DUP OP_HASH160 <Alice pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        OP_DUP OP_HASH160 <Bob pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
OP_ENDIF
```

If I wanted to represent this contract as in this bip I would define the following group.

K/k = { m<sub>1</sub>/k, m<sub>2</sub>/k }

m<sub>1</sub> is Alice choice
m<sub>2</sub> is Bob choice

If I rewrite this script according to this BIP you may be tempted to define a template as

```
OP_IF
        OP_DUP OP_HASH160 Sort1(Kk) OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        OP_DUP OP_HASH160 Sort2(Kk)  OP_EQUALVERIFY OP_CHECKSIG
OP_ENDIF
```

Except that Sort1(K1) may represent Alice key for the first transaction, but for the second transaction Sort1(K2) may represent Bob's key in the following way 

1st transaction based on the template

```
OP_IF
        OP_DUP OP_HASH160 Sort1(K1)==m1/1==Alice OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        OP_DUP OP_HASH160 Sort2(K1)==m2/1==Bob  OP_EQUALVERIFY OP_CHECKSIG
OP_ENDIF
```

2nd transaction based on the template

```
OP_IF
        OP_DUP OP_HASH160 Sort1(K2)==m2/2==Bob OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        OP_DUP OP_HASH160 Sort2(K2)==m1/2==Alice  OP_EQUALVERIFY OP_CHECKSIG
OP_ENDIF
```

Because the sorting is done on the actual public keys derived with k as currently specified.

I don't see why ordering should be done at all. When one define a group of key, you can define any order at this moment.
if you want to define a multi sig contract by using this template language, with address reuse you have no need of lexical ordering:

Define K/k and number of signature required. K/k's order being significant no lexical ordering is needed.
@NicolasDorier you can define multiple key groups for a script template - and using key groups is optional. This preserves full generality but also affords key sorting, which is important for certain use cases (i.e. m-of-n with full key symmetry, since the p2sh depends on the ordering and the number of permutations increases factorially in n making p2sh lookups impratical...and sorting also improves privacy).
@NicolasDorier Specifically, for the example you gave key groups wouldn't provide any real benefit. Might as well define Ak for Alice and Bk for Bob:

```
OP_IF
        OP_DUP OP_HASH160 [Ak] OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        OP_DUP OP_HASH160 [Bk] OP_EQUALVERIFY OP_CHECKSIG
OP_ENDIF
```
Not having alphabetical ordering would not make permutation increases factorially, because I expected the m's in the K group to be sorted. (so for example in 2-2 Alice key is always the first and Bob always second, because it is the order in which they appear in the K group)
I did not thought about sorting for increasing privacy though.

I admit I have lots of difficulty to think about another use case expect multi sig for the key group structure.

Anyway, I think it is easy to at least simplify the notation:

Define group B: B<sub>k</sub> = { m<sub>1</sub>/k, m<sub>2</sub>/k, m<sub>3</sub>/k }

Then, in a script template
[Bk] would mean [Sort<sub>1</sub>(B<sub>k</sub>)] [Sort<sub>2</sub>(B<sub>k</sub>)] [Sort<sub>3</sub>(B<sub>k</sub>)] 

```
OP_IF
        OP_DUP OP_HASH160 [Ak] OP_EQUALVERIFY OP_CHECKSIG
OP_ELSE
        <TIMEOUT> OP_CHECKLOCKTIMEVERIFY OP_DROP
        2 [Bk] 3 OP_CHECKMULTISIGVERIFY
OP_ENDIF
```

I see a group as a way to express : ""The order of the keys is not important but should be deterministic..so let's decide it is lexical"".
@NicolasDorier yes, a group essentially means that permutations of the set don't affect the authorization policy...the key set is fully symmetric.

There could potentially be other use cases we have not considered, so although the simplified notation is useful, we might still want to support interspersing opcodes between the keys.
Ok I understand, waiting the next commits. :)

I'll probably do a script template parser for NBitcoin in the future, the problem with using the [Sort1(Bk)] notation is that you can't use it during template design, because you don't know the number of keys in the group.

If you want to concatenate, then maybe notation [Bk | &lt;script&gt; ] might do the deal. [Bk | OP_CHECKSIG ] meaning [Sort1(Bk)] OP_CHECKSIG [Sort2(Bk)] 
@NicolasDorier I've incorporated your simplified notation idea and your example.Just one caveat: I think we should make the distinction between a sorted key group and an individual key, so I suggest we use [{Bk}] to denote a sorted key group as opposed to [Bk] which is just a single key.

We can still improve upon the notation, perhaps, by making the distinction between a key group and an individual key more explicit as well. Perhaps something like:

Single key: Bk
Key group: {Bk}
Sorted key group: S{Bk} or {Bk}_s
Or perhaps {Bk} can be used to denote both the key group itself and the sorted expansion. Sorting would always be implied when used in a template.
Yes I think Bk and {Bk} is clear enough, I don't think there will be any need of saying ""sorted key group"", it is implied.
There is no reason to make a keygroup if they can't be sorted by lexical order without changing the semantic of the script.
Needs Copyright section.
@luke-jr copyright section added.
","Can you add a ""Post-History"" field with kanzure's link ?
"
CodeShark,242,New BIP,BIP 83: Dynamic Hierarchical Deterministic Key Trees,closed,2016-01-13 04:23:20,"Proposed deterministic key tree structures suffer from the limitation that once a hierarchical level is used to derive signing keys, we can no longer nest deeper levels. This BIP proposes a solution to this problem.
",https://github.com/bitcoin/bips/pull/242,"['README.mediawiki', 'bip-0083.mediawiki']",2016-01-13T04:23:20Z,,['luke-jr'],"Needs Copyright section.
@luke-jr copyright section added.
",
drwasho,278,,Fixes,closed,2016-01-12 13:10:44,"- Spelling mistakes
- Change in the deployment model
- Corrected my acknowledgement to Austin 'Williams', not 'Hill'
",https://github.com/bitcoin/bips/pull/278,['bip-0107.mediawiki'],2016-01-12T13:10:44Z,,,,
jl2012,277,,"BIP141: New commitment structure, sigop limits, etc",closed,2016-01-12 13:09:13,"Revised based on the latest codebase:

https://github.com/sipa/bitcoin/commits/segwit2
",https://github.com/bitcoin/bips/pull/277,"['bip-0141.mediawiki', 'bip-0142.mediawiki', 'bip-0143.mediawiki', 'bip-0144.mediawiki']",2016-01-12T13:09:13Z,,"['afk11', 'CodeShark']","ACK
","Anything beyond 17 is two bytes, should it be called version  byte?
Only 0-16 are defined. Anything beyond 17 has no special meaning.
"
petertodd,276,,Minor: Fix BIP65 status in README,closed,2016-01-11 14:36:23,"We changed it in the BIP doc itself, but not the index.
",https://github.com/bitcoin/bips/pull/276,['README.mediawiki'],2016-01-11T14:36:23Z,,"['btcdrak', 'MarcoFalke']","ACK
ACK
",
xbtdev,250,Proposed BIP modification,add copay link to bip44 compatible wallets list,closed,2016-01-08 20:37:19,"I suggest that we add copay to thie list of compatible wallets for Bip44 as they use the Bip44 path for key derivation

![screenshot 2015-11-24 00 54 57](https://cloud.githubusercontent.com/assets/3032137/11362024/03c051e4-9246-11e5-9ffd-8be4a62cccf2.png)
",https://github.com/bitcoin/bips/pull/250,['bip-0044.mediawiki'],2016-01-08T20:37:19Z,,"['bitjson', 'slush0', 'luke-jr']",":+1: 
@slush0 @prusnak This requires approval from one of you. Please ACK or NACK.
ACK
",
dionyziz,251,Proposed BIP modification,Fix small typo in BIP 0016,closed,2016-01-08 20:32:52,,https://github.com/bitcoin/bips/pull/251,['bip-0016.mediawiki'],2016-01-08T20:32:52Z,,"['btcdrak', 'luke-jr']","This appears to be s/Thus is it/Thus it is/

@gavinandresen ACK?
ping @gavinandresen 
",
kristovatlas,259,Proposed BIP modification,BIP16: fix typo in block height of P2SH validation,closed,2016-01-08 20:19:43,,https://github.com/bitcoin/bips/pull/259,['bip-0016.mediawiki'],2016-01-08T20:19:43Z,,"['btcdrak', 'petertodd']","ACK
ping @gavinandresen 
",
luke-jr,273,Proposed BIP modification,BIP 0001: Clarification of when changes don't need a BIP,closed,2016-01-08 19:21:58,,https://github.com/bitcoin/bips/pull/273,['bip-0001.mediawiki'],2016-01-08T19:21:58Z,,"['harding', 'btcdrak']","Yuck, long line diffs.  It looks like:

Old: ""Small enhancements or patches often don't need a BIP""

New: ""Small enhancements or patches often don't need standardisation between multiple projects; these don't need a BIP[...]""

ACK
@harding thanks for that!

ACK 4c1c02a
",
kanzure,269,Proposed BIP modification,BIP1: Clarify and consolidate text regarding early stage idea championing,closed,2016-01-08 18:52:38,"The BIP1 text has been updated to clarify how early stage idea championing works.

The text itself is not significantly different, for the most part these changes involved reordering the existing sentences and paragraphs, and removing some conflicting ambiguous details. LIkewise, the previous reasons for BIP editor rejection of a (e.g. malformed) BIP have been consolidated into closer proximity in the text. I suspect that this will help readers understand the process better.

Also, this branch includes some trivial boring BIP1 changes like:
- ""Bitcoin mailing list"" -> ""bitcoin-dev mailing list""
- ""Bitcoin repository"" -> ""relevant Bitcoin repository"" (originally I was going for ""Bitcoin Core"" but Luke-Jr mentioned a good NACK reason)
- ""Bitcoin issue tracker"" -> ""relevant Bitcoin issue tracker"" (same reasoning)

I originally brought up the issue (of BIP1 early-stage championing ambiguity) in the bitcoin-dev IRC channel on freenode a few hours ago:
http://bitcoinstats.com/irc/bitcoin-dev/logs/2016/01/01#l1451664846.0

Only somewhat related, but I found this email interesting:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010955.html

This pull request text was written as of commit 66224130f03ffb94daae9692d1b8d25b1c35e6ba.
",https://github.com/bitcoin/bips/pull/269,['bip-0001.mediawiki'],2016-01-08T18:52:38Z,,"['btcdrak', 'luke-jr', 'evoskuil']","I'd like to [quote @laanjw](https://github.com/bitcoin/bips/pull/195#issuecomment-138601045) for why BIP1 should be updated rather than creating a new BIP.

> I agree with that in general, but for the meta-bip I think it makes practical sense to make an exception there:
> 
> People will go to BIP1 to learn about writing BIPs. Having it self-contained is a plus
> There are no implementations of BIP1 - unless you are sneaky and count the other BIPs, but that'd only matter if there are big structural changes which would 'invalidate' the other BIPs by BIP1
NACK: process references to bitcoin core and #bitcoin-dev
@evoskuil These changes do not include a reference to the bitcoin-dev IRC channel on freenode. Also, is the one remaining use of ""Bitcoin Core"" at the end regarding committers still objectionable to you? It's pretty harmless, I think.

It was previously:

> Many BIPs are written and maintained by developers with write access to the Bitcoin codebase.

And in this changeset it is currently:

> Many BIPs are written and maintained by developers with write access to the Bitcoin Core codebase.
Hi @kanzure,

I don't see any reason for the reference to Bitcoin Core. One could just as easily change it to libbitcoin, given that several BIPs have been written by libbitcoin contributors as well (including this BIP1). But I would just drop this statement altogether. My mistake on the IRC, read too quickly.
@evoskuil I agree, drop the sentence entirely.
@evoskuil @btcdrak removed in 66224130f03ffb94daae9692d1b8d25b1c35e6ba
@kanzure Change my NACK to ACK.
","This sentence is said twice:

> Small enhancements or patches often don't need a BIP and can be injected into the Bitcoin Core development work flow with a patch submission to the Bitcoin Core issue tracker.

wasn't intentional, should be removed/fixed.
> to both save

Should be ""to save both""
"
CodeShark,272,New BIP,BIP 144: Segregated Witness (Peer Services),closed,2016-01-08 18:00:10,"Needs BIP number
",https://github.com/bitcoin/bips/pull/272,"['bip-codeshark-segwit-peer-services.mediawiki', 'bip-codeshark-segwit-peer-services/witnesstx.png']",2016-01-08T18:00:10Z,,"['btcdrak', 'NicolasDorier']","Looks like ""spellcheck as you type"" was enabled when creating the diagram giving the squiggly red lines.
","Yes, please, consider using the services bit. Implementation wise, a client wanting to connect to a segwit supported node, don't want the need to wait for a magic timeout period to know if the node support segwit before trying the next one.

Using a message 'havewitness' will make peer discovery magnitude time longer.
"
jl2012,270,New BIP,BIP 143: Transaction signature verification for version 0 and version 1 witness program,closed,2016-01-08 17:58:21,"This proposal defines a new transaction digest algorithm for signature verification in version 0 and version 1 witness program, in order to minimize redundant data hashing in verification, and to cover the input value by the signature.
",https://github.com/bitcoin/bips/pull/270,[],2016-01-08T17:58:21Z,,"['NicolasDorier', 'sipa', 'MarcoFalke', 'btcdrak', 'FelixWeis']","So, this basically redefines the 4 ECDSA OPs in the case of segwit scripts.

The only downside I see is outweighted by the upside.

On the good side, signature checkers already know the transaction being spent. From that they can parse the input being signed, and see if it is segwit. If it is, then change the hash rule, this is easy change.

However, I am a bit concerned about needing the previous input values. Actually transaction checkers don't have this information. Requiring it will make lots more code to change to support segwit, because the signature checker need now more data than before. It might not really be a valid complain though considering the upside.

(btw, people using NBitcoin with TransactionBuilder won't have any breaking code because of that, the TransactionBuilder already requires the full spent txout)
On Jan 6, 2016 01:37, ""Nicolas Dorier"" notifications@github.com wrote:

> However, I am a bit concerned about needing the previous input values.
> Actually transaction checkers don't have this information. Requiring it
> will make lots more code to change to support segwit, because the signature
> checker need now more data than before. It might not really be a valid
> complain though considering the upside.

I am a bit confused what signature checker you are talking about. Either
you are a full node that maintains a UTXO set, and you have the amounts, or
you can't usefully verify anything at all. If you're talking about the
signing code: that should have access to amounts or it couldn't construct a
correct transaction.

However, I don't consider signing amounts or not a deal breaker. We had to
propose changing the sighashing algorithm to fix the O(n^2) behaviour, and
if we're doing that, it would seem stupid to not also make the probably
most-often requested related feature (amount signing). If there is
substantial controversy about it, I think we can remove that, and postpone
it to be an optional feature of a future softfork.
I don't think this will be controversial.
My point is that the method (in all frameworks and language)

```
EvalScript(Script scriptPubKey, Script scriptSig, Transaction, Input)
```

Will become

```
EvalScript(TxOut previous, Script scriptSig, Transaction, Input)
```

And same thing for the ""Sign"" method.
In practice, this will be easy to fix, people who can fetch the scriptPubKey before will most likely be able to fetch the TxOut easily as you said. But this will not be automatic.

Frankly, I don't think that matter, wallet providers, hardware wallet provider, and service providers like myself want so much the benefit of having the input value in the hash that nobody will likely complain. 
This update seems like the perfect opportunity to get rid of that CHECKMULTISIG bug where one item too many is popped off the stack.
@FelixWeis I'm not sure if it's worth extra testing and reviewing. The improvement is just 1 byte per CHECKMULTISIG. And CHECKMULTISIG will become obsolete when we introduce new signature scheme like Schnorr after the segwit softfork.
If schnorr is replacing these completly not fixing makes sense, thanks!

On Fri, 8 Jan 2016 14:25 Johnson Lau notifications@github.com wrote:

> @FelixWeis https://github.com/FelixWeis I'm not sure if it's worth
> extra testing and reviewing. The improvement is just 1 byte per
> CHECKMULTISIG. And CHECKMULTISIG will become obsolete when we introduce new
> signature scheme like Schnorr after the segwit softfork.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/270#issuecomment-169900005.
","render as 

```
ss << static_cast&lt;const&gt;&lt;/const&gt;(scriptCode);
```
It seems a bug of github. Any idea?
yeah looks like output escaping.
Not a bug. There is a syntax error in your mediawiki code: https://github.com/jl2012/bips/pull/5

Also you can activate code highlighting on the cpp code.
"
jl2012,267,New BIP,BIP 142: Address Formats for Witness Program,closed,2016-01-08 17:56:33,"Request for BIP number for ""Address Format for Witness Program""
",https://github.com/bitcoin/bips/pull/267,['bip-segwitaddress.mediawiki'],2016-01-08T17:56:33Z,,"['maaku', 'NicolasDorier', 'gubatron', 'sipa', 'btcdrak', 'dabura667']","""Padding with 41 - 26 = 15 0x00:""

Wasn't it 43 bytes?
What is the rationale behind 41 bytes?

Why fixed length? At this point, the blob of letters is so large and the data contained within no longer needing to be a hash means that you could easily trick a user who is only looking at the first few characters into thinking they're sending to the right segwit address.

Having the B or T at the beginning will give a false sense of security when there is none, and telling the user ""compare the LAST few characters!"" Won't help in most situations because the sheer length of the address will mean the end will be cut off in most input boxes that it might be shown in.

I propose:
1. Do away with fixed length
2. If you must have a human readable address for this, use p2sh and change the version byte from 5 to 7 or whatever.
Unorthodox, but perhaps the checksum should come after the version byte so people can verify the address by eyeballing it.
There is a reason for having a new address format: p2sh only has 80-bit
collision resistance.
> There is a reason for having a new address format: p2sh only has 80-bit collision resistance.

@sipa How was 80-bit calculated? @gubatron If this is true, the BIP should state 80-bit, and avoid ""less"" and other vague wordage.

@sipa What about the length attack problem I described? I would say a large amount of people just look at the first 5-6 characters and compare, but if the real address was:

`<PUBKEY> OP_CHECKSIG` but the attacker shows them `<PUBKEY> OP_DROP OP_TRUE` they could cause a user to lose funds, and maybe steal them.

To the user, the first 30 letters are the same, so 99% of users will be satisfied.

If collision is what you're concerned about, why not soft fork in SHA512 with the initial implementation, or use HASH256 instead?
Witness v1 uses 256-bit hashes for redeemscripts (which have 128-bit
collision resistance).

I don't disagree with getting rid of addresses entirely, and encouraging
payment protocol etc. instead, but if P2SH supports addresses, and Witness
scripts don't, we're potentially encouraging potentially worse security for
systems that somehow are stuck with relying on addresses.
> I don't disagree with getting rid of addresses entirely

I am not proposing such a thing. I merely think that having the hash (of the pubkey or script, traditionally) as close to the version byte as possible means that more brute forcing must be done to try and spoof (vanitygen style brute force the first x characters) the first few letters.

Which is why I would suggest maybe: (unorthodox, but it would mean the smallest change in the witness program would change the beginning wildly.)

``` bash
Payload
151A0076A914010966776006953D5567439E5E39F86A0D273BEE88AC000000000000000000000000000000

first 4 bytes of checksum
1B4A8136

Add the 4 checksum bytes after version and before witness program. This is the 47-byte binary witness program address:
151B4A81361A0076A914010966776006953D5567439E5E39F86A0D273BEE88AC000000000000000000000000000000
```

We could even make the checksum larger to allow for greater collision resistance. 8 bytes etc.
No problem with that :)
But it doesn't solve the problem really. An attacker can trivially grind to
make the first bytes match up too.
32 byte checksum :-D
Also, still curious on the 41 byte max length reasoning.

Wouldn't it make sense to allow for some kind of variable length scheme?
@gubatron @dabura667 
You have to read this with the main segwit BIP: https://github.com/bitcoin/bips/pull/265

41-byte is the maximum length for a witness program allowed in BIP-SW. The reason for 41-byte should be discussed in that BIP.

Since 58 is not a power of 2, replacing `<PUBKEY> OP_CHECKSIG` with `<PUBKEY> OP_DROP OP_TRUE` will completely ruin the address, except the first 2-3 characters.

I have considered variable length, but the first character is fixed only if the length is fixed
@dabura667 moving the checksum to the beginning should be a good idea. It spreads its entropy to the whole address since 58 is not a power of 2.

Using variable length will make the address shorter in most cases, but the first character will also become variable
> will completely ruin the address

Only after a certain point. Not the whole address. One thing I overlooked is the segwit length byte, but as long as that stays the same I can create a very similar address.

Try this:

0f240021026a85bb9fb33e8841c83b52f8d15438ccc65c646657c5992dddeffd0b21790c19ac0000000000

(no checksum) is bob's address

0f240021026a85bb9fb33e8841c83b52f8d15438ccc65c646657c5992dddeffd0b21790c19b90000000000

This is the malicious address, replaces checksig with nop so that anyone can spend.

The address is the same up til 2/3 of the way in unless we insert the checksum after the version byte.

I can't get to a pc right now, but try it yourself
@dabura667 Yes you are right. Moving the checksum to the beginning should fix the problem
As @sipa said, 4 bytes would be easy to brute force somehow, so maybe the checksum should be increased to 16 bytes and the version byte hanged to keep B and T for that new length.
Moving checksum to the beginning doesn't do anything to fix the problem -- not with the checksum size being considered.

But there are two much more fundamental problems with this proposal:
1. Segwit was specifically constructed so as to not require a new address format. P2PKH and P2SH addresses work just fine, and more complicated schemes can be done via the payment protocol. This has three primary benefits: (a) infrastructure does not need to be updated, (b) p2pkh and p2sh can be used as a fallback for non-upgraded nodes (the upgraded node listens for both segwit and non-segwit incoming coins), and (c) we can avoid placing this debate on the critical path for implementation.
2. Base58 addresses is a terrible idea that would have never passed peer review if done today. They are variable-length, distinguish capital and lowercase, have no error correction, are not accessible, and are insecure for encoding anything other than a hash (which this proposal is not!).

I suggest putting this BIP on hold and instead work on a proper implementation of a next-generation address format, using e.g. Damm's algorithm or Reed-Solomon error correction codes, then revisit as a potential future address format if an actual need is demonstrated.
If you want to use payment protocol you need a server you trust to provide the payment endpoint for people needing to pay you, you also need parser of protobuf, and understanding PKI infrastructure.
This simply cannot replace address format for wallet providers.

An address format is needed. If Base58 is a terrible idea, proposing other scheme should be considered important, without an address format wallet provider will simply not implement segwit. (or use a suboptimal address scheme)
@NicolasDorier the point is that you can make a segwit payment to a p2pkh or p2sh address, so existing addresses work just fine.
@maaku I think the BIP has explained why an address is needed for native segwit. Since this is a separate BIP, it shouldn't affect the implementation of segwit itself.

The motivation is simple: to make an address that every existing Bitcoin user understand, and easy for wallet devs to implement, and at least as safe as existing address

""They are variable-length, distinguish capital and lowercase, have no error correction, are not accessible, and are insecure for encoding anything other than a hash (which this proposal is not!).""

Out of these comments.....
1. This is fixed length
2. Capital and lowercase ---- same as current addresses
3. No error correction ---- same as current addresses
4. Not accessible ---- a bit worse than current addresses as it is longer
5. Insecure for encoding anything other than a hash ---- true

So only point 5 is relevant. If this is addressed, the new address format would not be worse than an existing one (except longer)

An obvious solution is to increase the length of checksum, so it basically becomes encoding a hash (i.e. checksum) again.
> 1. This is fixed length.

Interesting. This is not the case with P2PKH or P2SH addresses, which vary in size between 33 and 34 characters. But testing randomly generated scripts does seem to indicate a consistent size here.

> same as current addresses

The point is that current addresses fail considerably on these metrics. If we go forward with generating a new address format, then we should aim to create a _better_ standard than we are stuck with today. And this isn't a case of ""more research is required"" -- there is decades of research literature and practical experience in encoding short strings of information with error correction in human-friendly formats.

For example, most of the concerns I raised above could be alleviated by using a base32 encoding with Damm error correction code. Any single digit error or swapping of consecutive digits would be corrected, case wouldn't matter, and code points selected for visual and auditory distinction. A payload of your format would look like the following:

qnouwchpsg14mj6eeyta5qi8ep7urd7kzgcw75cdrksearqxf64fdxkeomb6999ufak3stqa5

Code for manipulating these formats would actually be _less_ than base58 complexity, for an encoding that is 73 characters instead of 64.

You might want to consider a 2nd encoding format for smaller, more commonly used script sizes.

> An obvious solution is to increase the length of checksum, so it basically becomes encoding a hash (i.e. checksum) again.

Unfortunately you really need a full 32 bytes to close off all forms of attack with 128-bit security. With encoding sizes >100 characters as a result, one really wonders what the value of such a proposal would be.

A better solution is to permute/mix the bytes of the payload in a reversible way based on their base-8 checksum.
@maaku 

> for an encoding that is 73 characters instead of 64.

Longer than 80 will break the line. I think 75 is the upper limit.

> A better solution is to permute/mix the bytes of the payload in a reversible way based on their base-8 checksum.

How about using AES, with the checksum as the key?
> How about using AES, with the checksum as the key?

Well it'd have to be something recoverable. The idea I had in mind was to an order independent checksum (e.g. XOR the bytes, but maybe there's something better in the literature) and a deterministic, data-independent shuffle like Fisher-Yates. Since such a shuffle operates on the order of bytes being moved around, but doesn't modify those bytes, the 8-bit order-independent checksum would be preserved, allowing you to unshuffle during decode. AES wouldn't have that property though.

That would not provide cryptographic security though. I need to think on this some more.
> Well it'd have to be something recoverable.

AES should be recoverable, if the key (i.e. checksum) is given in plaintext.
I was just confused because the format spec at first said:

```
[2 to 41-byte witness program]
[padding by 0x00 to 43 bytes]
```

and then the example said:
""Padding with 41 - 26 = 15 0x00:""

but I thought after that  you needed to add a couple more `0x00`'s to get to 43 bytes for the padding.
The PR is closed for now for rewrite
The proposal has been updated with 2 address types defined
Tested 71 character QR code for kicks. Here's my results.

tl;dr 71 characters is small enough to be made into a reasonably sized QR and be read at normal distances regardless of the strength of error correction the QR contains.

```
Site used in testing
http://www.hcidata.info/qr_code.php

Webcam used in testing
1080p Logicool standard web camera

Content:
bayyyhyyyyyyyyyyyyq4wteyyejc3w5sybwui8iksjqoh6mrah9o4hoprh7t67nfcsdmi1t

ECC: L - smallest error correction
Size: 6 (4.8 cm x 4.8 cm on my 1080p screen)
farthest successful result: 53 cm away from screen

ECC: H - best error correction
Size: 4 (4.8 cm x 4.8 cm on my 1080p screen)
farthest successful result: 38 cm away from screen
   (tried on my iPhone 6: successfully read it from 48 cm)
```
@jl2012 Missing section on copyright, see other BIPs for example.

e.g.

```
==Copyright==
This work is placed in the public domain.
```
The python code now allows encode and decode of general segwit address
","why not make it length - 10? This way we could account for a larger space of scripts (supporting all the way up to 41)

What scripts of LEN < 10 can you think of that would be useful for the everyday user? (actually, < 9 if you don't count the segwit version byte)
Why not also include a similar proposal for P2SH segwit while you're at it?

I assume that segwit being limited to 41 bytes means multisig etc. are planned to be P2SH.
@sipa may want to reduce to max size from 41 to 33. Anything longer than 33 should use a version 1 witness program. Unless we need a strong hash function in the future, there is no reason to use more than 33 bytes. And it is very easy to extend it with a softfork.

> I assume that segwit being limited to 41 bytes means multisig etc. are planned to be P2SH.

Yes, that's called ""version 1 witness program""
Use `References` instead.
"
CodeShark,265,New BIP,BIP 141: Segregated Witness (Consensus layer),closed,2016-01-08 17:54:46,"BIP number requested,
",https://github.com/bitcoin/bips/pull/265,['bip-codeshark-jl2012-segwit.mediawiki'],2016-01-08T17:54:46Z,,"['rubensayshi', 'afk11', 'jonasschnelli', 'MarcoFalke', 'btcdrak', 'morcos', 'FelixWeis', 'NicolasDorier', 'sipa', 'luke-jr', 'jl2012']","related BIPs, for easy reference;
- Segwit peer services https://github.com/bitcoin/bips/pull/272
- Transaction signature verification for version 0 and version 1 witness program https://github.com/bitcoin/bips/pull/270
- Address Format for Witness Program https://github.com/bitcoin/bips/pull/267 

and WIP code:
- https://github.com/sipa/bitcoin/pull/8/files
is there a reason why the transaction version is not bumped for the new structure?
Yes. There is no need:
- SegWit transactions are not standard anyway due to the CLEANSTACK rule
  already.
- We don't need it for serialization, because we need another mechanism for
  signaling the presence of witness data anyway.
","missing authors
Missing copyright statement.
???
the comment refers to the p2p serialization and relay stuff - what follows is the consensus specification, which WILL be in this document.
Why not using ""version"" service bits ? Having a havewitness message is a pain in the ass for wallet developers, because they need to know whether the node support witness or not. If you use havewitness message, then after the verack we need to wait if there is any havewitness message coming with a timeout to determine if it is supported and deciding if we continue to conversation or not.
This part of the specification (specifically the peer services layer) is still very preliminary and will probably be put into its own BIP. We expect it to undergo substantial changes still.
To avoid confusion, may remove this part from this BIP and say the relay protocol is defined in a separate BIP
Is 'anyone-can-spend script' a new term? I understand why, I just wonder if the term is too similar to ANYONECANPAY. We should define the term, or maybe reword to say unknown versions are simply not evaluated as anything other than pushdata, and won't be evaluated by the witness interpreter?
It's not new: https://en.bitcoin.it/wiki/Script#Anyone-Can-Spend_Outputs
This was confusing to me.  You're not talking about Version 0 and Version 1 witness programs here are you?  Aren't you just talking about whether or not the witness program is also embedded in a P2SH regardless of what version witness it is?
yeah, the description is somewhat inaccurate. I'll edit it
not a single push anymore
you need <0x001976A914{20-byte-hash-value}88AC>
The segwit update seems like the perfect moment to get rid of that CHECKMULTISIG bug where one item too many is popped off the stack. Although probably should be done in #270.
No bikeshedding about what changes to make, please :(

We have script versions now, so we do not need to fix all inconveniences at
once.

There are two exceptions to this self-imposed rule:
- Changing the sighashing to not be O(n^2), as it wouldn't be a bugfix to a
  worst-case scenario if it's optional for an attacker.
- Amount signing, as I didn't expect that people would accept any sighash
  change proposal that did not include this...
nit: use `OP_0 <DUP HASH160 {20-byte-hash-value} EQUALVERIFY CHECKSIG>`?
Why? Waste of space.
Oops, never mind.
@jonasschnelli Isn't the deserialized format below?
It's shown in the deserialized script
"
harding,261,New BIP,BIP 125: Opt-in Full Replace-by-Fee Signaling,closed,2016-01-08 17:50:46,"@petertodd and I present the following proposed BIP describing opt-in full-RBF signaling, as requested in the [2015-12-03 bitcoin-dev IRC meeting](http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-12-03-18.59.html).

Opt-in full-RBF has previously been [discussed on the mailing list](http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-November/011783.html) and support for it has been [added to Bitcoin Core](https://github.com/bitcoin/bitcoin/pull/6871), so I humbly request the assignment of a BIP number from the BIP editor, @gmaxwell.

Upon receipt of the number assignment and fixing any initial issues found with this proposed text, I will post a copy of this BIP to the mailing list for interested developers to read.
",https://github.com/bitcoin/bips/pull/261,"['README.mediawiki', 'bip-opt-in-rbf.mediawiki']",2016-01-08T17:50:46Z,,"['sdaftuar', 'voisine', 'dabura667', 'amacneil', 'petertodd', 'luke-jr']","Thanks for writing this up!  This looks good to me.

@petertodd How should wallet authors be checking if a new transaction has an ancestor that has signaled RBF?  That seems like something we ought to expose more easily via RPC somehow, perhaps?
","Perhaps add a clarification that all BIP68/BIP112 transactions will by definition now be opting into RBF?
This erroneously implies non-signalling transactions are significantly safer.
They may also opt not to.
IMO wallets should not treat these any differently.
Perhaps this ought to mention how nodes can disable the signalling (either to never-RBF or always-RBF)?
@luke-jr I don't think it implies that, but I agree that it doesn't stop people from making that inference.  And why should it?  There seem to be plenty of people who do think non-replaceable transactions are safer than replaceable transactions, and the purpose of this document isn't to challenge their preconceptions but rather to inform them about a new policy which will make creating transaction replacements easier.
Agreed; I think that's implied by the word ""may"" on line 26.  Is there a specific text change you're advocating for here?
I think the UX is really hard here.  Unconfirmed transactions of any kind are insecure compared to even 1-conf transactions, however because most users mostly deal with reliable partners, they will only rarely ever have a transaction fail to confirm---so they are lulled into a false belief that unconfirmed transactions are fundamentally reliable.

Although I don't think opt-in full-RBF doesn't significantly changes the dynamics for serious double spenders, it does make it possible for people with less technical knowledge and fewer resources to execute successful double spends.  That's a change from the current status quo, and I think it should be communicated to users.

However, I agree that we don't want to imply that wallets must do anything differently.  If there's a phrasing change you have in mind, perhaps changing ""should consider"" to ""may want to consider"", I'd be happy to hear it.
@luke-jr Double-spending a non-RBF transaction (lets say with all inputs confirmed) does require more resources and is less likely to succeed than with RBF, wouldn't you agree? And if miners and pools in future were to communicate which transactions they have accepted into their block templates, and/or broadcast partial block solutions proving they've expended hashing power attempting to mine them, that would raise the cost and difficulty of a successful 0-conf double-spend even further.

I think we can solve the problem of 0-conf security well enough to make it practical for the majority of typical use cases.
@harding That still sounds too much like a recommendation.

@voisine It doesn't require more resources, and isn't _much_ less likely to succeed if you do it right.
@luke-jr to double spend a 0-conf with a high rate of success, you would need to broadcast your double spend directly to a large portion of hashing power while simultaneously getting the legitimate tx to the victim. If we assume the victim is listening to random nodes on the network, then this does seem to have a not-insignificantly lower chance of success than with RBF. Please disabuse me of this notion if I'm missing something. We want to accurately communicate the risks while keeping the user experience competitive with other payment methods to the greatest extent possible.
> If we assume the victim is listening to random nodes on the network, 

This assumption does not usually hold. Furthermore, the legitimate tx could be tiny and quick to propagate the non-mining nodes, while the miners could receive large transactions that are slow to move beyond them.

Additionally, you are assuming a naive case of legitimate-vs-fraud competition. If an attacker simply spends the same coins with N merchants at once, all N transactions are legitimate and N-1 are guaranteed to lose out.
nSequence of 0xfffffffe will not opt-in to RBF but will still be valid for BIP68/BIP112 (as it is not 0xffffffff)
@dabura667 If the leading bit is set, then that disables BIP68 semantics for nSequence.  So anything that is using BIP68 necessarily has a 0 in the leading bit and therefore will also be opting-in to RBF.
@sdaftuar BIP68 doesn't exist yet... As part of the soft-fork, the opt-in conditions for RBF can be modified if there's demand to do so.
Agreed - it's not acceptable to give the impression that non-signalling txs are any safer.

In fact, I think it'd be good if we make it clear that opt-in RBF was created for political reasons, not technical.
Fwiw I wasn't trying to imply any need to change; the behavior seems reasonable to me as-is (including taking into account the draft BIPs).
Non-signalling txs can potentially be safer. With non-signaling tx you potentially only need to trust miners not to reverse them if you can get miners to report that they've accepted them. With RBF, you must trust the signer not to reverse them while they remain unconfirmed. That's a technical difference.
Miners are not in a position where they can provide those kinds of guarantees in a decentralized environment, and we should not be encouraging it.
What about by broadcasting partial block solutions? This is a decentralized way to indicate how much hashing power is being expended attempting to mine any given transaction.
There aren't any incentive compatible partial block proposals yet; not relevant to the current ecosystem.

On 19 December 2015 09:54:25 GMT-08:00, Aaron Voisine notifications@github.com wrote:

> > +
> > +==Abstract==
> > +
> > +Many nodes today will not replace any transaction in their mempool
> > with
> > +another transaction that spends the same inputs, making it difficult
> > for
> > +spenders to adjust their previously-sent transactions to deal with
> > +unexpected confirmation delays or to perform other useful
> > replacements.
> > +
> > +The opt-in full Replace-by-Fee (opt-in full-RBF) signaling policy
> > +described here allows spenders to add a signal to a transaction
> > indicating
> > +that they want to be able to replace that transaction in the future.
> > +In response to this signal,
> > +
> > +\* Nodes may allow transactions containing this signal to be replaced
> > in their mempools.
> > +
> > +\* The recipient or recipients of a transaction containing this
> > signal may choose not to treat it as payment until it has been
> > confirmed, eliminating the risk that the spender will use allowed
> > replacements to defraud them.
> 
> What about by broadcasting partial block solutions? This is a
> decentralized way to indicate how much hashing power is being expended
> attempting to mine any given transaction.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/261/files#r48095057
The cost is close to zero. If it's built into bitcoin-core and other mining software, then we have an incentive compatible solution since it would take additional effort to disable it. It's relevant to the RBF discussion, since RBF transactions preclude any future improvements to 0-conf safety that would make them practical in more situations.
"
cdecker,224,New BIP,BIP 140: Normalized transaction ID,closed,2016-01-08 17:48:21,"This is the amended Normalized Transaction ID BIP previously discussed
on the mailing list. Since the discussion on the mailing list there
have been some major changes, for one the BIP changed from requiring a
hard-fork to a much easier soft-fork (thanks sipa for helping me
figure out how).

The normalized transaction IDs are computed on a stripped version of
the transaction, in which all the malleable parts, i.e., the
signatures, where removed. This solves malleability in a simple and
clean way.

Unlike the original proposal, this version does not use the normalized
transaction IDs on a network level, instead they are used solely when
signing and checking signatures. Normalized transactions are swapped
in on-demand when using a new opcode OP_CHECKSIGEX and are tracked in
the UTXO, no longer requiring lookups by normalized transaction ID.

In order to give clear semantics when to track the normalized
transaction IDs and anchoring them without recursively computing the
IDs of previous transactions down to the coinbases, the version is
bumped to 2. Version 2 outputs may be referenced using the normalized
transaction IDs, while nothing changes for version 1 transactions.

There is a working implementation of this BIP in my [normtx
branch](https://github.com/cdecker/bitcoin/tree/normtx).
",https://github.com/bitcoin/bips/pull/224,['bip-00nn.mediawiki'],2016-01-08T17:48:21Z,,"['gmaxwell', 'gavinandresen', 'afk11', 'schildbach', 'sipa', 'btcdrak', 'luke-jr']","I think you should include that to compute a normalized txid, you should replace the prevout hashes in inputs by their respective normalized txid as well, otherwise you only accomplish malleability protection when spending inputs from already unmalleable transactions (=sufficiently confirmed ones).
You cannot mimick OP_CHECKSIG in a softfork, as it has an effect on the stack. You can only create something similar to OP_CHECKVERIFY.
Agreed, sorry for the oversight. If we leave the malleable transaction IDs in there we only achieve a non-malleability of 1 level beyond what is confirmed in the blockchain.

However that means that in order to compute the normalized transaction ID we do need to have the previous outputs in our UTXO so that we can retrieve. Not a huge problem if we discard orphaned transactions anyway, just a minor drawback as I see it. I'll see if I can fix it in my implementation branch :-)

As for mimicking OP_CHECKSIG, isn't it sufficient to leave one non-null item on the top of the stack for old nodes to accept the script?
If we're going to take the effort of:
- Introducing a new checksig operator
- Increasing the UTXO set size by 20%
- Doing a softfork

... we might as well try to fix the problem entirely, and define normalized txids recursively.
By define recursively you mean to recompute all transaction IDs from the coinbase transaction to their current outputs instead of bumping to v2 and anchoring the normalized transaction ID there?

The advantage of not computing them down to the coinbase is that it is trivial for clients to start tracking newly incoming normalized transaction IDs, but it might be very hard to do so on the entire blockchain. For one it is computationally intensive to go through 60+ million transactions, some nodes no longer have all the data (purged blockchain) and I am not clear on what the advantage would be to track additional IDs for historic transactions.

Bumping v2 gives an easy way for future transactions to opt-into being tracked by normalized transaction ID as well.
Sure, you can use transactions versions and state that transactions with v1 have ntxid==txid, to simplify computation. But it doesn't solve the problem: anyone who upgrades to a post-this-BIP codebase will need to be able to know compute ntxids of transactions that spend v2 outputs. If they have pruned those by the time they upgrade, there is no solution.

In my opinion, the cost of permanently increasing the UTXO set size by 20% has a far larger impact and needs much more reconsideration than the one-off reindexing that would be needed to upgrade.
@cdecker For adding new opcodes as a softfork, your opcode may have _no_ affect at all on the stack. It can't even pop the signature it processes. If it makes any changes at all, anyone can create a script that inspects the top stack item after the opcode and fail if it isn't the opcode's expected result. By changing the stack, such a script would go from invalid to valid, which is a hard fork.
I don't think I follow: since we use normalized transaction IDs in the signing and checking phase, and legacy transaction IDs at network level, we will always have to keep around both versions of the transaction ID (until all outputs are spent at which point both can be dropped along with the remainder of CCoins). Computing the normalized transaction IDs for existing outputs therefore would just increase  the number of normalized transaction IDs we have to track.

The fact that people upgrading after the first v2 transactions appear have to rescan part of the blockchain is bad, but it only affects people that did not upgrade in time, which hopefully will be a minority, unlike forcing a rescan on everybody.
@cdecker Sure, so use versioning to prevent the separate ntxid for old transactions. It complicates the logic a bit more, but you prevent the instant 20% blowup and requirement for reindexing when upgrading before this BIP takes effect (though if a miner lets in a v2 transaction beforehand, we're all screwed...).

By ""define normalized txids recursively"" I just mean ultimately using prevout's ntxids in the computation of spending ntxids, not whether this would be done for all of history too.
Ah ok, sure I agree that when computing a transaction's normalized transaction ID we should also replace any prevout hash in the inputs with the normalized version, I will amend the draft to include this and update my implementation to reflect this. I did not specify a way to activate the soft-fork on purpose so we can deploy this in parallel with other changes, but hopefully we can avoid having v2 transactions being confirmed until we have locked in the changes.

So mimicking OP_CHECKSIG or OP_CHECKMULTISIG is not an option, meaning that the last value pushed on the stack (the flags for OP_CHECKSIGEX) is on the top of the stack. Will non-updated clients interpret this as success, even though it has more than one element on the stack? If so we can simply make the SCRIPT_CHECKSIG_VERIFY flag mandatory in order to avoid having OP_0/false on top of the stack.
If the top element on the stack is nonzero at the end of execution, it is succesful.

A scriptSig of ""[pubkey] OP_CHECKSIGVERIFY_NORMALIZED"" with scriptPubKey ""[sig]"" would result in a stack of:
- Pre-fork with valid sig: ""[sig] [pubkey]"" (success)
- Pre-fork with invalid sig: ""[sig] [pubkey]"" (success)
- Post-fork with valid sig: ""[sig] [pubkey]"" (success)
- Post-fork with invalid sig: fails at execution of the VERIFY, and doesn't reach the end (failure)

So that's exactly the semantics you'd want.
Great, thanks for the clarification, so I think making the SCRIPT_CHECKSIGEX_VERIFY flag mandatory is what we'd want in this case.

Would you prefer to re-use two NOPs and implement the normalized singlesig and the multisig as separate opcodes or is the parameterized version to be preferred? My main motivation was that I don't want to use 4 opcodes (verify/non-verify & singlesig/multisig), but if we lose the flexibility of deciding whether we are doing a multisig based on the flags anyway it could be done using two opcodes.

I still have a preference for the flags since it allows us to introduce more flags in the future and NOPs are pretty rare, so keeping as many as possible free for the future might be better.
Single-sig could be done as just 1-of-1 multisig (at the cost of two extra bytes).

And if we're worried about extra bytes, then we should just skip to Schnorr signatures with normalized txids (which I think Elements Alpha already has....)
Agreed, reducing singlesig to 1-of-1 is a possibility, just wanted to keep the change as small and uncontroversial as possible. Same goes for Schnorr, which would be nice to implement, but I don't trust my crypto skills to implement it :-)

That being said, Schnorr would be one of the things that can be added as a flag to OP_CHECKSIGEX, so this might be a point to keep the parameterized opcode over having a special opcode for every checksig operation.
@gavinandresen +1 for Schnorr signatures

@cdecker The code for Schnorr signatures is done in [Element's Alpha](https://github.com/ElementsProject/elements) (which also has normalised txids)
+1 for Schnorr signatures
+1 for singlesig = 1-of-1 multisig

The bitcoin/secp256k1 repo, which is vendorized into bitcoin, contains all the necessary code to enable creating and checking Schnorr signatures. I quite like the idea of enabling this signature scheme since we are touching a lot of signing code already with this PR and it would simply be swapping in the signing and checking code.

Merging singlesig and multisig, so that singlesig is simply a 1-of-1, is also nice since it reduces the number of separate cases we have to treat. In addition Schnorr trivially allows m-of-m by summing up the public keys, resulting in a combined pubkey, and summing up the signatures into a comined sig, then the combined sig is a valid signature for the combined pubkey. So we can manage and combine m-of-m externally to bitcoin-core.

m-of-n could continue using a list of pubkeys and signatures (with the addition of a bitmap for which pubkeys were used when signing), until a better scheme is implemented.

Since we now handle a lot fewer cases (verify is mandatory, singlesig = multisig) it seems natural to drop the flags argument and replace it with a simple version integer. This way we still group all future signature checking opcodes by replacing a single OP_NOP, but the semantics are clearer: if the version is higher than what I support I just treat the checksig op as an OP_NOP, reestablishing the current softfork semantics. Version 1 would use Schnorr signatures and normalization.
I just fixed a few minor things and applied the changes we discussed:
- Using a simple version flag that indicates what ruleset to use: allows us to group future signature checking opcodes without using a nop, and it is way simpler than having flags, this way we treat unknown versions as nops and maintain softfork semantics.
- The first ruleset (version=1) uses normalized transaction IDs and Schnorr signatures.
- Adding new standard multisig format for both m-of-n and 1-of-1 as proposed by Gavin, it's not a huge overhead and simplifies things. I'd like to defer more complex scenarios to future BIPs and keep this one simple.

Since there have been no deal-breaking comments and most of the people commenting seem to agree that this proposal is useful I'd like to join @luke-jr in asking @gmaxwell to assign a BIP number :-)

Open questions:
- Maybe we could lead the m-of-n sigscript with a bitmap indicating which keys were used? Currently we have to check combinations if I'm not mistaken.
- Is the grouping of future signature checking opcodes with a version desired at all, or should I simply redefine OP_NOP4 as Schnorr + normalized without the option to do future versions? I quite like the grouping but I'm open for suggestions.

I gave merging secp256k1 into my dev branch a shot, but it broke far too much for me to feel comfortable fixing it and not introduce bugs, I'll therefore keep ECDSA in my experimental implementation for now, and let @sipa do the merging, he knows best :-)
FWIW, I consider the issues I pointed out on the mailing list to be ""deal-breaking"" in terms of cost/benefit. (Not that you can't still be assigned a BIP number for this despite that.)
Checking combinations is not good as it makes batch validation impossible. No signature should be allowed to fail. My recommendation is that for multiple pubkey inputs there must be the same number of signature inputs, but signatures should be required to be empty (and so only take one byte) if not being used, or otherwise pass verification.

I don't understand why luke's alternative proposal that avoids increasing the UTXO set size by 20%+ doesn't seem to have been given consideration. As it stands I would oppose this proposal in Bitcoin Core and in the Bitcoin network due to the apparently avoidable irreversibly increase in the UTXO set size.

This can use BIP130.
Yep, checking combinations is awful and we can avoid it either by having empty sigs signalling that we should skip this check or by having a bitmap telling us which pubkeys from the script pubkey to use.

I quite like the alternative proposal, which would void any need to do normalization in the first place and basically implement segregated witnesses, however as you also pointed out on the mailing list there is simply no clean way to relaying the witnesses without breaking old clients. I have been discussing this with a few more people and simply couldn't come up with a good way to implement it. The reason it is not in this proposal is that the proposal is implemented and does work, while with the alternative proposal I'm not even sure there is a good solution that does not break everything.

For those who don't want to wade through the mailing list: the alternative proposal by @luke-jr and @gmaxwell would define the opcode in such a way that a transaction is accompanied with an external script (segregated witness) that is not part of the transaction itself. The checksig opcode would require the scriptsig to be empty, hence the transaction would already be normalized. Then we would execute the external script, the scriptsig (which is empty) and the script pubkey so that we get normal execution semantics.
The problem is that it is difficult to tell not-upgraded clients that they should now also relay the external script along with the transactions itself.

If there is a workable solution I'm more than happy to amend this proposal and include it.
IMO, at the very least, something this expensive should completely fix malleability, which this BIP does not do. Furthermore, this BIP does not disclose its shortcomings.

In any case, these discussions belong on the mailing list, _not_ on this pull request, which only needs the finishing touch of filling in the assigned BIP number to be merged.
Agreed, moving the discussion back to the mailing list. I'd be thrilled if we can get the relaying of segregated witnesses working, that would solve all my problems and be a great improvement to the protocol.
uhh... just merged #221 and realised that also has BIP 130 assigned. ping @gmaxwell :/
@luke-jr ping, the PR title still mentions bip 130
Did I just un-assign gmaxwell? How did that happen? 
@afk11 Probably internal to GitHub, since gmaxwell is no longer a valid option for assignments.
","> The normalized transaction ID is then computed as the <code>SHA 256</code> hash

This should be double hash, as per the implementation https://github.com/bitcoin/bitcoin/commit/5f4bd6e22cb7e8ba073207316a83d2ef7ca4bd71#diff-02ae369ce5b03ca498fdf66921b00e0bR76
Right you are, it's a sad day when you can't read your own code anymore :-)

Although, would it maybe be better to change the implementation, to keep the ID computation in sync with how it is currently done for legacy transaction IDs?
Everything is double sha256()
optin -> opt-in
What's the impact on bloom filters? Will version 3 txns still match existing filters?
I think isn't no good to mention MtGox here. It's entirely unclear how the coins were stolen, and who knows maybe they were never stolen?
Agree. There are plenty of better reasons for normalizations ignoring that.
Will be removed :-)
There is no change for bloomfilters in that we maintain the existing semantics: if a bloomfilter matches a transaction that is modified in flight it might not match the modified transaction and it may miss future transactions building on it. We could add the normalized outpoint to the bloomfilter as well to ensure that we start forwarding modified transactions and transactions dependent on modified transactions as well, but that might be better suited to a separate spec.
I was also thinking about the nFlags feature, which auto-adds to the filter as matches are detected. I think BLOOM_UPDATE_NONE and BLOOM_UPDATE_ALL are still pretty clearly defined in the context of this BIP, but BLOOM_UPDATE_P2PUBKEY_ONLY could probably need some update or companion.
"
MarcoPon,202,New BIP,BIP 122: URI scheme for Blockchain references / exploration,closed,2016-01-08 17:46:02,"New BIP: URI scheme for Blockchain references / exploration (as discussed on bitcoin-dev mailing list). Trying to follow what @gmaxwell recently proposed on bitcoin-dev, for proposing a new BIP and obtaining a number. But I'm not so used to collaboration via Github, so apologies in advance for any ""bitcointiquette"" mistakes.
",https://github.com/bitcoin/bips/pull/202,"['README.mediawiki', 'bip-MarcoPon-BlockchainURI.mediawiki', 'bip-MarcoPon-BlockchainURI/chainid.png']",2016-01-08T17:46:02Z,,"['jtimon', 'maaku', 'afk11', 'btcdrak', 'amacneil', 'luke-jr']","Please:
1. Add a copyright section per BIP 1
2. Tag gmaxwell (use the @ symbol before his name) to get a BIP number assigned.
3. Update README.mediawiki
Will do! Thanks for the assistance.
You forgot step 2 :P
Oh! I added the @ tag editing the commit description above: wasn't that enough? I'll add it here for good measure then! :) @gmaxwell 
rebased to be up-to-date with the base branch.
Might be good to squash your commits, a little.
@btcdrak OK, I hope I have done it right (not very familiar with Git). Let me know if I messed up things.
Are there any examples of native block explorers which could even handle these URIs?

Browser support for letting websites register to handle URIs is pretty terrible, so I don't see this gaining much adoption if it's targeted purely at browsers. 
Uhm... I'm sure there's a lot of people that have associate the bitcoin: URI with Blockchain.info website, for example. Plus, probably in the future a lot of new tools may come out, as Blockchain references may be used more for proofs of various kind.
Add some simple demo / test here: https://github.com/MarcoPon/blockchain-exploration
OK, will update the wording, and maybe add a scheme. BTW, for the chain id, how about the option of using short hashes (like in Git)?
Thank you for choosing to formally define the chain ID here.
About using short hashes, I imagined an attacker producing a genesis block that matches the short version of a real chain to falsify a proof in for a smart contract or something (2wp shouldn't need to refer to the genesis block, the block previous to the one when the first coins are locked in to the pegged sidechain should be enough). I don't know, there may never be a use case where the full 256 bits are needed, but I would feel better if the chain ID is defined like that.
That doesn't mean that for this particular use case shorter versions of chain ID are used instead of the full ID (or optionally allowed in addition to the full ID).
@MarcoPon feel free to ping me for review on new PRs with further improvements or moving it from its draft state.
@jtimon Thank you! I'm trying to add a proper ABNF spec for the URI, then I think it should be OK. Will report back in the next few days.
","Maybe it would be worth to clarify that when this is not provided, the block explorer will default to some value. Assuming they want to default to the main bitcoin chain, they will usually default to `000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f`.
Also the link seems broken. An updated version of that commit is contained in #6382, in https://github.com/jtimon/bitcoin/commit/599019a9127abb1ada30eaf2c1e7b38e5d4239ec (but that commit will need to be rebased again as 6382's sub-PRs get merged/closed). It was once opened independently as #6230 but it is closed for now.
Third person, s/point/points, s/look/looks.
@jtimon Thanks for your remarks/help. In your opinion, what could be a better way to provide a reference to ""where those hashes come out"", for that ""(see $something)"" part?. The direct GitHub reference is indeed probably not the best suited one. 
Copied from ml (awaiting moderation):

Yes, sorry about the link. I guess you can point to #6230 . I can
rebase it if needed but I would close it again because I don't want to
have too many things from #6382 opened at the same time (is noisy and
worse for review). My plan was to not open it independently at least
until after #6907 (and actually after 0.12 assuming #6907 gets in by
0.12). But then I would maybe open a new one and reference the old one
rather than reopening #6230 (which tends to be confusing).
I'm not really sure what's the best answer here...but #6382 is
certainly going to need rebase and the link will be broken again.
Maybe one answer is to copy some text from #6230 or the commit and add
it directly to the BIP instead of referencing to that commit (which
will be, at least until #6907 is merged, a moving target).
There's a flaw with the `//chain` genesis block to specific alt chains. Not all altcoins have a unique genesis block. For example, Feathercoin has the same genesis block as Litecoin and was a deliberate mid-chain fork. If Bitcoin were to experience a chain split into two coins, the same would be true.
Maybe in those instance the hash of the relevant first block after the fork could be used? In a sense that would be a kind of new ""genesis"" for that chain. 
That would work, but you'll have to specify it explicitly in the spec.
OK, perfect.
Can you add the following?

Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010712.html
> Maybe in those instance the hash of the relevant first block after the fork could be used? 

I think this is the only solution that makes sense.
I think it would be good to define this hash as the chain ID to maybe used that notion in other BIPs or documentation. 
This is not in chainparams.cpp (yet?), and judging from how long the requirement of introducing a factory is getting ( #6907 is just my last attempt, see #5229 for an older failed attempt), by the time something like https://github.com/jtimon/bitcoin/commit/160d874dfdb53c71a07b1bf7bdd0dab571dabefa is merged (hopefully this decade), we will probably be using c++11 (or c++14) and that boost::assign::map_list_of won't have ever touched chainparams.cpp.
Maybe you can refer to that commit directly, I plan to close #6382 and replace it with something that introduces a new chain without depending on #6625 (which I have finally decided to abandon), so we won't have the ""this branch will be constantly rebased"" problem anymore (and #6625 was the part of #6382 that needed rebase more often).
Maybe @laanwj and/or @sipa have some other suggestion?
Sure!
So the two periods may be changed into: ""(optional) to uniquely point to a specific chain, the corresponding chain ID is used (hash of genesis block, or first block after fork for forked chains)."" ?
You're just looking for a hash that will be unique, so really you need either the genesis or the ""fork genesis"" hash. If later feathercoin was to fork again, the new coin would be the next fork hash. This way you have a unique identifier for each chain. I suggest keeping exactly the same format, but just explain what `//chain` means, i.e. it is usually the genesis hash, but it could also be a fork hash (citing feathercoin as the example).
Yes, I already changed it to explain that, I think. 
ACK on defining the chain ID as ""the first block hash that uniquely identifies the chain, usually the hash of the genesis block, but it may be the first incompatible block for forked chains"" or something of the sort. I just think it would be nice to be able to link to this BIP when someone asks ""what do you mean the chain ID?"".
I'm fine with @MarcoPon's wording too, I'm not sure what's @btcdrak's concern with defining the chain ID (if any).
I would drop `In principle some kind of alias/mnemonic could also be used, but that is out of the scope of this BIP, and maybe could be developed in another subsequent one.` it's not relevant to the specification.
> For forked chains, the hash of the relevant first block after fork is used.

Drop ""relevant"". It is specifically the first block that diverges from the original chain onto the new fork. I would mention Feathercoin's checkpoint forking from Litecoin as an example.
Drop the ""In principle ... another subsequent one."" text. It only confuses the issue.
What about querying by `scriptPubKey`?
I used the items generally linked / used on block explorers, but I suppose it could be added. BTW, how about other items that may become relevant when segwit is implemented?
Explorers haven't offered search by `scriptPubKey` yet. It would be useful to some I'm sure, though even Core declined a PR for arbitrary scriptPubKey indexing.  
"
drwasho,198,New BIP,BIP 107: Dynamic block size proposal,closed,2016-01-08 17:43:00,"- 2 phase plan for increasing the block size
- Will update with BIP number if/when assigned one
",https://github.com/bitcoin/bips/pull/198,['dynamicblocksize.mediawiki'],2016-01-08T17:43:00Z,,"['luke-jr', 'andre-amorim', 'hoffmabc']","@drwasho Please tag @gmaxwell for a BIP number assignment.
Thanks @luke-jr 

@gmaxwell could you please assign this with a BIP number? Thanks. 
x0

On 20 September 2015 at 00:36, Dr Washington Sanchez <
notifications@github.com> wrote:

> Thanks @luke-jr https://github.com/luke-jr
> 
> @gmaxwell https://github.com/gmaxwell could you please assign this with
> a BIP number? Thanks.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/198#issuecomment-141719649.
What does x0 mean in this context @andre-amorim ?
Thanks @luke-jr , thought this was forgotten :+1: 
@drwasho sorry, Clarification, actually when I read ""Please tag @gmaxwell "" triggered in my mind his gpg/pgp server lookup, and sometimes you need to add x0 'KeyID 0x%k' STDIN, nevermind, I'll to not be impulsive or let race condition in my mind, see like now I'm thinking about mutex lock/unlock = 100 ns  
",
luke-jr,271,Proposed BIP modification,BIP 0001: Change BIP editor to Luke Dashjr,closed,2016-01-08 17:10:54,"@gmaxwell asked that I take over BIP number assignments
",https://github.com/bitcoin/bips/pull/271,"['README.mediawiki', 'bip-0001.mediawiki']",2016-01-08T17:10:54Z,,"['afk11', 'jonasschnelli', 'harding', 'NicolasDorier', 'gmaxwell', 'wtogami', 'CodeShark', 'MarcoFalke', 'btcdrak', 'petertodd', 'greenaddress', 'laanwj', 'jmcorgan', 'fanquake', 'ducdigital', 'jl2012']","ACK
ACK
ACK
ACK
ACK
ACK
ACK
ACK
ACK
ACK
ACK
Would be nice to get a ACK from @gmaxwell
ACK
But yes agree with @jonasschnelli, it looks better if @gmaxwell ACKs this too.
I asked Luke to do this.
ACK
ACK

On Friday, 8 January 2016, GreenAddress notifications@github.com wrote:

> ACK
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/271#issuecomment-169824894.
ACK. Let luke-jr helps Bitcoin Core become
nirvana
",
dcousens,233,Pending acceptance,BIP65: Change to accepted status,closed,2016-01-06 20:40:23,"With https://github.com/bitcoin/bitcoin/pull/6351 merged (and subsequent backport's), it would seem this status is fitting?
",https://github.com/bitcoin/bips/pull/233,['bip-0065.mediawiki'],2016-01-06T20:40:23Z,,"['petertodd', 'luke-jr', 'MarcoFalke']","Definitely too premature now.
@luke-jr I guess I'll just leave this open for when it is then?
Agree with @luke-jr, NACK until it's actually active.
How about now?
ACK 694a073
ACK https://github.com/dcousens/bips/commit/694a073e15577b45fdbd679e43ff8ae76f46b7ba

Note that this isn't final status - that'll come after people are actually using it and we shake out any remaining changes to the text of the BIP.
",
justusranvier,264,,BIP47 clarifications,closed,2015-12-30 17:12:34,"Update explanations to resolve unclear sections, based on recent feedback.
",https://github.com/bitcoin/bips/pull/264,['bip-0047.mediawiki'],2015-12-30T17:12:34Z,,['wizardofozzie'],"Fantastic, thank you @justusranvier I'll chime in if there's anything else which may need clarification, but IMO this is a very promising BIP
",
btcdrak,260,Proposed BIP modification,BIP68: update specification to assume MTP,closed,2015-12-11 07:08:23,"BIP68 and BIP113 will be deployed together which simplifies the specification slightly
",https://github.com/bitcoin/bips/pull/260,['bip-0068.mediawiki'],2015-12-11T07:08:23Z,,"['petertodd', 'afk11', 'NicolasDorier', 'morcos']","ACK
ACK
Well, too bad I did not see that before, it broke completely #6312, which was well reviewed and assumed same MTP policy for both nLockTime and sequence lock time.
@NicolasDorier This was agreed at the IRC meeting. I am leaning for 7184 to replace 6312 in any case.
","I would just say this: "", and ends at the MTP of the previous block.""   and get rid of the ""or  ... BIP113""
""The block produced time is equal to the median-time-past of its pervious block.""
not necessary, but fine.
"
jl2012,254,Proposed BIP modification,Full description of the behavior of OP_CLTV,closed,2015-12-11 07:04:11,"Following the style of BIP112
",https://github.com/bitcoin/bips/pull/254,['bip-0065.mediawiki'],2015-12-11T07:04:11Z,,['petertodd'],"thanks and revised
ACK
","s/stake/stack/
"
petertodd,258,,BIP65 formatting fixes,closed,2015-12-08 09:35:00,,https://github.com/bitcoin/bips/pull/258,['bip-0065.mediawiki'],2015-12-08T09:35:00Z,,,,
jl2012,252,,Corrections with the conditions for script failure,closed,2015-12-07 20:34:40,"Mainly for correcting the typo: and->or
",https://github.com/bitcoin/bips/pull/252,['bip-0112.mediawiki'],2015-12-07T20:34:40Z,,['btcdrak'],"ACK
",
andychase,256,,"BIP-0001 Should be labeled as ""Process"" Type",closed,2015-12-04 11:06:07,"Previously BIP-0001 listed in its header preamble that is was a ""Standards Track""
type proposal. This conflicts with both its own definition of ""Standards Track""
proposal as well as the type listed in PEP-0001 of which BIP-0001 is based on.

Defitions of each type of proposal:

A Standards Track BIP describes any change that affects most or all Bitcoin implementations.

An Informational BIP describes a Bitcoin design issue, or provides general guidelines or information to the Bitcoin community, but does not propose a new feature.

A Process BIP describes a process surrounding Bitcoin, or proposes a change to (or an event in) a process.
Specifically: ""Any meta-BIP is also considered a Process BIP.""

Based on these definitions BIP-0001 should have always been labeled as a ""Process"" BIP and this patch corrects this.
",https://github.com/bitcoin/bips/pull/256,"['README.mediawiki', 'bip-0001.mediawiki']",2015-12-04T11:06:07Z,,,"Continuation of #184
",
laanwj,255,,Change BIP1 to status Active,closed,2015-12-02 11:30:07,"Make it consistent. From the text: ""Some Informational and Process BIPs may also have a status of ""Active"" if they are never meant to be completed. E.g. BIP 1 (this BIP).""
",https://github.com/bitcoin/bips/pull/255,['bip-0001.mediawiki'],2015-12-02T11:30:07Z,,"['harding', 'btcdrak']","ACK.
ACK
",
btcdrak,245,Proposed BIP modification,BIP68: Simplify language and update for current implementation,closed,2015-11-28 22:33:57,"Update according to bitcoin/bitcoin#6312 implementation
",https://github.com/bitcoin/bips/pull/245,"['README.mediawiki', 'bip-0068.mediawiki', 'bip-0068/encoding.png']",2015-11-28T22:33:57Z,,"['maaku', 'CodeShark', 'rustyrussell', 'morcos', 'ajtowns', 'jmcorgan', 'NicolasDorier', 'instagibbs', 'luke-jr']","I took a quick skim, the example code in Compatibility is still referring to the old specification.

My biggest outstanding concern is still with this flag at (1<<22).  I'd like to make sure a few other people take a look at it and agree it makes sense.  I think the one justification @maaku had for this is it would allow alternative coins/chains with faster block times to have finer granularity than 512 seconds and work out of the box.   I'm not sure how much weight should be given to that, but on the other hand, it may be bike shedding at this point as to where exactly we put the flag and that may be a perfectly reasonable choice.   So concept ACK from me.
@morcos Thanks for taking a look. The compatibility section has been updated now. I wasnt sure if I should mention the granularity issue in relation to shorter block intervals and sidechains because it is not directly related to Bitcoin but dont have a problem adding something it is deemed important.

Overall I have tried to explain rationale as much as possible and make the BIP clearer.

The main rationale about (1<<22) I believe was taking into consideration 3 byte pushdata when using an opcode like OP_CSV. There is a paragraph to explain this. This comes from the discussion here http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/15#l1444928045.0

And updated in this BIP to read 

""Note (1 << 22) was chosen as the flag bit because it's the highest bit of a 3 byte pushdata which is a signed integer when used in conjunction with OP_CHECKSEQUENCEVERIFY; specifically 3 bytes consisting of 1 bit as the sign, 1 bit for the relative lock-time type flag, and 22 bits for the relative lock-time encoding.""
utACK
Added an encoding diagram for clarity.
@btcdrak Beautiful! So much more clear than before. ACK
The (1<<22) rationale is still a bit confusing to me... Maybe something like:

""The flag bit (1<<22) was chosen as the highest bit in a positive 3-byte signed integer. This allows its value to be constructed in bitcoin scripts for use with OP_CHECKSEQUENCEVERIFY (BIP 112), either by setting it directly in a straighforward manner with a 3-byte PUSHDATA, or calculating it using signed arithmetic operators.""

would be better?

Otherwise, utACK fwiw.
@ajtowns I simplified the sentence. Thanks.
Sounds good to me, ACK
Carefully went through the latest draft of the BIP, and checked the related sections in the Core pull, especially LockTime(). Description and code lines up.
Ack.  This is a nice, clear change, and meets my understanding of consensus last it was discussed.
This needs an ACK from @maaku
@luke-jr As you are aware @maaku stepped down from championing the proposals and handed them over to me. Its unfair to expect him to ACK this, although it would be nice if he did.

bitcoin/bitcoin#6312 is the implementation. The current master branch of BIP68 now **does not match** the reference implementation which the BIP points to. This is causing serious confusion. A total of three people in the last week have come asking me questions about bitcoin/bitcoin#6312 because they read the BIP and it doesn't seem to match the implementation at bitcoin/bitcoin#6312.

I might add that the implementation was updated by @maaku before he left and handed this over, however I forgot to update the text.

These modifications have been checked by @ajtowns @rustyrussell @instagibbs and @CodeShark, surely those are enough ACKs :-P

Even if I had made some error or omission after the review of the people above, it's still better than having a BIP text which is completely different to the reference implementation.
@btcdrak This PR includes the change of champion, so the current champion needs to ACK it. (I also have only heard of the handover from third-parties, so I don't even have personal first-hand knowledge of this.)
@luke-jr It is unfortunate that the conversations were in #bitcoin-core-dev a few days before we got channel logging setup iirc.
I unconditionally ACK the new list of champions.

Separately, having read the new text I suggest that acronyms be expanded. There's a couple of points where acronyms like RTL and MTP are used, even without expansion on first use. Standards should be clear and unambiguous, even if that means a little verbosity.
","drop the parenthesis, just add ""in block height or time"" to the sentence
"
bitstein,249,Proposed BIP modification,BIP47: fix typo,closed,2015-11-28 20:46:46,,https://github.com/bitcoin/bips/pull/249,['bip-0047.mediawiki'],2015-11-28T20:46:46Z,,"['afk11', 'kanzure', 'luke-jr', 'justusranvier']","ACK.
ACK
@justusranvier
ACK
",
jwilkins,238,New BIP,Bip 103 squashed,closed,2015-11-28 19:16:55,"Better pull request.
",https://github.com/bitcoin/bips/pull/238,"['README.mediawiki', 'bip-0103.mediawiki']",2015-11-28T19:16:55Z,,"['sipa', 'luke-jr']","Please just revise the existing PR in the future.

@sipa ACK?
ACK
",
btcdrak,248,Proposed BIP modification,BIP112: Update document to match implementation,closed,2015-11-28 19:14:04,"For https://github.com/bitcoin/bitcoin/pull/6564
",https://github.com/bitcoin/bips/pull/248,['bip-0112.mediawiki'],2015-11-28T19:14:04Z,,['NicolasDorier'],"Not good, remove:

```
Otherwise, script execution will continue as if a NOP had been executed.
```

This is not true, if one of those conditions are true, then script fail. If none of them are true, then processing will continue as defined in this BIP.

The only condition this is considered a NOP is if SCRIPT_VERIFY_CHECKSEQUENCEVERIFY flag is disabled. Which is not worth mentioning in the BIP.
@NicolasDorier This is the same language used in BIP65. If the script does not fail, script execution continues as if a NOP had been executed.
Ok I see. Well, it is strange to say ""executed as a NOP"" as opposed to ""the stack is not affected by this operation"".
""Executed as NOP"" for me mean no verification for failure is even made.

It does not stop me from understanding just finding it weird. Not a stopper though, if nobody complains let's keep it like that.
ACK.

I would replace ""Otherwise, script execution will continue as if a NOP had been executed."" with ""OP_CSV has no effect on the stack"". But not worth complaining too much about if I am the only one to think so.
",
CodeShark,243,Proposed BIP modification,BIP-0112 minor revision to text.,closed,2015-11-26 00:27:06,"Clarification on retroactive invalidation and improvement to language.
",https://github.com/bitcoin/bips/pull/243,['bip-0112.mediawiki'],2015-11-26T00:27:06Z,,"['btcdrak', 'afk11']","ACK
ACK
",
sipa,244,,Mark BIP62 as withdrawn,closed,2015-11-17 21:39:55,"All of BIP62's (including the only-new-transactions) are currently enforced
as standardness rules, but it seems hard to push it further. Every new type
of complex transaction may require new extra rules, and some important types
of malleability cannot be addressed by it (for example, a single participant
in a multisig spend creating a new signature with a different nonce).
It seems wiser to pursue normalized txid or segregated witness-based
solutions, which do solve this problem more fundamentally.
",https://github.com/bitcoin/bips/pull/244,"['README.mediawiki', 'bip-0062.mediawiki']",2015-11-17T21:39:55Z,,"['btcdrak', 'luke-jr']","Could you update the index as well?
Done.
:+1: 
",
btcdrak,195,Proposed BIP modification,BIP-0001: Updates,closed,2015-11-15 22:57:36,"Clarified about BIP number assignment (not to self-assign, how numbers get assigned specifically).
",https://github.com/bitcoin/bips/pull/195,['bip-0001.mediawiki'],2015-11-15T22:57:36Z,,"['gmaxwell', 'andre-amorim', 'sipa', 'maraoz', 'andychase', 'luke-jr', 'laanwj']","There's a lot of changes here. I suggest starting a new BIP intended to supercede BIP 1.
There aren't lots of changes! We're simply emphasising the don't self assign numbers rule (which needs to be written down because it's a constant problem for @gmaxwell), and changing how numbers are assigned (not by email but by requesting in a the pull, because it's more efficient and auditable).

The point about WIP is totally optional because it is a departure from the norm not to have some final polishing peer review in pull requests. It's more of a common sense addition, not a change in rules.
I think this should be a different BIP that overrides BIP 1. We shouldn't
update old BIPs because we want their meaning to change (beyond extra
clarification, bugfixes, examples, references, ...).
Are we seriously going to require a new BIP for a small clarification of details or changing allocation of BIP numbers from email to PR? 

Especially BIP-0001 is just a ruleset for how to manage BIPs in the first place.
It's a change to the semantics. I don't see why we should change an existing BIP for that.
The first BIP are the operating procedures for BIPs, unless there was some substantial change, like to the workflow (as I suggested on the ML), I really dont understand how the changes in this PR warrant a new BIP. It's incredibly wasteful - we're not writing legal statues... and these changes could help reduce some friction we've had because it's not explicitly written down and people keep doing things like self assign numbers.

We've been operating with ""dont self assign numbers"" for as long as I can remember. how is that a change of semantics? @gmaxwell has been plagued by people self assigning numbers, it needs to be documented surely: and documented or not, those are the rules we've been operating under.

Whether BIPs are assigned by pestering the BIP maintainer over email/IRC is requested in the body of the pull request is also such a small change it seems bizarre. Additionally, ever since we moved to Github, people have used PRs as a was to do final review (usually smaller nit, but sometimes larger ones). It works because it's more collaborative than the mailing list. Again it's not a change, it's how we have been operating, I am simply documenting the status quo.
Here's another example of something that went away when we migrated from the wiki to github

""If the BIP isn't ready, the editor will send it back to the author for revision, with specific instructions.""

This isn't happening anymore. Authors write their BIPs, discuss on ML/IRC/privately and submit a PR when they have had enough feedback and feel it's ready. Any nits are dealt with in the pull request. 
I have removed superfluous changes. How about this?
ACK
@sipa I agree with that in general, but for the meta-bip I think it makes practical sense to make an exception there:
- People will go to BIP1 to learn about writing BIPs. Having it self-contained is a plus
- There are no implementations of BIP1 - unless you are sneaky and count the other BIPs, but that'd only matter if there are big structural changes which would 'invalidate' the other BIPs by BIP1
@sipa @luke-jr 

This BIP actually lists the criterion for replace vs edit right inside it:

> BIPs can also be superseded by a different BIP, rendering the original obsolete. This is intended for Informational BIPs, where version 2 of an API can replace version 1.

If we completely revamped the BIP process it might make sense to allocate a new number so the change can be advertised more clearly but in this case the minor change in process should be edited in place to prevent confusion and fragmentation.

Also a ""change log"" should be added at the top like [is done in BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) to preserve history.
","We shouldn't require (nor encourage) public domain, as some jurisdictions don't recognise it as valid...
This clause don't fit where you put it...
If you dont require public domain then you have to add an additional requirement of permissive licensing, e.g. a specific CC license.
Review was supposed to occur on the Bitcoin-Development ML before being submitted as a PR. Once it's a PR, it should be ready for merging immediately (pending author ACK, if submitted by non-author).

If we want to encourage PR discussion, adding a flag like [WIP] makes sense.
Such a requirement is already in BIP 1.
I agree that's the ideal (to be ready for immediate merging), but in practice the meat gets fleshed out on the mailing list and then further peer review occurs in the PR. People are not looking for nits on the list, nor is it easy to track small nits on the mailing list. Github makes collaborative polishing a thing and we should imo, make use of it. Put another way, people are used to polishing in pull requests.
Ah yes, I missed that.

BIPs maintainers should not merge any BIP pull-requests unless that requirement is met. 
I have a feeling if someone is reading this BIP they are not the type of person that self-assigns.

The readme is the best place for this notice and it's already there (though should be formatted differently).
~~Or not? I thought there was a notice in the readme but I guess I just imagined it.~~ Figured it out. It's in the raw source but doesn't show up on Github due to the way it's formatted: `<!-- IMPORTANT!  See the instructions at the top of this page, do NOT JUST add BIPs here! -->`

In that case I believe the notice should go in the readme after the numbers in bold. That's where people look to see that's free so you [catch them just in time](http://blog.codinghorror.com/the-just-in-time-theory/): ""a simple reminder at the time of the temptation is usually all it takes for people to suddenly 'remember' their honesty.""
can the example  be changed to bip-johndoe-infinitebitcoins or the like? (I prefer to include the name as duplicate work sometimes gets merged as part of the pre-assignment)
PR ? who come up with that such reduction ?
"
petertodd,241,,BIP65 wording fixes,closed,2015-11-13 17:45:42,"Fix various wording issues, like obsolete terms, typos, unclear wording etc.
",https://github.com/bitcoin/bips/pull/241,['bip-0065.mediawiki'],2015-11-13T17:45:42Z,,['jgarzik'],"ACK
@jgarzik Thanks!

Be nice to get this merged relatively quickly, as I'm sure a ton of people are reading this BIP right now! :) I'd really prefer people get the terminology right, as this BIP used some old terms.
",
jtimon,237,,Bip99: Improvements,closed,2015-11-13 07:17:28,"Continues #181, including some things that were left out by accident.
",https://github.com/bitcoin/bips/pull/237,"['README.mediawiki', 'bip-0099.mediawiki']",2015-11-13T07:17:28Z,,['btcdrak'],"Just noticed your email address is in square brackets whereas the convention is to use angle brackets `<example@example.com>`.

Also it is customary to put the part in the header "" Post-History: http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html"" down in the references section of the document.
Corrected the email. But BIP1 says ""Post-History"" is an optional field in the ""BIP Header Preamble"", so I'll leave it there.
",
6londe,240,Proposed BIP modification,typo fixed,closed,2015-11-13 06:41:01,"trivial typo fixed
",https://github.com/bitcoin/bips/pull/240,['bip-0022.mediawiki'],2015-11-13T06:41:01Z,,,,
sdaftuar,221,New BIP,"New BIP for ""sendheaders"" p2p message",closed,2015-11-07 06:23:32,"This is in substantially the same form as proposed on the mailing list and discussed on IRC.  I'll update this pull after a BIP number is assigned.

@theuni -- perhaps we can discuss any outstanding concerns with this approach in this PR?
",https://github.com/bitcoin/bips/pull/221,"['README.mediawiki', 'bip-0130.mediawiki']",2015-11-07T06:23:32Z,,"['gmaxwell', 'btcdrak', 'morcos', 'theuni']","@sdaftuar Right away, I'll mention that I don't consider my issues with the BIP as-is to be blockers. I don't wish to put the brakes on this.

The approach here is fine by me (though I would prefer to see something a bit more abstract, to help with new capabilities/preferences in the future).

I would very much prefer, though, for tightened requirements on when the message can be sent. It's true that the current protocol is quite stateful already, but I don't see that as a good reason to keep piling on.

How about requiring that it's sent _before_ ""verack""? That would allow us to add new similar commands in the future, as it would effectively make ""verack"" mean ""i'm done setting up the connection now"".
@theuni We moved off this conversation during the meeting before I really understood why there was all this concern around statefulness.  First, I mostly view this message as advisory, you certainly don't have to send direct headers if someone sends you this message and in some cases you won't.  Second, I don't know why we want to preclude more intelligent logic in the future on when this is turned on and when it isn't.  It's entirely possible you'd want to turn this on only for a few of your peers who tend to be the first to announce you things and save a little bit of bandwidth from other peers who will stay in inv mode.  And maybe you dynamically adjust that as you go.  I'm not arguing we should or need to do that now, or that its definitely a good idea, but I just don't know why we would want to preclude it.
@morcos by that logic you'd need a way to disable it too, no? The logic couldn't be all that intelligent if it couldn't be changed back.

I'm arguing that since it already can't be changed, it may-as-well just be a session property.
@theuni sure and maybe we'd add a way to disable in the future.  anyway, i don't really feel strongly..  i just wanted to understand the reasoning.  
@morcos my aim is to cut down on the amount of communication necessary between layers. If a node's property can considered immutable for the life of the connection, it doesn't have to poll for changes and be prepared to cope with them. That eases work for implementations significantly.

As mentioned, I don't wish for this to hold up the BIP in any significant way. But since there seems to be a consensus at the moment about not allowing this to be disabled once set, I think it makes sense to discuss whether we should take that a step further and handle it as part of the initial handshake so that it may be considered immutable. If there's a compelling reason not to, I'll drop the request.
Few points from our IRC conversation last week:

Agreed that it would be nice in theory for capabilities like this to be exchanged at the time a connection is initiated (eg by sending in between version and verack).  However from discussing with others on IRC, such an approach would be problematic for existing software which doesn't expect anything before a verack, so this seems like a non-starter.

It would also be nice in theory to have a generic ""capabilities"" message which would include all flags such as this one.  However, coordinating a change to an existing message in the future when we wanted to add a new flag would presumably run into similar difficulties as the suggestion to merely add this flag to the version message.  And I am not presently aware of any future use case at this time anyway...  So my inclination is to continue with the proposal as drafted.

After discussion with @theuni, I added some language to the BIP (""Additional constraints"") to make it clear that how implementations choose to support this message can be subject to whatever choices those implementors make.  That is, this is completely optional.

@gmaxwell Can you assign a BIP number?
130.
Thanks @gmaxwell, updated.  Should I also update the README page to include a reference to the BIP as part of this PR?

Also I'm not sure I understand what the criteria is for getting this PR merged.  Anything else I should do here (more mailing list notice etc)?
@sdaftuar updating the README.md is preferred, yes.
Rebased and added a commit that updates the README.
I'd like it in 0.12.
Anything else that needs to be done here?
",
jtimon,181,New BIP,BIP99: Motivation and deployment of consensus rule changes,closed,2015-11-07 06:23:07,"This BIP attempts to classify all possible scenarios for consensus rule changes (soft/hard forks) as well as recommending a deployment path for each of them.

It also contains code proposing a first uncontroversial hardfork that conclusively fixes the timewarp attack: https://github.com/bitcoin/bitcoin/compare/0.11...jtimon:hardfork-timewarp-0.11

The recommended activation conditions for uncontroversial hardforks are still being discussed in http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html

More general discussion about the BIP can still continue in http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html
",https://github.com/bitcoin/bips/pull/181,['bip-0099.mediawiki'],2015-11-07T06:23:07Z,,"['gmaxwell', 'gavinandresen', 'kanzure', 'jwilkins', 'squidicuzz', 'andychase', 'luke-jr']","When there are two or more simultaneous hard-fork chains, transactions that are intended for only one chain may end up on both chains, especially if the transaction does not have inputs that are tainted by only-one-side coinbase transaction outputs. However, the effects of this may be mitigated if everyone was using some sort of opcode that could restrict the transaction to a blockchain where the history included some particular blockhash.... but then there's a payment coordination problem, you'd probably have to update BIP70 to include this feature, etc. What a mess.
An potential attack vector scenario regarding _Schism hardforks_:

If a fork is contested when activated and both resulting chains continue; impassioned and nefarious users may utilize their funds on the chain they oppose to flood the network with spam transactions.  Attackers could also use funds on both chains to double their attack power.  Since both chains should see these transactions and user passions may be high, this has the possibly of resulting in a significant spam attack.

I am not sure how to handle something like this.
It would really help if BIPs related to the current blocksize debate were available in the repo, not just in pull requests. Any chance this and the others can get merged soon?
Jonathan, I'm not sure why that's important: people can just PR to
https://github.com/jtimon/bips/tree/bip-forks in the meantime.

squidicuz sounds like a sensible thing to add to the text (I wonder
where you get that idea from...). an you directly propose changes to
the text by PRing to https://github.com/jtimon/bips/tree/bip-forks ?

On Sun, Aug 23, 2015 at 1:47 AM, Jonathan Wilkins
notifications@github.com wrote:

> It would really help if BIPs related to the current blocksize debate were
> available in the repo, not just in pull requests. Any chance this and the
> others can get merged soon?
> 
> —
> Reply to this email directly or view it on GitHub.
Is this waiting for something for a merge?
IMO this BIP should actually be Process type, since it defines rules for other BIPs to use?
@andychase BIP drafts are not rejected. Merging is a given with approval from the author.
Oh, and don't forget to update README.mediawiki!
@luke-jr ~~I was referring to merging or rejecting/closing these specifically: https://github.com/jtimon/bips/pull/2 https://github.com/jtimon/bips/pull/1~~ edit: merged and good to go
@jtimon, I was talking with Rusty and he mentioned that all soft-forks are actually hard-forks for miners. Perhaps wording to this effect should be included in the soft-fork/hard-fork distinctions.
@jtimon Please add a copyright section, and address @kanzure 's comments (or say you do not intend to make further changes, so I know to merge without them).
@luke-jr added copyright section. I think this still needs more work, and some parts like the recommended deployment methods need more discussion. We can merge it and leave it as a draft and I open another PR with further changes. Or keep changing this one, whatever is preferred.

@reviewers I'm going to switch from block height (which apparently only a couple of persons ) to the block median time, which shares its main advantages height while not having its ""hard to calculate dates"" problem. But in addition to the minimum activation median time, I'm going to maintain the 95% versionbits miner upgrade confirmation for uncontroversial hardforks (because if it's truly uncontroversial and we're expecting 100% of the users to upgrade before the minimum time, I think we can safely expect that also 95% of the miners (who are also users) will upgrade at some point). 

@kanzure I defined both softforks and hardforks and left the term ""unintentional consensus fork"" for unintentional consensus forks regardless of them being softforks or hardforks. I hopefully solved the rest of nits.

@gavinandresen 

> I strongly disagree with ""there will likely.""

Fine, I will s/there will likely be 2 chains/there will be 2 chains/ and, at the same time, be more strict defining the conditions when a schism hardfork happens. I agree that the schism hardfork section needs more work though.

> Jorge's response of ""if there is demand then people will stick with the minority"" is where I take issue

I never claimed to be able to predict whether ""people"" would stick to some particular chain or not, I said that if people stick to a chain and there's demand for the block reward in that chain, there will likely be miners to mine, even if it's just to sell it right away. This has been proven with a myriad of altcoins (including some like Freicoin that people assured me ""no body would ever mine""). If there's demand, offer will likely appear, this is not specific to this market.

> We saw this with the ""Lets stick with 50 BTC"" people around the first bitcoin halving.

Thank you very much! I didn't remember this.
This is an excellent past example of a schism hardfork. If I remember correctly, the fork only lasted a few blocks that time. But from one observation, we cannot infer that all cases will last that long or even that they will have an end at all.

EDIT: if anybody has any links to the inflatacoin schism hardfork, they're more than welcomed!
I could have at least squashed and add it to the readme...
Just noticed that this patch no longer includes the changes made by @instagibbs and I. @jtimon did you force push your repository at some point?

Also this still needs clarification on the type in the preamble.
@luke-jr Also what's the process to get this BIP approved? Is it just a simple majority vote among the core devs? BIP-0001 doesn't specify that process.
@andychase I'll look into it, I merged your changes...
No voting: when I think it's ready I move it from draft (that doesn't mean that the code has to be deployed or that people are forced to use my decinitions or classification though).
@andychase BIP 1 provides an overview of BIP status. Core devs are not particularly relevant in any special/unique way. That being said, I don't know how the status would proceed on this particular BIP. Perhaps someone should bring it up at a Bitcoin development meeting after the draft has reached a more-or-less-final state.
@luke-jr +1 ""after the draft has reached a more-or-less-final state"".
@andychase you were right, I forgot to fetch the version with your changes incorporated and I kept working on a local older version. I've opened #237 with those changes and more improvements (specially in the ""Schism hardforks"" section). 
","nitpick: ""soft-fork"" not ""softfork"". Same comment for hard-fork vs hardfork.
There can be non-intentional hard-forks, as evidenced by the existence of previous chain consensus forking. Non-intentional hard-forks are also not soft-forks, in addition to intentional consensus forks.
There's a post-mortem about the March 2013 fork in [bip50](https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki), perhaps that should be linked or worked into this section?

https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki
`s/bitcoin core/Bitcoin Core/` to make the name more obvious here.
Is `@ArtForz` supposed to be a twitter reference? If so, simply link to the twitter page. We're not going to remember the ""`@` means twitter"" stuff in 15 years.
minor grammar nit: ""that didn't implemented it"" -> ""that didn't implement it""
Somehow I suspect the linuxfoundation mailing list archive will be more permanent or canonical than sourceforge links, so I suggest switching the link to: http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008282.html
word choice nitpick: You might mean ""tough"" (difficult) and not ""though"", although ""though"" could be made to work in this context.
I strongly disagree with ""there will likely.""

There are incredibly strong incentives for people to come to consensus; if they don't, they will lose money (via the mechanism I described on the bitcoin-dev mailing list here: http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011291.html).

Jorge's response of ""if there is demand then people will stick with the minority"" is where I take issue:  I claim that there will NOT be demand, because ~everybody has a limit to how economically irrational they will be.

We saw this with the ""Lets stick with 50 BTC"" people around the first bitcoin halving.

Did you run any of this by an economist who has studied markets that require consensus?
it's supposed to be a github reference.
"
jgarzik,236,,BIP 102: Add miner vote. Fix index.,closed,2015-11-07 06:19:23,"- Fix index, 101 -> 102
- Latest BIP 102 updates:  Remove now-past date.  Replace with miner vote.
",https://github.com/bitcoin/bips/pull/236,"['README.mediawiki', 'bip-0102.mediawiki']",2015-11-07T06:19:23Z,,,,
btcdrak,234,,Add clarification about upper bounds.,closed,2015-11-03 17:17:39,,https://github.com/bitcoin/bips/pull/234,['bip-0105.mediawiki'],2015-11-03T17:17:39Z,,,,
petertodd,229,,BIP65 spv clients,closed,2015-10-27 20:53:26,"Add recommendation that SPV clients validate nVersion deployment rules to prevent the acceptance of invalid blocks after the 95% threshold has been reached.
",https://github.com/bitcoin/bips/pull/229,['bip-0065.mediawiki'],2015-10-27T20:53:26Z,,"['btcdrak', 'harding']","ACK
ACK
",
btcdrak,228,,Add note about not consuming nVersion bits,closed,2015-10-27 20:53:05,,https://github.com/bitcoin/bips/pull/228,['bip-0065.mediawiki'],2015-10-27T20:53:05Z,,['petertodd'],"ACK
",
kallerosenbaum,231,,Bip121 fixes,closed,2015-10-27 20:52:12,,https://github.com/bitcoin/bips/pull/231,['bip-0121.mediawiki'],2015-10-27T20:52:12Z,,,,
btcdrak,227,,Update deployment for BIP65,closed,2015-10-23 16:47:38,"BIP65 is being deployed by IsSuperMajority. Updating this BIP to reflect this fact.
",https://github.com/bitcoin/bips/pull/227,['bip-0065.mediawiki'],2015-10-23T16:47:38Z,,"['petertodd', 'luke-jr']","ACK

Thanks for doing this for me!
","What? I thought the plan was to have nVersion=3 blocks remain valid after this softfork? Otherwise we lose another bit forever...
1) We don't lose another bit.

2) The existing IsSuperMajority() mechanism can't do that safely, as it'd mean the soft-fork could be reversed after the fact. The nVersion bits mechanism needs to record state to do this safely.
For others who might read this...

I was elaborately updated on the rationale on IRC: Essentially the plan is for versionbits to _unburn_ all the lower bits at once by burning a higher one. While it might be nice not to even temporarily burn this one here, the code/testing overhead isn't worth it.
"
CodeShark,192,New BIP,Bip classification,closed,2015-10-23 01:31:38,"Please assign number. BIP123 would be nice.
",https://github.com/bitcoin/bips/pull/192,"['README.mediawiki', 'bip-0123.mediawiki']",2015-10-23T01:31:38Z,,"['gmaxwell', 'btcdrak', 'luke-jr']","123 assigned.
@CodeShark Add to index?
@luke-jr Added. The idea is to add the extra column to the table in the README and remove the table from the BIP document once it's accepted.
","Why repeat the README.md? This is an unnecessary duplication.
Which README.md are you referring to?
meh, your error correction should have inferred my meaning and autocorrected to [README.mediawiki](https://github.com/bitcoin/bips/blob/master/README.mediawiki) :-P
I still don't follow...I don't see any of this stuff spelled out in the document you refer to.
It makes no sense to have a section ""classification of existing BIPs"" when that's a moving target (and already out of date) when your PR could just add the column to the existing README.mediawiki so when it's merged, voilà, and always current. 
The main point was to add a column to that table and set forth specific criteria for assigning BIPs a classification. In the interest of adhering to the BIP process itself, I thought the way to do this was to introduce a new BIP rather than just change the README. Yes, the README is probably the place to ultimately put this info.
Indeed, just because @CodeShark writes a BIP does not mean it is automatically Accepted.
"
jgarzik,173,New BIP,BIP 102: Increase block size limit to 2MB,closed,2015-10-23 01:30:54,"A minimum-increase BIP alternative.
",https://github.com/bitcoin/bips/pull/173,['bip-0102.mediawiki'],2015-10-23T01:30:54Z,,"['btcdrak', 'laanwj']","Needs an index entry as well
ping @jgarzik 
",
kallerosenbaum,200,Proposed BIP modification,Fixed unencoded space character in example,closed,2015-10-23 01:26:04,,https://github.com/bitcoin/bips/pull/200,['bip-0121.mediawiki'],2015-10-23T01:26:04Z,,"['schildbach', 'dabura667', 'luke-jr']","Is there something holding this back?
%20 is fine as well. I'm not sure where the '+' convention comes from, maybe it's just a convention that was never formally standardized.
","The correct way to encode a space is usually '+'
@luke-jr Are there browsers that don't support %20?
Why is '+' a valid encoding for ' ' (space) in bitcoin: URIs? Isn't that a URL encoding thing? I think there is nothing in RFC 3986 about that, nor in BIP21? I think '+' means '+' in RFC 3986.

However '+' is interpreted as space (' ') by most wallets (that I tried), but I do think it's a mistake to do so.
AFAIK '+' is the same style of encoding as ""%20""
I can't find anything in the specifications (BIP21 and RFC 3986) saying that space can be encoded with '+'. Please tell me where I can find that.
"
jonathancross,226,Proposed BIP modification,Spelling fix and small clarification for BIP 120,closed,2015-10-21 06:19:45,"Spelling:
  ""neccesarily"" => ""necessarily""
  ""scipts"" => ""scripts""

One small improvement for clarity:
  ""another"" => ""a different""
",https://github.com/bitcoin/bips/pull/226,['bip-0120.mediawiki'],2015-10-21T06:19:45Z,,"['kallerosenbaum', 'luke-jr']","@kallerosenbaum This needs an ACK from you.
ACK, thank you.
Cheers!
",
jonathancross,225,,Spelling fix.,closed,2015-10-20 14:02:58,"""unneccesarily"" => ""unnecessarily""
",https://github.com/bitcoin/bips/pull/225,['bip-0121.mediawiki'],2015-10-20T14:02:58Z,,,,
justusranvier,220,,Improve ECDH and blinding factor calculations,closed,2015-10-16 20:25:38,"The blinding factor used for notification transactions incorporates and outpoint being spent by the notification transaction.

This ensures that blinding factors will always be unique, even if a user sends a notification transaction to the same recipient multiple times while spending funds from the same address.

Since some common EC libraries have ECDH functions that only return the x value of the resulting point, only use the x value for calculating scalar shared secrets.
",https://github.com/bitcoin/bips/pull/220,['bip-0047.mediawiki'],2015-10-16T20:25:38Z,,,,
zdexter,217,,Fix ambiguous reference to seed value in BIP32 test vectors,closed,2015-10-09 20:39:49,"The test vectors currently reference a ""master"", an ambiguous term with no single meaning in the BIP32 spec. The test vectors should instead reference the seed.
",https://github.com/bitcoin/bips/pull/217,['bip-0032.mediawiki'],2015-10-09T20:39:49Z,,"['btcdrak', 'kanzure', 'luke-jr', 'sipa']","Also, there isn't a contributions guide for minor fixes in this repository, so hopefully this PR is acceptable. It might be helpful to have instructions for things besides BIPs?
ACK, change was discussed here: https://botbot.me/freenode/bitcoin-core-dev/2015-10-09/?msg=51540895&page=5
ACK
ACK
@sipa Should "" RECENT CHANGES:"" at the top be updated?
Luke: it's very minor, I don't really care.
",
maaku,216,,Change reference git repo to the associated pull request.,closed,2015-10-09 00:02:39,,https://github.com/bitcoin/bips/pull/216,['bip-0113.mediawiki'],2015-10-09T00:02:39Z,,['btcdrak'],"ACK
",
maaku,215,,Add in-line description of BIP 68.,closed,2015-10-09 00:02:25,,https://github.com/bitcoin/bips/pull/215,['bip-0113.mediawiki'],2015-10-09T00:02:25Z,,"['btcdrak', 'petertodd']","ACK
ACK
",
maaku,214,,Clarify portions of text & example scripts,closed,2015-10-05 23:45:07,"Also, update git repo to point to the associated pull request.
",https://github.com/bitcoin/bips/pull/214,['bip-0112.mediawiki'],2015-10-05T23:45:07Z,,['btcdrak'],"ACK
",
maaku,213,,BIP-68: Clarify text and code to match current pull request,closed,2015-10-05 23:44:45,"See commit messages.
",https://github.com/bitcoin/bips/pull/213,['bip-0068.mediawiki'],2015-10-05T23:44:45Z,,['btcdrak'],"ACK
",
btcdrak,212,,Update BIP112 examples,closed,2015-10-05 22:12:59,"This PR adds more usecases to the motivation section.
",https://github.com/bitcoin/bips/pull/212,['bip-0112.mediawiki'],2015-10-05T22:12:59Z,,,,
btcdrak,211,,[WIP] Update BIP112,closed,2015-10-04 12:36:02,"This pull request updates BIP112 to the BIP68 and adds more usecase examples.
",https://github.com/bitcoin/bips/pull/211,['bip-0112.mediawiki'],2015-10-04T12:36:02Z,,,,
luke-jr,210,,BIP0062: Add a warning about its undeployable status,closed,2015-10-02 07:40:11,"[Some folks are asking miners to deploy BIP 62](http://blog.coinkite.com/post/130318407326/ongoing-bitcoin-malleability-attack-low-s-high), but it isn't in a deployable state right now...
",https://github.com/bitcoin/bips/pull/210,['bip-0062.mediawiki'],2015-10-02T07:40:11Z,,"['gmaxwell', 'TheBlueMatt']","ACK
ACK.
",
laanwj,208,,Add BIP0009 to index,closed,2015-10-02 01:52:22,"Let's try to make this a requirement before merge. No stealth BIPs :)
",https://github.com/bitcoin/bips/pull/208,['README.mediawiki'],2015-10-02T01:52:22Z,,,,
rustyrussell,209,,BIP 009: Minor revision to extend bit into lockin period.,closed,2015-10-02 01:52:08,"As discussed here:
    http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011275.html

Signed-off-by: Rusty Russell rusty@rustcorp.com.au
",https://github.com/bitcoin/bips/pull/209,['bip-0009.mediawiki'],2015-10-02T01:52:08Z,,,,
rustyrussell,207,,versionbits: the BIP.,closed,2015-09-27 06:43:16,"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010998.html

Signed-off-by: Rusty Russell rusty@rustcorp.com.au
",https://github.com/bitcoin/bips/pull/207,['bip-0009.mediawiki'],2015-09-27T06:43:16Z,,"['btcdrak', 'gmaxwell']","Needs copyright attribution.
BIP 009
","You dont need this tag if you indent the code block 4 spaces in
> allowing multiple backward-compatible changes (further called called ""soft forks"") being deployed in parallel

allowing multiple backward-compatible changes (further called called ""soft forks"") to be deployed in parallel

s/being/to be/
s/without predefined flag/without a predefined flag/
s/is a making a bet/is making a bet/
three years seems a bit long. 2 maybe, but not more imo. Were there any calculations or data this was based on?
฿tcDrak notifications@github.com writes:

> > @@ -0,0 +1,167 @@
> > +<pre>
> > -  BIP: 9
> > -  Title: Version bits with timeout and delay
> > -  Author: Pieter Wuille pieter.wuille@gmail.com, Peter Todd pete@petertodd.org, Greg Maxwell greg@xiph.org, Rusty Russell rusty@rustcorp.com.au
> > -  Status: Draft
> > -  Type: Informational Track
> > -  Created: 2015-10-04
> >   +</pre>
> >   +
> >   +==Abstract==
> >   +
> >   +This document specifies a proposed change to the semantics of the 'version' field in Bitcoin blocks, allowing multiple backward-compatible changes (further called called ""soft forks"") being deployed in parallel. It relies on interpreting the version field as a bit vector, where each bit can be used to track an independent change. These are tallied each retarget period. Once the consensus change succeeds or times out, there is a ""fallow"" pause after which the bit can be reused for later changes.
> > 
> > allowing multiple backward-compatible changes (further called called ""soft forks"") being deployed in parallel
> 
> allowing multiple backward-compatible changes (further called called ""soft forks"") to be deployed in parallel
> 
> s/being/to be/

And s/called called/called/ :)

Thanks,
Rusty.
฿tcDrak notifications@github.com writes:

> s/without predefined flag/without a predefined flag/

Applied, with the others.  Thanks.

Cheers,
Rusty.
฿tcDrak notifications@github.com writes:

> > +'''Success: Activation Delay'''
> > +The consensus rules related to ''locked-in'' soft fork will be enforced in
> > +the second retarget period; ie. there is a one retarget period in
> > +which the remaining 5% can upgrade.  At the that activation block and
> > +after, the bit B may be reused for a different soft fork.
> > +
> > -    if (BState == locked-in && NextBlockHeight == BActiveHeight) {
> > -        BState = activated;
> > -        ApplyRulesForBFromNextBlock();
> > -        /\* B can be reused, immediately */
> > -     }
> >   +
> >   +'''Failure: Timeout'''
> >   +A soft fork proposal should include a ''timeout''.  This is measured
> >   +as the beginning of a calendar year as per this table (suggested
> >   +three years from drafting the soft fork proposal):
> 
> three years seems a bit long. 2 maybe, but not more imo.

The proposal is to add 3 to the calendar year, thus 2-3 years.
I clarified this as:

 A soft fork proposal should include a ''timeout''.  This is measured as
 the beginning of a calendar year as per this table (suggest adding
 three to the current calendar year when drafting the soft fork
 proposal):

It can take a year to actually get from first drafting of a BIP to
actual deployed code.  For example, the versionbits bip is 9 months old
already, and still doesn't have code.

Looking at BIP66, the code was released 16 February.  It was activated
on 4 July, about 5 months later.

Cheers,
Rusty.
"
maaku,206,,Rewrite BIP 68 to reflect current state of pull request #6312,closed,2015-09-23 22:37:20,"Including the removal of bit inversion and the allocation of future soft-fork bits.

Includes and obsoletes #172.
",https://github.com/bitcoin/bips/pull/206,['bip-0068.mediawiki'],2015-09-23T22:37:20Z,,,,
justusranvier,205,,BIP-47: correct base58check version byte,closed,2015-09-22 00:38:46,"Previously specified version byte only produced the desired leading character if the check bytes were omitted

Thanks to TD from Samourai Wallet for pointing this out
",https://github.com/bitcoin/bips/pull/205,['bip-0047.mediawiki'],2015-09-22T00:38:46Z,,,,
MarcoFalke,204,,BIP-0069: [trivial] expression,closed,2015-09-20 14:02:48,"`Randomly order` sound a bit like an oxymoron. Maybe `randomizing the order of` is better English?
",https://github.com/bitcoin/bips/pull/204,['bip-0069.mediawiki'],2015-09-20T14:02:48Z,,"['kristovatlas', 'luke-jr', 'dcousens']","@kristovatlas Please comment ""ACK"" if this change is okay.
ACK
ACK
",
kristovatlas,157,,Added BIP 69: Lexicographical Indexing of Inputs and Outputs,closed,2015-09-19 21:26:43,"Lexicographical Indexing of Transaction Inputs and Outputs
",https://github.com/bitcoin/bips/pull/157,"['README.mediawiki', 'bip-0069.mediawiki', 'bip-0069/bip-0069_examples.py']",2015-09-19T21:26:43Z,,"['gmaxwell', 'dcousens', 'MarcoFalke', 'luke-jr', 'laanwj']","Electrum 2.3.2 has implemented BIP 69: https://github.com/spesmilo/electrum/blob/master/RELEASE-NOTES
Maybe add reference to discussion on mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008484.html
Weird: seems to need rebase
LGTM,  anything holding this back?

**edit:** added some comments below
Test fixtures can be found [here](https://github.com/bitcoinjs/bip69/blob/master/test/fixtures.json).

A Javascript implementation can be found [here](https://github.com/bitcoinjs/bip69/blob/master/index.js), and on [npm](https://www.npmjs.com/package/bip69).
@kristovatlas, @petertodd thoughts on integrating the anti-fee-sniping behaviour (see https://github.com/bitcoin/bitcoin/pull/6216) into BIP69? 
What's fee sniping?
@kristovatlas to quote @petertodd from https://github.com/bitcoin/bitcoin/pull/2340

> The more important reason is to discourage ""fee sniping"" by deliberately mining blocks that orphan the current best block. Basically for a large miner the value of the transactions in the best block and the mempool can exceed the cost of deliberately attempting to mine two blocks to orphan the best block. However with nLockTime you'll soon run out of transactions you can put in the first block, which means they now need to go in the second. With limited block sizes you're run out of room, and additionally another miner now only needs to orphan one block to in-turn snipe the high-fee transactions you had to place in the second block, wrecking all your hard work.

_TL;DR_: stop miners attempting to orphan current blocks in an attempt to increase their fee subsidy reward,  enforced by transactions setting their 'minimum' inclusion time as the current block height.

How that is relevant to this BIP is that it does mean transactions are more easily recognized due to `nLockTime` being set to `activeChain.Height() + 1` (the next block).
I can sort of see the relationship there, but I'd prefer to keep this BIP straightforward and restricted to advice to Bitcoin wallet clients.
> Test fixtures can be found here.
> 
> A Javascript implementation can be found here, and on npm.

Thanks a lot! I will add links to these in the BIP.
I tried rebasing my local copy but to no avail, so I'm going to try submitting a new PR...
Looks like I managed to resolve them. Please consider merging, @laanwj 
@kristovatlas any chance of addressing the comments I made above? (on the diff)
If you ignore all the rest,  please at least respond to https://github.com/bitcoin/bips/pull/157#discussion_r36488055
@dcousens: Thanks for your feedback. I already spent a long time editing the BIP based on prior feedback and I'm not really interested in spending more editing for the sake of succinctness, which comes with trade-offs. When I interacted with open source contributors to wallets on this topic, I found that they primarily wanted more detail about the scheme and not less. Keep in mind that the audience for BIPs is not necessarily restricted to people who religiously read the dev mailing list -- not that you are suggesting this, it's just a helpful reference point.
@kristovatlas if possible,  I'd prefer to stay away from heresay,  as,  in my experience,  I've only heard the opposite in regards to developer opinion on this BIP. 

https://github.com/bitcoin/bips/pull/157#discussion_r36488055 does not make any sense [to me],  although it seems well intentioned,  I can't imagine why you have accounted for it,  could you clarify that?

The BIP is currently a very long explanation for the following algorithm (pseudocode):

``` javascript
inputs.sort((a, b) => {
  return compare(a.txHash, b.txHash, 32) || a.vout - b.vout
})

outputs.sort((a, b) => {
  return a.value - b.value || compare(a.script, b.script, MIN(a.script.length, b.script.length))
})
```

Where `compare` is just a standard lexicographical comparison function, of which there are numerous examples you could give before giving a full python implementation as listed above.
- `std::lexicographical_compare` in [C++](http://www.cplusplus.com/reference/algorithm/lexicographical_compare/)
- `cmp` in Python 2.7
- `memcmp` in C

Very easy to find,  very easy to [research](https://en.wikipedia.org/wiki/Lexicographical_order).
Almost always pointless to re-implement,  or even give a pseudo-algorithm for.

I'd really like to see this BIP get through, but as an open source library implementer, it took me more time to decipher the paragraphs behind this BIP than it did to write the [~20 line `npm` module](https://github.com/bitcoinjs/bip69/blob/master/index.js).

I'm not trying to be hostile,  I'm genuinely just trying to improve the ecosystem,  so please don't take these comments the wrong way.
Okey doke. I don't think this matters at all and is a waste of my time. If you want to fork and make a pull request to my repo, I will promise to review it promptly, however.
@dcousens  Any thoughts on if you will try a revision. What you wrote there looks like a reasonable simplification which could be merged with Kristov's work. 
@gmaxwell waiting on https://github.com/kristovatlas/bips/pull/1
@gmaxwell merged @dcousens's edits. I think this PR is ready to be merged.
ACK
Thanks for the editing help, @dcousens 
@laanwj ping
@laanwj ping
README.mediawiki and bip-0069/bip-0069_examples.py are missing EOF newlines. Anything else needed before merging this draft?
done
Created two trivial follow up cleanups:  #203 and  #204. Feedback is welcome.
","Is malleability even relevant?   I don't foresee this being a common question to ask,  but,  I guess it doesn't hurt to leave it in.
This entire paragraph is quite verbose and seems more like a primer on things we already know in the bitcoin space.  I'm not sure if its relevant to describing this process.
> A further tie is extremely improbable for the aforementioned reasons.

In this case,  why not just define the behaviour and say that the expected behaviour is that they are equal?
Why do we need to have a gap in the spec here?
I'm not sure if an algorithmic description of lexicographical sorting is required, this entire section could be summarised (including the pseudocode) with just a link to the [Lexicographical ordering Wikipedia entry](https://en.wikipedia.org/wiki/Lexicographical_order).
> shorter hashes are ordered before longer ones as a tie-breaker

Transaction hashes are _always_ going to be 256-bit (32 bytes),  as they are the direct output of SHA256.   Why are we accounting for 'shorter hashes'?
"
rayrrr,199,,BIP70: Fix broken extensions registry link in code comment.,closed,2015-09-19 19:40:19,"This resolves an incorrect link to `extensions.mediawiki` in the code comments of `paymentrequest.proto`.
",https://github.com/bitcoin/bips/pull/199,['bip-0070/paymentrequest.proto'],2015-09-19T19:40:19Z,,"['schildbach', 'mikehearn', 'luke-jr']","ack
@gavinandresen @mikehearn This needs an ACK from one or both of you.
It does? Seems obvious to me, but OK - ack, looks good to me.
",
justusranvier,201,,BIP-47: Clarify decoding of notification transactions,closed,2015-09-19 18:24:36,"Specify procedure for extracting payment codes from notification transactions.

Add explicit check that payment code x values are valid for secp256k1
",https://github.com/bitcoin/bips/pull/201,['bip-0047.mediawiki'],2015-09-19T18:24:36Z,,,,
btcdrak,179,,BIP112: CHECKSEQUENCEVERIFY,closed,2015-09-19 18:13:48,"Todo
- [x] BIP number assignment
- [x] Amend text for median-past-timelock BIP number when assigned
",https://github.com/bitcoin/bips/pull/179,"['README.mediawiki', 'bip-0112.mediawiki']",2015-09-19T18:13:48Z,,"['gmaxwell', '', 'maaku', 'CodeShark', 'dcousens', 'jtimon', 'NicolasDorier', 'luke-jr']","I extremely dislike the inversion to preserve the ""previous nSequence
semantics"". The ""previous nSequence semantics"" were
consensus-unenforceable but we can cover the same use cases (or the
realistic ones at least) with nMaturity. Let's face it and move on
without technical debt we don't need and may regret. If we do this
inversion we will likely carry it for very long if not forever.
I don't think we will ever regret not having done the inversion.

As a side effect of this proposed change, I believe documentation (not just this BIP but also doxygen's) can become much clearer (maybe even shorter simultaneously).
I am indifferent on this issue (the bit inversion), but so far only Jorge has spoken up. I opted for this detail during implementation in order to preserve existing semantics, even if those semantics are not commonly used. This was the conservative choice, driven in part because I didn't want the proposal to be held up by the other side saying ""this is confusing because it changes how sequence numbers work! it used to count up but now it counts down!""

I can see both sides and as I said I'm indifferent, so I went with the conservative choice of not messing with existing semantics. However if there is strong preferences from _multiple_ people on this matter it is not too late to change. If anyone feels strongly about this, please speak up.
If I'm the only one opposed to the inversion, I certainly prefer this with the inversion than not having the new op at all.
But as you say the code change is relatively simple, and I don't think sufficient reasons have been provided to justify the bit inversion to ""preserve the old semantics"" (specially given that the old semantics were not enforceable). The new semantics are better with or without the inversion.
I think that even if the inversion is maintained the BIP should contain the motivations of that decision.
Ideally with concrete example use cases that would be broken instead of a vague ""to preserve the old semantics"" (which would still be better than what BIP draft currently has).

But, yes, please, more ""I prefer to do the inversion"" (0), ""I'm indifferent"" (1) and ""I prefer not to do the inversion"" (1) from other people would be appreciated.
I suspect most people will, like you, be indifferent, but I'm specially interested on what arguments (and ""this is not what Satoshi had in mind for nSequence"" is not a logical argument) people would have to ""preserve the current semantics"".

Maybe @mikehearn can help providing those reasons?
I don't understand his points about ""resource scheduling and update flood damping"" in http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008293.html

So, to be completely clear, this is not a NACK, just a nit. If the inversion is going to be used, please document why. If there's no good reason to use the inversion, just not using it will make everything simpler and more readable.
Just want to mention that nSequence is used by a colored coin protocol [EPOBC](https://github.com/chromaway/ngcccbase/wiki/EPOBC). I don't know myself the detail of this protocol very well, but if we don't keep nSequence semantic it may be very detrimental to chromaway. The inversion may fix the issue. (not checked that into the details)
There is an exception explicitly for such purposes. Just make sure you set
bit 31.
On Aug 23, 2015 3:51 AM, ""Nicolas Dorier"" notifications@github.com wrote:

> Just want to mention that nSequence is used by a colored coin protocol
> EPOBC https://github.com/chromaway/ngcccbase/wiki/EPOBC. I don't know
> myself the detail of this protocol very well, but if we don't keep
> nSequence semantic it may be very detrimental to chromaway.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/179#issuecomment-133816935.
Whats the current status here?
@gmaxwell I believe there was some question of whether or not to use the inversion. http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010686.html
Unless changing the semantics breaks something, I'm for using the most transparent semantics here. Given that almost nobody uses the nSequence field at all, it's probably less painful to change the semantics now than to have to document this quirk later on when everyone is using it.
There seems to be a general consensus in favor of dropping the bit
inversion.

The sequencenumbers3 branch contains future soft-fork bits that are shifted
out of register, as per @gmaxwell's suggestion. This adds future expansion
capability at the cost of relative lock times being limited to about 2
years (not an issue in foreseeable use cases) and quite a bit more code
complexity (a bit more of an issue...)

So far Rusty is the only one that had commented on this. Both he and I are
mildly against this due to being considerably more complicated. If we want
to remove the bit inversion to make relative lock times semantically
simpler it doesn't make sense to then add a bunch of bit shifts.

But I would like a more clear consensus before making a call on this and
changing the text and code. Can a few people review that branch and express
an opinion?
On Sep 5, 2015 5:51 PM, ""Eric Lombrozo"" notifications@github.com wrote:

> Unless bit inversion breaks something, I'm for using the most transparent
> semantics here. Given that almost nobody uses the nSequence field at all,
> it's probably less painful to change the semantics now than to have to
> document this quirk later on.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/179#issuecomment-138015665.
Is there a branch that drops the bit inversion without making any further changes?
sequencenumbers2
On Sep 5, 2015 6:15 PM, ""Jorge Timón"" notifications@github.com wrote:

> Is there a branch that drops the bit inversion without making any further
> changes?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/179#issuecomment-138016249.
Why not mask them with a logical AND instead of bit shifts? Wouldn't that keep it semantically simple?

Also, I feel like I've brought this up before, but: I really think this should use a new name besides ""sequence"" since it is completely changing the semantics from what the original purpose was.
I would rename nSequence to nMaturity. In fact, if I remember correctly the first time we talked about something similar to rcltv/csv we called it ""op_maturity"" which in my opinion is much more clear and would probably simplify the documentation.
I'm going to be the odd one out here and claim the sequence numbers
actually describes exactly what the field's semantics is, regardless of
whether you are counting up or down. Given two transactions, the sequence
number can be used to determine which came after the other.
On Sep 5, 2015 10:45 PM, ""Jorge Timón"" notifications@github.com wrote:

> I would rename nSequence to nMaturity. In fact, if I remember correctly
> the first time we talked about something similar to rcltv/csv we called it
> ""op_maturity"" which in my opinion is much more clear and would probably
> simplify the documentation.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/179#issuecomment-138043457.
@maaku Technically, that is true - but I think the bigger point is that the use cases we're after don't really care about sequence...that the original semantics are preserved is sort of a side effect of the more important feature which is relative time lock which is what is actually enforced by the consensus rules.
Also, it's possible to think of pathological cases where the sequence numbers don't necessarily reflect the sequence. i.e. a higher sequence number transaction with no fee and a lower sequence number transaction with a very high fee that spends the same output.
In other words, since nSequence isn't being used at all, we have a free field we can repurpose for RCLTV which we already know has many good use cases. The fact we can preserve the semantics via a little hackery, while a clever observation, isn't really what's important.
I don't want to be repetitive, but this has exactly the same semantics as the 100 blocks maturity for coinbase inputs. In fact, I would prefer this check https://github.com/bitcoin/bitcoin/compare/master...maaku:sequencenumbers2#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR943 to be done in the same place where the coinbase maturity is checked, here: https://github.com/jtimon/bitcoin/blob/consensus-txinputs-0.12.99/src/main.cpp#L1301
I'm in agreement with @maaku 
Just a heads up, I've rebased and added to the index.
","Is this meant to be **`above`**,  or am I misunderstanding what is meant here by `consensus constrained`?
If I am misunderstanding,  then perhaps the conditional should also be switched such that it aligns with comment.

> Sequence numbers equal to or above the SEQUENCE_THRESHOLD are not treated as relative lock-times, nor are they given any consensus-enforced meaning at this point.

From [BIP68](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki#specification).  I assume therefore that this comment is wrong?
Why is this declared at the top of the scope?

**edit:** seems to be an artefact of https://github.com/bitcoin/bitcoin/commit/bb0b59eb5fed7555eed705cad6e360a7617daf0e#diff-be2905e2f5218ecdbe4e55637dac75f3R1176 
Would `return nInvSequence <= txInvToSequence` suffice?

Otherwise, ACK, LGTM.
It might, but in practice this code is integrated into the existing `TransactionSignatureChecker::CheckLockTime` so the optimisation wouldn't persist.
What is `LOCKTIME_THRESHOLD` in this context?  It might be useful to specify this so that the example below is more clear.

_edit_: It seems `LOCKTIME_THRESHOLD` is a [constant that has been long declared](https://github.com/bitcoin/bitcoin/blob/0.10/src/main.h#L78) in Bitcoin.   IMHO it would be useful to specify that so that this proposal is easier to implement without having to look up information in the core implementation.
Ah!  I see that in @maaku's commit https://github.com/bitcoin/bitcoin/commit/bb0b59eb5fed7555eed705cad6e360a7617daf0e.   
Maybe I could add this at the top of the code snippet for reference.

``` cpp
// Threshold for nLockTime: below this value it is interpreted as block number,
// otherwise as UNIX timestamp.
static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC

// Threshold for inverted CTxIn::nSequence: below this value it is interpreted
// as a relative lock-time, otherwise ignored.
static const uint32_t SEQUENCE_THRESHOLD = (1 << 31);
```
I think that would help a lot.
OK I have added these.
slight spelling error in the variable name
 `if (nInvSequence > txInvToSequence)` should read `if (nInvSequence > txToInvSequence)`
"
btcdrak,194,,BIP105: Update to account for BIP34,closed,2015-09-19 18:12:59,"The voting mechanism did not previously account for BIP34.
",https://github.com/bitcoin/bips/pull/194,['bip-0105.mediawiki'],2015-09-19T18:12:59Z,,"['sipa', 'luke-jr']",,"Probably should stick to bytes here to be clear the 2 MB value is signed LE? And you need 4 bytes for this to account for the sign.
Also: the the
"
UpalChakraborty,193,,Update README.mediawiki,closed,2015-09-05 20:29:23,"Added BIP 106
",https://github.com/bitcoin/bips/pull/193,['README.mediawiki'],2015-09-05T20:29:23Z,,['luke-jr'],"Next time just collapse this into the main PR, thanks.
",
UpalChakraborty,191,,BIP 106: Dynamically Controlled Bitcoin Block Size Max Cap,closed,2015-09-05 20:29:08,"Transferred from https://github.com/UpalChakraborty/bips/blob/master/BIP-DynamicMaxBlockSize.mediawiki
",https://github.com/bitcoin/bips/pull/191,['bip-0106.mediawiki'],2015-09-05T20:29:08Z,,"['gmaxwell', 'btcdrak', 'andychase', 'luke-jr']","Can you edit the title of the PR please. ""Create BIP-1xx.mediawiki"" isnt very meaningful.
@btcdrak Oops. My Bad. Done.
Also need to update README.mediawiki please. And request a BIP number from @gmaxwell if you haven't already.
@gmaxwell Requesting to assign a BIP number.

@luke-jr Will update README.mediawiki once the BIP number is assigned.
106 cheers!
@gmaxwell Thank you.

@luke-jr Pull request to update README.mediawiki has been created - https://github.com/bitcoin/bips/pull/193.
This proposal is missing a copyright declaration which means the author is free to going around suing anyone who copies it in full or uses parts of it in derivative works.
Was this PR ready for merging? Looks like it was not complete (has two proposals in the specification). It might be good if we establish a [WIP] prefix on the title to indicate a ""work in progress"" @gmaxwell 
It's Draft status. Beyond getting the BIP number assigned properly, the author basically has free reign. ""[WIP]"" sounds fine to me, but really a PR shouldn't be submitted at all until it is ready for review by the BIP author and merging...
@andychase Regarding copyright declaration, BIP 70, 73, 101 do not have it either.

@btcdrak Status: Draft
@UpalChakraborty Please do add a proper copyright license in your next revision to the draft. Prior omissions are not really a good reason to neglect it. Thanks :)
> It's Draft status. Beyond getting the BIP number assigned properly, the author basically has free reign. ""[WIP]"" sounds fine to me, but really a PR shouldn't be submitted at all until it is ready for review by the BIP author and merging...

@luke-jr I disagree, a PR is also part of the review process and you need to give enough time for people to review it, spell check it, and iron out the nits. It's probably worth asking the OP if a PR is completely ready if it's not obvious and I think also the repository maintainer should question obvious issues - like this PR has two proposal in it, and is obviously unworkable in that state.
",
luke-jr,190,,"Bugfix: BIP17: Withdrawn is the status, not the type",closed,2015-09-04 07:46:22,,https://github.com/bitcoin/bips/pull/190,"['README.mediawiki', 'bip-0017.mediawiki']",2015-09-04T07:46:22Z,,['kanzure'],"ACK.
",
btcdrak,189,,Update readme table,closed,2015-09-04 00:15:37,,https://github.com/bitcoin/bips/pull/189,['README.mediawiki'],2015-09-04T00:15:37Z,,,,
afk11,182,,BIP113: Median Past LockTime,closed,2015-09-04 00:02:08,"Following the announcement on the ML (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010348.html).

TODO:
- [x] BIP number assignment (113)
- [ ] Link to discussions between @gmaxwell and @luke-jr where this change was first described
",https://github.com/bitcoin/bips/pull/182,['bip-0113.mediawiki'],2015-09-04T00:02:08Z,,"['gmaxwell', 'btcdrak', 'luke-jr']","Looking good so far.
@afk11 @maaku Ready for merging this? (note you can still update it in a future PR if necessary)
Let me squash some commits first.
rebased.
ACK for merge
",
justusranvier,159,,BIP-0047: Reusable payment codes,closed,2015-09-03 23:21:35,"Payment codes are SPV-friendly alternatives to DarkWallet-style stealth addresses which provide useful features such as positively identifying senders to recipients and automatically providing for transaction refunds.

Payment codes can be publicly advertised and associated with a real-life identity without causing a loss of financial privacy.

Compared to stealth addresses, payment codes require less blockchain data storage.

Payment codes require 65 bytes of OP_RETURN data per sender-recipient pair, while stealth addresses require 40 bytes per transaction.
",https://github.com/bitcoin/bips/pull/159,"['README.mediawiki', 'bip-0021.mediawiki', 'bip-0047.mediawiki', 'bip-0047/reusable_payment_codes-01.png', 'bip-0047/reusable_payment_codes-02.png', 'bip-0047/reusable_payment_codes-03.png', 'bip-0047/reusable_payment_codes-04.png', 'bip-0047/reusable_payment_codes-05.png', 'bip-0047/reusable_payment_codes-06.png']",2015-09-03T23:21:35Z,,"['gmaxwell', 'erasmospunk', 'dskloet', 'kristovatlas', 'luke-jr', 'laanwj']","Ready for merging?

Edit: maybe add a reference to the discussion on mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-April/007812.html
There's a correction to the serialization format that I want to push before this will be ready for merge.
How do the payment codes interact with the URI scheme (BIP21) and payment protocol (BIP70)?

For the URI, there could be a new parameter `paycode`:

```
bitcoin:1FpVXFZ3ZYE6SLg8T2U1pTKgySx46rmq2Z?amount=0.01&paycode=PXXXXXXXXXX
```

Like this, incompatible clients will gracefully degrade. In case of the BIP72 `r=` parameter, it would take precedence as the spec dictates.

There could be separate BIPs that define this behavior, but it would be nice to have everything in one place.
If it would be appropriate, I could extend this pull request to update BIP 21 and/or BIP 70 as well.
When we are using BIP-70 the client always gets a set of addresses (outputs) to pay, so paycodes seem redundant from a privacy perspective.

On the other hand one scenarios that comes in mind:

Alice joins an online dice game, she scans the qr-code and connects with the BIP-70 compatible server that sends her a paycode. She then replies to the server with the BIP-47 notification and the first bet transaction. This creates the dice game paycode/identity in her wallet, that she can create more transactions without talking again to the BIP-70 server. So after she won, she sends again to the dice paycode/identity (without sending again the notification) and retains her privacy. This emulates the famous `1diceXXXX` address but with the additional benefit of the privacy.

Another usage is in an exchange, where you use paycodes to fill the account balance and using different address in subsequent deposits. The wallet could even send the refund address as a paycode so that the  withdrawals are also privacy protected.

In BIP-47 we need a BIP-70 notification flag additionally to the Bitmessage notification.
In BIP-70 an extension needs to be created to support the above use cases. Probably adding an `optional bytes paycode` to the `message Output`.
The BIP-47 workflow intentionally differs from BIP-70 in that it's designed for the payer to choose the outputs instead of the payee. This gives the sender more control over their privacy, because they have the option to use multiple blockchain transactions to complete a single business transaction.

It's also designed for a TOFU security model, where only the initial payment code exchange needs to be verified instead of every subsequent payment address.

I'm not sure how easy it would be to make that workflow fit into BIP-70.
@justusranvier is this ready to merge?
As far as I know there is no barrier to merging it in its current form, other than lacking yet-to-be-developed BIP-70 integration, which could be the subject of a different pull request.
@laanwj please re-consider for merging.
I think this can be merged?
Note: This snuck in a modification to BIP 21. I have reverted it. BIP 21 is no longer modifyable - include any changes in a new BIP or update BIP 47 with them...
@luke-jr why did you not revert the previous 8 or so commits that were made after BIP 21 was accepted?
@kristovatlas They were not substantial changes, just minor corrections.
@luke-jr Thanks for the clarification. If new BIPs such as BIP-47 imply additional kinds of identifiers to include in URI schemes, as the current BIP maintainer, would you prefer to see:
- A new BIP repeating everything in the last URI Scheme BIP + the new information
- A new BIP containing only the new information and including a pointer to BIP-21?
- Something else?
A new BIP containing only the new information and including a pointer to BIP-21, seems better to me, at least in this case. It might even make sense as an additional section in BIP 47 itself.
Thanks.
","There's non mention of a version byte in the previous section. But the first byte (type) is described as 0x01, not 0x37.
I don't see what this has to do with ASCII.
Remove ""a"" or make ""codes"" singular.
Since Alice got Bob's payment code out of band, I wonder if it makes sense to allow Alice to send her payment code to Bob out of band as well. That way you can avoid worrying about leaking the notification address.
The ASCII reference is a left over from before we were using a BIP number for that path level.
Alice getting Bob's payment code out of band might mean that it was printed on a business card which Alice got from Bob at a conference, or on paper fliers, or embedded into a DNS TXT record for a web site.

We're trying to avoid requirements for interactive communication here, in particular it would make payment codes vastly less useful if the recipient had to be online in order to receive payments.

The reason that Alice sends her payment code to Bob via a notification transaction, even if she also uses some other communication channel at the same time, is to preserve Bob's ability to recover his wallet from a seed.
Except for charity donations I can't think of any use cases where you'd want to send money without prior communication. Maybe you can include some examples in the text?

Being able to recover the wallet from a seed is a good point. Though the protocol could be changed to make Bob responsible for recording the sender payment codes in the blockchain. I'm not saying one is better than the other but I think it would be good to allow for both options. It especially worries me that the send has to take special care not to mix up the coins in the notification address.

In any case it would be good to mention the argument about being able to recover the wallet from a seed in the text.
"
kallerosenbaum,178,,"BIP 120, 121: ""Proof of Payment"" and ""Proof of Payment URI scheme""",closed,2015-09-03 23:18:18,"I've created a single pull request for both bips because they are very related and I think a single discussion thread for both bips is better than two separate threads.
",https://github.com/bitcoin/bips/pull/178,"['README.mediawiki', 'bip-0120.mediawiki', 'bip-0121.mediawiki']",2015-09-03T23:18:18Z,,['gmaxwell'],"Anyone know whats gating further progress here?
Thank you!
",
droark,176,,Minor grammatical change,closed,2015-09-03 23:11:54,"The sentence regarding empty byte arrays being used to indicate an invalid ECDSA signature is confusing. I attempted to make it clearer. If I screwed it up or can make it even clearer, please let me know.

Thank you.
",https://github.com/bitcoin/bips/pull/176,['bip-0062.mediawiki'],2015-09-03T23:11:54Z,,"['jonasschnelli', 'fanquake', 'sipa', 'luke-jr', 'laanwj']","~~Please open trivial, non change PR at trivial next from @theuni: https://github.com/theuni/bitcoin/tree/trivial-next~~
@jonasschnelli This is the bips repo
Aii.. Ignore my comment then. Sorry.
Don't feel strongly about it but ""the empty byte array"" is strictly correct. There is only one possible empty byte array.
@laanwj - Sorry if my comment wasn't totally clear. I mentioned the empty byte array because that was, to me, the most unique phrase in the affected sentence. (Granted, I think ""empty byte array"" still sounds weird, but I won't rewrite that.) I've highlighted the differences below. In particular, ""for with"" is definitely a typo.

Original: ""To provide a compact way to deliberately create an invalid signature for with OP_CHECKSIG and OP_CHECKMULTISIG the empty byte array (the result of OP_0) is also allowed.""

Revision: ""To provide a compact way to deliberately create an invalid signature **for** OP_CHECKSIG and OP_CHECKMULTISIG, an empty byte array (**i.e.,** the result of OP_0) is also allowed.""
@sipa ACK please, when you get a chance?
ACK
",
btcdrak,187,,BIP105: Consensus based block size retargeting algorithm,closed,2015-09-03 22:35:53,"Transferred from https://gist.github.com/btcdrak/1c3a323100a912b605b5
",https://github.com/bitcoin/bips/pull/187,['bip-0105.mediawiki'],2015-09-03T22:35:53Z,,['gmaxwell'],"Number 105.
",
TheBlueMatt,183,,BIP 111,closed,2015-09-01 21:37:51,,https://github.com/bitcoin/bips/pull/183,"['README.mediawiki', 'bip-0111.mediawiki']",2015-09-01T21:37:51Z,,"['andychase', 'laanwj']","NIt: also needs to be added to the index.
Fixed.
","""filter*"" is confusing. Asterisks after words in a document in english usually denote a footnote. Maybe ""may still send bloom filter messages"" 
Maybe add something about implementations not wanting to implement it right away like btcd? I thought the motivation for removing this feature had to do more with ""not forcing it on implementations"" rather than attacks and privacy. To be clear, the privacy implications are for the clients that are using the feature, and not for the sever operator.
Meh, the reason others didnt implement it is because of the DoS issues, mostly, not because they just didnt feel like it, so thats covered.
"
spaz926,174,,Update bip-0067.mediawiki,closed,2015-08-24 18:35:17,"Change date format to ISO 8601
",https://github.com/bitcoin/bips/pull/174,['bip-0067.mediawiki'],2015-08-24T18:35:17Z,,,,
dcousens,180,,bip66: change status to final,closed,2015-08-24 18:21:56,"If #169 is not able to merged,  then lets bump this puppy.
",https://github.com/bitcoin/bips/pull/180,['bip-0066.mediawiki'],2015-08-24T18:21:56Z,,"['btcdrak', 'jonasschnelli']","ACK
ACK

@laanwj ping for merge
ping @laanwj 
",
gavinandresen,177,,Correct description of which version bits are set,closed,2015-08-24 18:17:20,"Bit thirty needs to be set to be compatible with Pieter's version proposal; I have no idea why I said 14.

And changed the description to ""first, second... etc"" to try to avoid ""does numbering start with bit 0 or bit 1"" confusion.
",https://github.com/bitcoin/bips/pull/177,['bip-0101.mediawiki'],2015-08-24T18:17:20Z,,,,
gavinandresen,163,,BIP 101 : maximum block size increase,closed,2015-07-30 09:21:29,"Proposal to increase maximum possible block size, starting at 8MB
in January 2016 and increasing on-pace with technological growth to
8,192MB in twenty years.
",https://github.com/bitcoin/bips/pull/163,"['README.mediawiki', 'bip-0101.mediawiki']",2015-07-30T09:21:29Z,,"['C-Otto', 'flix1', 'sipa', 'aceat64', 'dabura667']","If Bitcoin goes viral in 2017 8 MB blocks will still not be enough. We need a permanent solution.

This is what Vitalik Buterin has proposed:
""Initialize at 1 MB, target 2x exponential moving average of the last 1000 blocks.""

I  would very much like to know Gavin's opinion on dynamic block-size limits. The mechanism for adjusting network difficulty seems to work well despite being something that impacts miner incentives very directly and there is a strong temptation to attempt to game it.
@flix1, you're talking about a completely different solution. I suggest you do a full write up and code like BIPS 100 and 101.
ACK

Looks good to me. Can't wait.
Fixed typos / broken links found by @C-Otto (thanks!).
@flix1 :  dynamic limits are harder to implement-- I volunteered to help @jgarzik implement BIP100, and when diving into actually coding it up, the combination of headers-first and out-of-order block fetching makes any dynamic limit based on previous block sizes or votes in coinbase transactions non-trivial because the max block size may not be known when the block data is received.

That's not a show-stopper problem: a 'maximum feasible block size' could be used for initial denial-of-service checks on 'block' message size based on the block height, with a tighter check on size done when all previous blocks have been downloaded and validated and the block is added to the chain.

But it is much simpler if the max size is a pure function based on data in the block header.
On Wed, Jul 15, 2015 at 11:30 AM, Gavin Andresen notifications@github.com
wrote:

> @flix1 https://github.com/flix1 : dynamic limits are harder to
> implement-- I volunteered to help @jgarzik https://github.com/jgarzik
> implement BIP100, and when diving into actually coding it up, the
> combination of headers-first and out-of-order block fetching makes any
> dynamic limit based on previous block sizes or votes in coinbase
> transactions non-trivial because the max block size may not be known when
> the block data is received.

That's surprising to me. In headers-first we never receive/process full
block data before all headers leading up to it are known, so you can just
check the block size in AcceptBlock, before it is stored on disk.

If you're talking about doing an early check while receiving the block
data... I'm not sure why that matters. If an attack exists for receiving
large blocks, an attacker can just wait until you've caught up and are
willing to receive them. So I think the ""early check"" should just tolerate
whatever the limit is the software can deal with, independent of time. The
accurate consensus check can be in AcceptBlock.
@gavinandresen  Actually over the past weeks I've given this a lot of thought and I've come around to see your solution as the best. A purely mathematical rule keeps it simple. Targeting Moore's law is reasonable.

It will also be easier to reach a very broad consensus for something straightforward.
On Wed, Jul 15, 2015 at 12:12 PM, flix1 notifications@github.com wrote:

> @gavinandresen https://github.com/gavinandresen Actually over the past
> weeks I've given this a lot of thought and I've come around to see your
> solution as the best. A purely mathematical rule keeps it simple. Targeting
> Moore's law is reasonable.

Moore's law only talks about number of components on integrated circuits.
If you want to target the lowest common denominator of all technologies
involved, it would not be more than 17% per year, according to this:
http://rusty.ozlabs.org/?p=493.
","mines -> miners
Reference your PR bitcoin/bitcoin#6341 instead?
"
petertodd,175,,Minor: BIP62: spelling,closed,2015-07-28 19:09:54,"Ooops!

CC: @sipa 
",https://github.com/bitcoin/bips/pull/175,['bip-0062.mediawiki'],2015-07-28T19:09:54Z,,['sipa'],"ACK
",
Eylrid,166,,Update Missed Mailing List Link,closed,2015-07-02 11:41:44,"A second link to the mailing list was missed and left pointing to the old
list.
",https://github.com/bitcoin/bips/pull/166,['bip-0001.mediawiki'],2015-07-02T11:41:44Z,,,,
mruddy,160,,BIP65: add sections on ability to freeze funds and implementations,closed,2015-06-24 17:29:19,"I added a section on the ability to freeze funds, updated link to go straight to the new bitcoin-dev mailing list archive, and added a section on implementations.
",https://github.com/bitcoin/bips/pull/160,['bip-0065.mediawiki'],2015-06-24T17:29:19Z,,"['petertodd', 'laanwj']","Ping author @petertodd
ACK
",
todu,156,,Corrected spelling of one word.,closed,2015-06-22 12:22:02,"""verifcation"" -> ""verification"".
",https://github.com/bitcoin/bips/pull/156,['bip-0066.mediawiki'],2015-06-22T12:22:02Z,,,,
jl2012,150,,Dummy 0 in scriptSig for CHECKMULTISIG,closed,2015-06-22 12:20:46,"There should be a dummy 0 in the scriptSig for CHECKMULTISIG
",https://github.com/bitcoin/bips/pull/150,['bip-0065.mediawiki'],2015-06-22T12:20:46Z,,"['petertodd', 'laanwj']","Ping author @petertodd
Good catch! This can be merged.
",
maraoz,149,,Update bip45 based on comments by dskloet,closed,2015-06-22 12:20:17,"- fix examples
- fix address discovery section
- fix purpose to 45
- mention difference with bip-0044
",https://github.com/bitcoin/bips/pull/149,['bip-0045.mediawiki'],2015-06-22T12:20:17Z,,"['dskloet', 'laanwj']","Let me know when this is ready for merging
Addressed all comments by @dskloet. When he ACKs, we can merge. Thanks @laanwj :+1: 
LGTM
","Above you replaced $purpose with 45'. Do you want to do that here as well?
end with a colon as on line 170:
Did you mean to keep 2 blank lines above this one?
If you want, you can put in a reminder that, opposite to BIP44, each cosigner branch needs to be checked, even if the earlier ones don't have transactions.
yeah, will fix
"
NicolasDorier,148,,Reject code DUPLICATE also used for rejecting tx,closed,2015-06-22 12:19:31,"The reject code 0x12 is used for Version duplicate, but also when an input is already spent (bad-txns-inputs-spent)
",https://github.com/bitcoin/bips/pull/148,['bip-0061.mediawiki'],2015-06-22T12:19:31Z,,"['schildbach', 'gavinandresen', 'laanwj']","Ping author @gavinandresen
I suggested this to Gavin when BIP61 was presented, but he rejected.
well, I can say this is as is implemented today. When a BIP and bitcoin core differ, I think we should change the BIP.
That's a fact for consensus code. The code is leading there because it's too hard to change anything. 

But I'm not sure in this case. If the overlap in numbers is not intentional, changing the code is also a possibility. But I'm also fine with documenting as-is.
ACK on this change.

RE: BIP versus reference implementation code: I agree with @laanwj --  the reference implementation defines consensus, but for non-consensus things like this either the BIP or the implementation can be changed.
",
maaku,158,,Add BIP 68: Consensus-enforced transaction replacement signalled via sequence numbers,closed,2015-06-22 12:09:51,"BIP number assigned here:

https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg08340.html
",https://github.com/bitcoin/bips/pull/158,"['README.mediawiki', 'bip-0068.mediawiki']",2015-06-22T12:09:51Z,,['harding'],"Nits fixed.
","I think we switched all dates in the BIPs repository to ISO8601 in d83755efa4207, so 2015-05-28 would probably be better.
> for each coin a transaction is spending.

suggest ""for each input"" (more common terminology among non-core devs, and you use it in the Specification section)

> half implemented

probably should be: ""half-implemented""

> was useless, because

Suggest removing the comma.
> (0xffffffff - 500,000,000 = 0xe2329aff

Unclosed parens

> one second greater than the median time past of the block of the input it is spending.

""median time past"" looks like a normal adjective phrase, but it makes no sense in context unless you know that's the name of a Bitcoin Core function.  I suggest either placing it in italics to indicate foreign phrasing, using `GetMedianTimePast()`, or expanding it to describe what `GetMedianTimePast()` does.
> BIP 65: OP_CHECKLOCKTIMEVERIFY

If you don't mind, could you make this a link? `[BIP 65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): OP_CHECKLOCKTIMEVERIFY`
"
laanwj,161,,bip-0001: Mailing list move,closed,2015-06-22 12:06:11,,https://github.com/bitcoin/bips/pull/161,['bip-0001.mediawiki'],2015-06-22T12:06:11Z,,"['btcdrak', 'jtimon']","ack
ACK
",
NicolasDorier,136,,Add C# implementation of BIP39 (NBitcoin),closed,2015-05-26 08:20:05,,https://github.com/bitcoin/bips/pull/136,['bip-0039.mediawiki'],2015-05-26T08:20:05Z,,"['laanwj', 'vixxen']","Needs rebase
rebased
can someone merge that ? this is a 2 months pull request.
It's very easy to make some words **bold** and other words _italic_ with Markdown. You can even [link to Google!](http://google.com)
It's very easy to make some words bold and other words italic with Markdown. You can even link to Google!
",
afk11,146,,BIP: Deterministic multi-signature P2SH addresses,closed,2015-05-26 08:13:03,"BIP for standard multisignature P2SH addresses given m and a set of public keys.

Bip90 is just a number which doesn't collide, I will request one via the mailing list now. 
",https://github.com/bitcoin/bips/pull/146,"['README.mediawiki', 'bip-0067.mediawiki']",2015-05-26T08:13:03Z,,"['gmaxwell', 'rubensayshi', 'jonasschnelli', 'devrandom', 'maraoz', 'btcdrak', 'laanwj', 'luke-jr']","ACK. Can confirm bitcore follows this, and I think it's good to have a BIP to clarify this issue, given every developer doing P2SH multisig will encounter it.
Once/if this gets merged, we'll add the test vectors to bitcore :+1: 
Cheers @maraoz! Already borrowed the one bitcore happened to have :)
As a matter of procedure this proposal can not have 90 now.  _PLEASE_ discuss your proposals on the list and just use BIP?? or BIP_draft_proposer or some other placeholder name. 
@gmaxwell I thought this was discussed on the list not so long ago?
@btcdrak I have no freeking idea. Just immediate intervention is required to prevent ANOTHER incident of multiple people squatting a number.
That's absolutely fine, I'm not fussed either way, but can see how it can cause confusion later on.
Yep. Working on a last call now. Good work.
ACK from me. I was involved in some of the discussions of this proposal in the beginning so it's all good from my side.
ACK from CryptoCorp
Whoop, we've been assigned BIP0067 for this! Updated the PR so the README reflects this now also. 

I've changed the type from Informational to Standard, seems to be what most process BIPs are marked as. 
@luke-jr - Forgot to mention, following your advise on IRC a while ago I altered the BIP to mention BIP-0011. Mind having a look?
does this mean it's accepted? or just merged the draft?
It just means that the BIP is part of the official repository now. There hasn't been a status change (those should be discussed on the mailing list, as described in BIP 0001, after the standard has been in use for significant amount of time, but it looks like the majority of BIPs stays at Draft status).
","Think you need a line here, this address isnt being displated in the rendered mediawiki view.
Thanks, seems to have been the same for the first set of public keys too. Fixed now
I think here ""bitcoinj"" should also be mentioned.
I checked before, afaik it does not force an ordering; https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java#L168
Looks like it sorts it here: https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/script/ScriptBuilder.java#L331
ah, great!
BIPs really shouldn't be listing all implementations, just a (few) reference ones)... Recommend at least not listing ones based on bad security practices like brainwallets.
the reason for listing as many as possible is initially too show there's already a bunch of wallets and libs following this. 

2nd is imo that this BIP aims to close the gap for compatibility, I think it's relevant. 

imo it should stay in until the BIP is accepted, since it's relevant for the discussion 
"
bip39JP,130,,BIP39: Clarify necessity for ideographic spaces.,closed,2015-05-26 08:09:14,"I left it unclear / open to interpretation on whether to use ideographic
spaces, but realized that without being specific on its necessity,
developers may implement something that would cause trouble with the
Japanese user. (two words looking like one word, or phrase verification
failing because it can't handle ideographic spaces, etc.)

Hopefully, this will clear up any mis-understandings.
",https://github.com/bitcoin/bips/pull/130,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/japanese.txt']",2015-05-26T08:09:14Z,,"['andre-amorim', 'NicolasDorier', 'Thashiznets', 'voisine', 'bip32JP', 'dabura667']","Dude, you're making it WAY more complex then it needs to be. Make the test vectors with ASCII space as is expected by the output and simply leave the comment about displaying the mnemonic with ideographic space there. I understood what you meant about displaying with ideographic before I even got around to implementing the test vectors and was displaying the wider spaces in my UI. By providing not normalised test vectors and all these comment you are deliberately making things harder than they need be! Code to spec will output ASCII spaces, it has too. All the developer needs to know is that when displaying they should use u3000 and you already had that covered initially! No need to provide test data that needs manipulation then write more comments etc, the fact remains that test data should always be constant. What if whatever they use to normalise the test data does it incorrectly? There is too many ways for error when you require the test data to be altered for tests to pass! To be honest, I have not known one person who would allow test data that requires manipulation before use....and I'm usually the one who gets busted for not doing the right thing but I'd never ever do that with test data.
> Dude

Don't call me dude.

> you're making it WAY more complex then it needs to be

I am making it in the way it needs to be to protect user funds.

> Make the test vectors with ASCII space as is expected by the output and simply leave the comment about displaying the mnemonic with ideographic space there.

If you are generating a Japanese mnemonic phrase with ASCII spaces, it is a failure to follow spec. As of this pull request, Japanese phrases that are separated by ASCII spaces is considered a failure.

> I understood what you meant about displaying with ideographic before I even got to the test vectors.

If you understood, then you would understand the need for the generated phrase output to be not NFKD normalized. If I placed the normalized phrase (with ASCII spaces) in there to begin with, then how would you know if your normalization function is working properly?

> By providing not normalised test vectors and all these comment you are deliberately making things harder than they need be!

Writing an if-then statement saying ""if (output should be Japanese) then (split with ideographic space) else (split with ASCII space)"" is not exactly what i would consider ""hard"". If more languages require these types of considerations, and you don't want to deal with them, then don't support those languages.
""Don't call me dude.""

Ok man :p

""If you are generating a Japanese mnemonic phrase with ASCII spaces, it is a failure to follow spec. As of this pull request, Japanese phrases that are separated by ASCII spaces is considered a failure.""

No, it is not considered a failure. It would be considered a failure to display the words in the UI without ideographic spaces but I'm assuming that is known by someone who speaks Japanese is it not? A Japanese developer would be used to taking ASCII space and replacing with ideographic I'm sure this would not be the first place they do it? 

""If you understood, then you would understand the need for the generated phrase output to be not NFKD normalized. If I placed the normalized phrase (with ASCII spaces) in there to begin with, then how would you know if your normalization function is working properly?""

Does the reference code output not NFKD normalized output? NO IT DOES NOT so regardless of how you feel it should look in the UI.....this is independent of EXPECTED OUTPUT.

""Writing an if-then statement saying ""if (output should be Japanese) then (split with ideographic space) else (split with ASCII space)"" is not exactly what i would consider ""hard"". If more languages require these types of considerations, and you don't want to deal with them, then don't support those languages.""

No it is really easy.....I am in fact doing it and that's what I'm saying.....devs will know to do that, the test data should not be deliberately made to fail to get a point across.....THE TEST DATA NEEDS TO MATCH EXPECTED OUTPUT FROM THE CODE, NOT HOW YOU THINK THE OUTPUT SHOULD LOOK IN A UI. How is it even remotely logical to have test data that will knowingly fail when compared against output from the reference code? it is not logical. If you want to make sure people display Japanese mnemonics with u3000 I completely agree and understand, however providing dud test data is not the way to do it!!!! Your comment about the UI considerations is enough to get the message across! Again as I have said, provide test data that works to the reference code else I will.
If the code does not output ideographic spaces for Japanese, it is incorrect code and should be changed immediately.

Generating a Japanese phrase using ASCII spaces will risk user funds, and should not be done.

The reference code you speak of was made for the English wordlist, and the creators of the reference code were not aware of this problem.

That was the whole reason the ""special considerations"" section was added. So that devs would know what to do for each wordlist.

If your code does use ideographic spaces, then your code is correct and will pass my tests. If someone else wants to copy/paste the reference code and slap Japanese.txt into it without reading the special considerations, then they will be generating incorrect phrases (with ASCII spaces) and that is not a PASS for the Japanese word list.
""If the code does not output ideographic spaces for Japanese, it is incorrect code and should be changed immediately.""

Why? Why would a specification that explicitly states a normalised wordlist with ASCII space between words have to output different for a different culture? Globalization, fonts, etc are the responsibility of the UI designer. Japanese people know to use ideographic spaces in their own language I'm sure.....

""Generating a Japanese phrase using ASCII spaces will risk user funds, and should not be done.""

Care to explain how so?

""The reference code you speak of was made for the English wordlist, and the creators of the reference code were not aware of this problem.""

It's not a problem, if a localization requires wide spaces, the person displaying the mnemonic will add wide spaces? Not a problem at all.

""That was the whole reason the ""special considerations"" section was added. So that devs would know what to do for each wordlist.""

I agree, you listed in the special considerations that when displaying the Japanese mnemonic, if the words were not spaced enough we use wide space. I literally learned that from your special consideration and put this in my code accordingly, that is the correct place for it, the special considerations, not the test data.

""If someone else wants to copy/paste the reference code and slap Japanese.txt into it without reading the special considerations, then they will be generating incorrect phrases (with ASCII spaces) and that is not a PASS for the Japanese word list.""

No....that is the whole point of test data....someone SHOULD be able to copy and paste it into the reference code and it should pass without modification. You do not use the test data to make a point, the test data should ALWAYS represent EXPECTED OUTPUT.
@Thashiznets ok, this conversation needs to continue somewhere else, and preferrably in one place and not 3.

This pull request is about clarifying that phrase generation should use ideographic spaces.

Your claim is dealing with the test vectors and is not directly related to this pull request.

The clarification stands. Generate phrases with ideographic spaces. Whether that be an add-on on top of the reference code (like in your case) or a modification of the reference code to accommodate Japanese.

If you would like to discuss the test vectors being split with ideographic spaces, and you would like to discuss it in a more visible place (bitcoin/bips) then make a pull request changing the link to my repo to a link to your repo.

If the discussion there seems to give consensus that the test vectors should ""pass"" phrases that are dangerous to the Japanese user, then I will change my repo. I am not unreasonable, I am just trying to keep the interests of an under-represented population on github in mind.

P.S.

> Care to explain how so?

なのか かえる  was reported as being mistaken for なの　かかえる when using ASCII
なのか　かえる  As you can compare here, it would be hard to miss the ideographic space.

ひめじし すあし  was reported as being mistaken for ひめじ　しす　あし
ひめじし　すあし again, ideographic space is much less confusing.

I think this happens less so in English... but this is why I like Mycelium's iPhone app just came out with showing one word at a time separately.
Ok, I still think the phrase that is used to derive seed bytes is what would be stored and compared against in test results, and I am very surprised that you would prefer test data that fails the reference code rather than to modify the reference code. But I guess it is out of my hands.

I won't submit new test vectors because I feel it is a bit rude of me to steal your thunder as it were, and my motivation was just to help other devs in the future who maybe scratch their head wondering why seemingly similar looking phrases fail their unit tests. I have got the tests modified and working in my code so I guess at least someone can look to my code and grab the phrases from there if they go looking.

Yea the thing with the spaces example you show is that the phrase has to be a minimum of 12 words and in increments of three words. If the user gets one or two spaces wrong, the sentence will no longer be a multiple of 3 and will fail code that checks for this! (Note I am unsure if the reference code does this checking, I am doing it in my code). It is however feasible if it is a big phrase so say 24 words and they miss 3 spaces so they turn 6 words into 3 and end up with 21 words instead of 24 and I agree that would cause key loss.

I would strongly suggest you fork and change the reference code to detect Japanese words in use and force ideographic space on phrase output, especially as it is normalised by the reference code on the way in I think it makes sense and see no issue to do that. And I don't see it breaking current implementations because ideographic or ascii in they all get normalised regardless in the reference code. (I have to normalise in from GUI layer because PCL doesn't do normalisation unfortunately).

Is there a reason you don't want to alter the code? I mean e.g. in my case I don't really know Python as a language.
I don't know if it is of any help in your debate. 
But what I ended up doing in NBitcoin is the following :

For normalization, I do nothing different between ideographic or ascii space. I just pass what the user pass as-is. (It works fine because ideographic is transformed into ascii during the normalization)
Thanks to that I am confident that it will not expose to any lost of fund for the user.

The only problem is when I need to split the words to extract the indices of the mnemonic.
What I ended up doing is adding a property called Wordlist.Space where the space is ideographic for Japanese wordlist and ASCII for other.
When I split the list, I split by using both : the ASCII space + the wordlist space, and remove empty strings.
Also, I split BEFORE the normalization. In fact my Mnemonic class do not store the normalized version of the mnemonic at all, I store exactly what the user passed. I normalize only for the seed generation process.

With my solution, the user is not forced to use ideographic space for Japanese, and even if he does, the generated seed or list of indices will be the same anyway.

When I generate the mnemonic, I use the worldlist space, since it should be the ""convention"" of the language. I have a basic level in Japanese, and I agree that using ASCII space is harder to read for this language.
@NicolasDorier You should normalise the the Mnemonic when it is input by the user!!! The reason for this I believe was to allow for reinputting the mnemonic with a keyboard that may not have accented character sets etc. What you are doing I think is dangerous. Any user input needs to be normalised!!!!!
@Thashiznets I don't think @NicolasDorier is doing anything bad or dangerous.

> For normalization, I do nothing different between ideographic or ascii space. I just pass what the user pass as-is. (It works fine because ideographic is transformed into ascii during the normalization)
> Thanks to that I am confident that it will not expose to any lost of fund for the user.

So he says for seed generation (which is what matters, really) he just normalizes, and due to ideographic turns into ASCII after NFKD normalization, this is correct.

> When I split the list, I split by using both : the ASCII space + the wordlist space, and remove empty strings.
> Also, I split BEFORE the normalization. In fact my Mnemonic class do not store the normalized version of the mnemonic at all, I store exactly what the user passed. I normalize only for the seed generation process.

I think he is saying that:
1. User inputs string
2. He tries to split the string using both ASCII and the wordlist space
3. He figures out which one worked (actually results in an array of proper length)
4. He stores the array in the Mnemonic class as an array of words.
5. However, the string that gets normalized and sent to PBFKD2 is the original string that the user input as is.

@NicolasDorier Am I right? Also, subsequent generations of seed will draw the mnemonic phrase and join them with wordlist.space, then normalize and PBFKD2?

It doesn't seem dangerous, but I could see where someone trying to mimic that method might be more prone to coding mistakes.
@dabura667 @nicolasdorier ah yes appologies guys, I missed the part where it states that nicolas is actually normalising before seed generation, that is fine. My error.
@dabura667 you are right. I don't use the array of words internally after splitting (only for getting indices), I expose the array in Mnemonic just for UI developers, so they can show it nicely to the user.
HI Nicolas,
Please I don't want to cause any cognitive breakdown, and to be honest I
don't know if is the right time to ask about it.
But,
Do you intent, in the near future ... to refactoring crypto primitive ""Ring
Signature"" code ( like Bytecoin schema ?)
Thanks
Kind Regards,
AA

:.  Andre Amorim      .:

Key-ID:

A70B444E

Fingerprint:

FAAD3B6556A8877B938EAB2FC05E2CB0A70B444E

On 31 January 2015 at 13:58, Nicolas Dorier notifications@github.com
wrote:

> @dabura667 https://github.com/dabura667 you are right. I don't use the
> array of words internally after splitting, I expose that just so UI
> developers can show it nicely to the user.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/130#issuecomment-72318693.
@andre-amorim I think this would be better to talk about that in [NBitcoin page](https://github.com/NicolasDorier/NBitcoin/issues), I do not know what a Ring Signature is. I am not a cryptographer, so if you have time to explain why it would help bitcoin and point out some link so I understand the why, what and how, I may implement it.
@nicolasdorier @andre-amorim agreed, tag me in any discussions as well as I have not heard of such thing either but keen to learn.
Ping authors @voisine @prusnak
I don't see any reason why bip39 couldn't be used to encode a seed for deriving ring signature private keys.
@voisine Sorry they got off topic.

The topic of the pull request is specifying that Japanese phrases should be split with ideographic spaces to prevent users from mistaking words that might appear to run together and make different words.
I think it's useful to explain ideographic space handling to help non-japanese developers. I only learned of it when testing to see how they are handled by NFKD normalization.

If it's the case that the reference implementation fails to handle japanese test cases, then we should correct the reference implementation concurrently with including the test cases.

There are no spaces between characters in the same word in the japanese word list, so you can normalize the phrase first, then separate words on ASCII space, and use the words to index into the wordlist to calculate the checksum. Is this correct?
@voisine Correct, so programmatically the reference code would just generate a mnemonic with an ASCII space between each Japanese word. And this is why I had an issue with the test vectors containing ideographic spaces instead of ASCII, because the mnemonic generated by the reference code was ASCII spaced, so I was failing against the Jap test data unless I explicitly added ideographic space after building the mnemonic. I didn't like this, however it has been decided (and I believe popped into the reference code) that any mnemonic that comes out that is Japanese comes out with ideographic spaces and I have followed suit in my .NET implementation. 
> I think it's useful to explain ideographic space handling to help non-japanese developers. I only learned of it when testing to see how they are handled by NFKD normalization.
> 
> If it's the case that the reference implementation fails to handle japanese test cases, then we should correct the reference implementation concurrently with including the test cases.

Trezor Python Mnemonic supports Japanese and ideographic spaces now.

> There are no spaces between characters in the same word in the japanese word list, so you can normalize the phrase first, then separate words on ASCII space, and use the words to index into the wordlist to calculate the checksum. Is this correct?

This is incorrect, as most interpreters will view them as different strings and will not be able to find the word in the list. (non-normalized string != normalized string on a per-byte basis... though depending on the interpreter perhaps it will accommodate for normalized strings when comparing... but I would rather not rely on that.)

Example:
れきだい
UTF8: e3828c e3818d e381a0 e38184 (twelve bytes for 4 characters)
Normalized: e3828c e3818d e3819f e38299 e38184 (notice how byte-wise it adds a new character, this is because it separates the た and the ゛ but when next to each other it would be shown as だ
@dabura667 All words on the wordlist are already Normalised as per the spec tho right? So unless the normalisation process created a space between characters of words there should be no spaces between characters and I believe that is what @voisine is asking. So basically what my interpretation of what @voisine is asking is can you take each word from the word list, add an ASCII space between them and generate a mnemonic. Correct me if I'm wrong but I think the answer to that is yes. The Ideographic is purely trying to account for user input and GUI display right?
If I understand @dabura667 correctly, then the japanese word list itself contains non-NFKD normalized words? If so, that should be corrected. Since key derivation involves normalization, then we can normalize the word list without affecting already generated wallets.
@bip39JP excellent, BIP39 actually specifies that wordlists must be NFKD normalized to begin with. I will try to remember to verify this is the case when future wordlists are submitted. Thanks for including a fix.
@bip39JP I'm assuming the test vectors remain the same as we should be normalising before generating the seed anyway correct?
@voisine @Thashiznets I have normalized the actual words on the wordlist now. (as well as the test vectors on my other repo) All I need to do now is make a pull request with python-mnemonic.

This should not cause problems, though, as all implementations should normalize the phrases before hashing, not to mention the only places using the Japanese list currently are my bip32jp site and Electrum (which is no longer BIP39 anyways, and has decided to normalize >> then remove all spaces for CJK languages... to I think I'll leave Electrum as is.)
@dabura667 I fear that github is displaying the wordlist the same either normalised or not, they certainly look the same I mean I don't know if copy and pasting from either/or results in different actual bytes between them, so it may be worth while forcing devs to normalise the list themselves rather than copy and paste? I believe I did this when putting the list in my implementation. As you say tho, given we normalise pre seed generation anyway I don't think anything is going to break as a result.
@Thashiznets normalization should result in identical looking results in most cases (ideographic spaces appear to be the odd exception)

ACK, this is important to get in.
https://github.com/trezor/python-mnemonic/pull/25/files

Yes. If you view it in a browser it shows normalized text as the same as it's non-normalized partner. (or at least in the case of hiragana + dakuten it does)

I believe if you copy it though... it should copy the normalized bytes...

Try opening the javascript console in your browser, pasting the below bytes, then overwriting the ""pastehere"" with the normalized (post-fix) then see the results, then try again but this time copy paste the old words. see if the bytes that come out differ.

``` javascript
var nstring = ""pastehere"";
var bytes = [];
for (var i = 0; i < nstring.length; ++i) {
  bytes.push(nstring.charCodeAt(i));
}
bytes;
```
@laanwj @prusnak Notice: Aaron gave an ACK.
",
jl2012,151,,fixing typo,closed,2015-05-26 08:07:25,"fixing typo
",https://github.com/bitcoin/bips/pull/151,['bip-0065.mediawiki'],2015-05-26T08:07:25Z,,,,
amingilani,154,,typo,closed,2015-05-26 08:06:57,"Fixed a typo in BIP70
",https://github.com/bitcoin/bips/pull/154,['bip-0070.mediawiki'],2015-05-26T08:06:57Z,,,,
Kirvx,152,,BIP39 French Wordlist - My proposal,closed,2015-05-26 08:06:06,"@voisine

Here are my restrictions:
1.  High priority on simple and common french words.
2.  Only words with 5-8 letters.
3.  A word is fully recognizable by typing the first 4 letters (special french characters ""é-è"" are considered equal to ""e"", for exemple ""museau"" and ""musée"" can not be together).
4.  Only infinitive verbs, adjectives and nouns.
5.  No pronouns, no adverbs, no prepositions, no conjunctions, no interjections (unless a noun/adjective is also popular than its interjection like ""mince;chouette"").
6.  No numeral adjectives.
7.  No words in the plural (except invariable words like ""univers"", or same spelling than singular like ""heureux"").
8.  No female adjectives (except words with same spelling for male and female adjectives like ""magique"").
9.  No words with several senses AND different spelling in speaking like ""verre-vert"", unless a word has a meaning much more popular than another like ""perle"" and ""pairle"".
10. No very similar words with 1 letter of difference.
11. No essentially reflexive verbs (unless a verb is also a noun like ""souvenir"").
12. No words with ""ô;â;ç;ê;œ;æ;î;ï;û;ù;à;ë;ÿ"".
13. No words ending by ""é;ée;è;et;ai;ait"".
14. No demonyms.
15. No words in conflict with the spelling corrections of 1990 (http://goo.gl/Y8DU4z).
16. No embarrassing words (in a very, very large scope) or belonging to a particular religion.
17. No identical words with the Spanish wordlist (as Y75QMO wants).

4 wordlists used:
- http://pastebin.com/Drs1HY0v (3726 words) from http://o.bacquet.free.fr/db2.htm
- http://goo.gl/ymSBeY (336531 words) from http://www.pallier.org/ressources/dicofr/dicofr.html
- http://dict.xmatiere.com/noms_communs_par_nombre_de_lettres.php
- Thomas Voegtlin's wordlist

Spelling verified with Hunspell French Dictionnary (1990 and Classique) in Notepad++, and meaning verified with https://fr.wiktionary.org and http://www.larousse.fr/ for hundreds words.

Guys can review:
@ecdsa @NicolasDorier @EricLarch @nicolasbigot @pollastri-pierre

Thanks to Thomas Voegtlin for his wordlist!

Please wait before merging.

**--- The following message is partially outdated because of the evolution of the wordlist. ---**

J'ai défini un maximum de restrictions ""raisonnables"" pour qu'un individu puisse deviner le plus facilement possible un de ses mots en cas d'oubli (ou s'en souvenir facilement).

Pour les mots ""embarrassants"", il s'agit de mots qui peuvent être assimilés à une vilaine insulte, de certains mots relatifs à une maladie grave, à la mort, à la pauvreté, au crime, à la violence, au domaine médical, à des attitudes et bien d'autres.

J'ai fait de mon mieux pour supprimer les mots qui présentaient une ressemblance avec un autre mot, à l'oral comme à l'écrit.
Plusieurs centaines de mots qui avaient une différence de 1 lettre (ou 1 lettre différente) avec un autre mot ont été supprimés.
Je considère que le résultat est plutôt satisfaisant, loin d'être parfait, mais tout à fait correct.
Aussi, les restrictions n°6 et 10 sont complémentaires à ce problème.

J'estime qu'il y a 1% de mots potentiellement inconnus du public (comme ""quantum""), et 5% de mots avec des sens qui sont potentiellement incertains par le public (comme ""fongible"").
Je considère ces marges comme convenables.

Notez que certains éléments chimiques du tableau périodique sont présents, les plus populaires.

Pour une vérification plaisante, voici la version imprimable (5 pages PDF A4):
https://www.dropbox.com/sh/xlq3x2anb706uw1/AADUYAqcBvkvUPdhwC2uLWmEa?dl=0

Si vous voulez vérifier en 1 lecture, focalisez-vous sur les restrictions n°2,3,5,8 et 11.
Étant donné l'homogénéité de la liste (et le bon sens qu'elle doit avoir), les mots contraires aux restrictions n°1,4 et 13 devront vous sauter aux yeux.
Comptez 15 minutes de lecture par page.
Je recommande quand même une deuxième lecture.

J'espère que vous apprécierez cette wordlist, c'est un travail de plus de 70 heures que je n'envisageais pas de faire au début, étant donné l'ampleur et la responsabilité de la tâche.

Si un mot vous semble inapproprié, ou si vous avez des remarques à faire par rapport aux restrictions, vous pouvez m'en faire part.

Sachez aussi que si elle vous convient, elle sera intégrée dans une des prochaines versions de breadwallet avec les autres wordlists étrangères.
",https://github.com/bitcoin/bips/pull/152,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/french.txt']",2015-05-26T08:06:06Z,,"['EricLarch', 'NicolasDorier']","Are there restrictions on the fact that each word should be separated by more than one letter? For instance we had the case of someone writing down ""fog"" instead of ""frog"" (or the otherway around I'm not sure), and by chance both were valid words in the dictionnary.
Since since this a new dictionary, I think we have the opportunity to maybe check this rule with an algorithm just to reduce the possibilities of very costly mistakes.
I did not used a script for that, I eliminated the most glaring similarities.
And I do not have the skills to do that :/
Good idea, I will also review it. For the similar words, I will check the combinaison of all levenstein distance, will be quick. Also, I think you word list is not in KD normalization (not a big deal, I'll fix that)
Ah one more question. I'm not sure about some words which are either very unknown, or often misspelled. (like zircon and wapiti, which is the only I have seen after quick scan, and maybe the only one)

Do you think we should change such words ?
@NicolasDorier Thanks for the help :)

I used

```
perl nfkd.pl < wordlist.txt > nfkdworldlist.txt
```

and nfkd.pl is

```
#!/usr/bin/perl

use Unicode::Normalize;
use strict;
use warnings;
use open qw(:std :utf8);

while (<>) {
    print NFKD(""$_"");
}
```

Thanks to Aaron Voisine for this!
Is that ok?

Of course we can change this kind of words if we find a word that is compatible with the restrictions.
I reviewed the first 1024, here my difficulties :

acerbe  I don't understand meaning out of context, more less spelling it
agrafer agrapher ? aggrapher ? easy mistake
azur    azure with a 'e' ? easy mispell
bénigne   Difficult to pronounce of the phone + rare word
bielle  never heard this word
biopsie never heard
biotype never heard
bluffer easy mispell ""bleuffer""
brome   never heard
bruine  never heard
buccal  easy mispell (bucal)
cadastre    never heard
caduc   easy mispell ""caduque""
calepin never heard
caneton easy mispell ""canneton""
césium    never heard (almost)
cloporte    never heard
cobalt  never heard
coccyx  never heard
cosy    easy misspell ""cosie""
dactylo did not know it existed, thought it was abbreviation of ""dactylographie""
embryon easy misspell ""embrillon""
ethnie  ""éthnie"" ?
fakir   easy misspell (faquir)
fenouil easy misspell ""fenouille""
filetage    never heard
final   can confound with ""finale""
gallium never heard
gecko   never heard
grivois never heard
hydromel    never heard
idylle  never heard
iguane  difficult to spell right

All of that is surely subjective. We don't have to replace if you think I am the only one having those difficulties. I'll review the next 1024 later. Let me know what you think about these words.
Thanks for the review :)
Have you googled these 17 unknown words?
I think after a search most of the people will say ""Ah yes I know this word"".
What do you think @EricLarch ?
Anyway, it represents 1.6% of these 1024 words, that's pretty correct.
I agree for all of the rest.
""ethnie"" is correct :)
""dactylo"" is the job http://www.larousse.fr/dictionnaires/francais/dactylo/21484, but there is also ""dactylographe"" which is the the old form according to larousse, so maybe we should delete this word.
""acerbe"" http://www.larousse.fr/dictionnaires/francais/acerbe/604
But before trying to change all these words (if we can, finding extra words is complicated, I will try each day), it seems more logical to me to work on the 1 letter difference first, no?
I'm very curious about how many words are in conflict with another :)
I agree the bénigne and bluffer can be difficult (I have seen poker players write ""bleuffer""...). For the others I would think that any French native speaker must know them, and I don't think that anyone litterate would write ""embrillon"" or ""faquir"" ever. I understand some people can have troubles with spelling, but then no words would be safe. 
> it seems more logical to me to work on the 1 letter difference first, no?

Don't, I can do that automatically. I will do it once we agreed on the words. (I'll also code something up to verify you respected your restrictions)

> For the others I would think that any French native speaker must know them

I am native speaker, but I admit I am not very good. ;)
If all of you think that the problem is between my screen and my chair, then I have no problem into believing it. ;)
I'll review the next one tomorrow.
> Don't, I can do that automatically. I will do it once we agreed on the words. (I'll also code something up to verify you respected your restrictions)

Ok, thanks for your time to code :)

> I am native speaker, but I admit I am not very good. ;)
> If all of you think that the problem is between my screen and my chair, then I have no problem into believing it. ;)
> I'll review the next one tomorrow.

It's also cool to learn words ^^
yeah it is cool, but I'd just hope people will not have to spell words on phone, which will happen for unknown words. But I'm fine with it if you think I am one of the only who do not know them.

I expect most service provider using BIP39 will auto correct words for the user. (I will surely include that in nbitcoin... even if only for me ;D)
@NicolasDorier Have you had the time to review the second part? :)
shit I forgot, working on that sorry
Here it is :

iridium Never heard
jacinthe    jacynthe ? jacynte ? jacinte ?
jaloux  jalou ?
joyau   joyaux ?
lasso   lasseau ?
momifier    mommifier ?
obturer Never heard
oxyde   oxide ?
perdrix perdrie ?
phoque  foque ?
pylône    ô ???
rhodium never heard
sextuor never heard, I understood ""sexe tueur"" :s 
suricate    never heard
thorax  torax ?
ubuesque     never heard
vanadium    never heard
wapiti  never heard
zircon  never heard

My remark are typical spelling mistake that can be done. Once you agreed on the words to change let me know, I'll then run some word analysis on the list. (dictionnary check / that your rules are satisfied / that 2 words are not too similar)
Thanks :)
Never heard suricate?
https://i.imgur.com/TE6PlMx.jpg
They have a reserved place in the wordlist ^^
I will try to find many words in the next 2 days.
Well, I heard about suricate, as far as I was concerned, it was a french comedian group on youtube. :p
Ok, I propose to change these words:

```
bénigne bluffer cosy dactylo césium gecko gallium grivois sextuor
cadastre rhodium vanadium iridium jacinthe jaloux brome azur
agrafer caduc zircon lasso momifier fenouil bruine bielle final bise
bibelot fakir
```

EDIT: ""fakir"" too
by adding

```
biberon banlieue financer éthanol prélude taureau slogan punaise sternum sottise burin
tétine filière esquiver binaire festival pyjama opaque pharaon piéton pizza boycott
phobie fémur féodal fissure rituel rallye
```

And wombat (https://i.imgur.com/scN9gIU.jpg) :bear:

What do you think?
pyjama.  pijama ? (I would have bet it was spelled like that)
rallye   rallie ? (comme rallier)

Except those I'm good. I like wombat, but I doubt lots people know.
What do you think ? (once again, if you think it is fine, I'm fine with it too, I just hope people do not stress too much when they don't manage to spell right 25 words)

Tell me when you update the list that I run some code on it.
Thanks :)
I can change ""rallye"" by ""rallonge"", ""pyjama"" by ""pyrolyse"" ,""poreux"" or ""pixel"" you decide, or another word.
Maybe add ""yacht"" (the boat) instead of wombat, because we don't have words starting by ""y"".
rallonge et pixel, ok pour yatch.
@NicolasDorier Updated
I also deleted ""wapiti"" and add ""linéaire"".
I change the encoding, but apparently github doesn't updated the whole file.
So here is the original https://www.dropbox.com/s/chaxgqotio59rf4/french.txt?dl=0
Note that you are a ""collaborator"" on Kirvx/bips, so feel free to correct what you want if you can (i don""t know what a collaborator can do).
thanks, I'll run some word analysis to check everything is fine. (Hopefully before sunday)
poncer -> ponctuel
tréfonds -> trèfle
pâturage (which is more used in the plural) -> gerbille

Same dropbox link
https://www.dropbox.com/s/chaxgqotio59rf4/french.txt?dl=0
did you update on github ? I prefer using the github version for my tests, so I'm sure there is no mistake in the modifications. (don't worry about encoding, I'll fix it)

Ps : gerbille => never heard :D
Yes update on github.
Ok i will try to change gerbille
""gerboise"", ""graffiti"", ""glycémie"" or another ? :)
ok let's take ""graffiti"" 
Updated.
Here similar words (separated by 1 letter, accent removed)

```
amener,mener //Similar
argent,urgent
banque,barque
baraque,barque
baron,bâton
bolide,solide
bonifier,tonifier
bonus,tonus
céder,coder
choquer,croquer
crayon,rayon
créer,crier
curieux,furieux
défaire,refaire
doyen,moyen
entier,envier
épreuve,preuve
éprouver,prouver //Similar
établir,rétablir //Similar
fermer,ferrer
fièvre,lièvre
figer,fixer
flaque,plaque
génie,genre
herbe,herse
humeur,humour
hyène,hymne
infecter,injecter
léger,loger
local,loyal
loger,louer
loger,lover
louer,lover //Lover is unknown + very similar to other words (4 occurences)
maison,saison
malade,salade
ministre,sinistre
notaire,notoire
piéton,piston
podium,sodium
préparer,réparer //Similar
proie,prose
rare,rire
redire,réduire
refermer,réformer
rejeter,répéter
réparer,séparer
soupirer,soutirer
toiture,voiture
```

I noted potential problems.
What do you think ?

Checking other stuff...
I also noted the following collision with Spanish. (btw, the Spanish list is not normalized on github)

```
ceder,céder
enorme,énorme
gemir,gémir
ideal,idéal
serie,série
```
",
voisine,147,,NFKD normalize BIP39 spanish word list,closed,2015-05-21 10:28:05,"BIP39 specifies that word lists must be Unicode NFKD normalized. This should not affect existing wallet seeds since they must be NFKD normalized prior to deriving a master private key.
",https://github.com/bitcoin/bips/pull/147,['bip-0039/spanish.txt'],2015-05-21T10:28:05Z,,['dabura667'],"This should also be done for Chinese... I assume you're going through the languages and checking? or would you like me to make a few pull requests as well?
I checked. They look good, but it would be great if you can double check my work.
Double checked, both simplified and traditional give the same hash before and after running through NFKD.
@laanwj PR by BIP author. Please merge. Thanks.
",
ethernomad,131,,"Mention that ""Unsecure money receiver"" use-case prevents theft",closed,2015-03-11 14:30:39,,https://github.com/bitcoin/bips/pull/131,['bip-0032.mediawiki'],2015-03-11T14:30:39Z,,,,
petertodd,132,,BIP62: Make OP_0 a validly encoded signature,closed,2015-03-11 14:19:29,"Previously BIP62 did not provide a compact way to delibrately encode an invalid signature. For example in BIP19 if m != n with this change you can provide compact OP_0's in the scriptSig rather than lengthy
DER-encoded signatures.

Note that we may want to further expand on this change in the future by saying that only OP_0 is a ""valid"" invalid signature; BIP19 even with this change is inherently malleable as the invalid signatures can be any validly encoded DER signature.

CC: @sipa 
",https://github.com/bitcoin/bips/pull/132,['bip-0062.mediawiki'],2015-03-11T14:19:29Z,,"['sipa', 'gmaxwell']","ACK
ACK.
",
UdjinM6,137,,BIP39 - Add reference to JavaScript implementation,closed,2015-03-11 14:18:36,,https://github.com/bitcoin/bips/pull/137,['bip-0039.mediawiki'],2015-03-11T14:18:36Z,,,,
harding,138,,BIP66: Number Examples To Match Implementation Tests,closed,2015-03-11 14:17:59,"The Bitcoin Core tests in script_tests.cpp refer to these examples by number, but the text examples are in an unordered list, making them hard to follow.  This changes the list to an ordered (numbered) list.

CC: BIP author @sipa
",https://github.com/bitcoin/bips/pull/138,['bip-0066.mediawiki'],2015-03-11T14:17:59Z,,['sipa'],"ACK

On Fri, Jan 30, 2015, 10:52 David A. Harding notifications@github.com
wrote:

> The Bitcoin Core tests in script_tests.cpp refer to these examples by
> number, but the text examples are in an unordered list, making them hard to
> follow. This changes the list to an ordered (numbered) list.
> 
> ## CC: BIP author @sipa https://github.com/sipa
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/bitcoin/bips/pull/138
> Commit Summary
> - BIP66: Number Examples To Match Implementation Tests
> 
> File Changes
> - _M_ bip-0066.mediawiki
>   https://github.com/bitcoin/bips/pull/138/files#diff-0 (26)
> 
> Patch Links:
> - https://github.com/bitcoin/bips/pull/138.patch
> - https://github.com/bitcoin/bips/pull/138.diff
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/138.
",
jonasschnelli,141,,[Bip37] fix SPV link and remove empty Smart Property link,closed,2015-03-11 14:10:32,,https://github.com/bitcoin/bips/pull/141,['bip-0037.mediawiki'],2015-03-11T14:10:32Z,,['luke-jr'],"Why not fix the latter link as well? https://en.bitcoin.it/wiki/Smart_Property
Yes. Why not.
Added.
",
Kefkius,143,,BIP-0044 - add a compatible wallet,closed,2015-03-11 14:09:58,"Add Encompass to the list of BIP-0044 compatible wallets.
",https://github.com/bitcoin/bips/pull/143,['bip-0044.mediawiki'],2015-03-11T14:09:58Z,,,,
maraoz,145,,Update BIP32 to add bitcore as implementation,closed,2015-03-11 14:09:08,,https://github.com/bitcoin/bips/pull/145,['bip-0032.mediawiki'],2015-03-11T14:09:08Z,,,,
droark,140,,Fix broken source code link.,closed,2015-02-09 12:40:22,,https://github.com/bitcoin/bips/pull/140,['bip-0062.mediawiki'],2015-02-09T12:40:22Z,,,,
sipa,135,,Add BIP66,closed,2015-01-28 05:53:01,,https://github.com/bitcoin/bips/pull/135,"['README.mediawiki', 'bip-0066.mediawiki']",2015-01-28T05:53:01Z,,,,
np,133,,Add a link to my CLI interface in Haskell,closed,2015-01-15 14:30:45,,https://github.com/bitcoin/bips/pull/133,['bip-0032.mediawiki'],2015-01-15T14:30:45Z,,,,
shea256,120,,Fix a few minor typos in bip 0065,closed,2015-01-10 09:53:09,,https://github.com/bitcoin/bips/pull/120,['bip-0065.mediawiki'],2015-01-10T09:53:09Z,,"['petertodd', 'fanquake', 'laanwj']","Ping author @petertodd
ACK
(yeah, github never notified me about this)
@laanwj Looks like this can now be merged.
",
jonasschnelli,129,,"Bip32, fix missing parenthesis",closed,2014-12-18 08:19:52,"reported by fenn on #bitcoin-dev [02:59:57]
",https://github.com/bitcoin/bips/pull/129,['bip-0032.mediawiki'],2014-12-18T08:19:52Z,,"['Thashiznets', 'laanwj']","Thanks for solving this critical issue, _phew_ that was close, but it's all good again.
:-)

A vagabonded house start with a little crack in the window.
That's a bit rich coming from the bloke who refused to pull a one line addition of a hyperlink to a document because the commit message was not descriptive enough ;p
Youre're underestimating this. That unclosed parenthesis could have swallowed the whole universe when left unchecked.
&lt;/sarcasm>

@Thashiznets I'm also really easy if the commit message and changes are up to par. QA is a thankless job but we got to have our standards.
",
bip39CN,114,,Update bip-0039-wordlists.md,closed,2014-12-16 07:09:54,"Added Chinese wordlist.
",https://github.com/bitcoin/bips/pull/114,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/chinese_simplified.txt', 'bip-0039/chinese_traditional.txt']",2014-12-16T07:09:54Z,,"['Thashiznets', 'voisine', 'schildbach', 'dabura667', 'bip39JP']","I don't speak chinese, but that's the right number of words. :)

What do you think of mentioning the word separator in the ""special considerations"" similar to the japanese word list?
Word separator is probably not a concern for the Chinese word list, because every word in the list is unique and exactly 1 character long.
Does chinese text input typically use ascii space character 0x20 or ideographic space like japanese? If every word is 1 character long, does it use any spaces at all?
Chinese text typically does not use any spaces at all.
If it doesn't matter either way, devs implementing it might get confused.

I would suggest adding a note in special considerations stating ""separate with normal ASCII space as per standard""

Otherwise wallets will try to deduce things on their own.

2014/10/21 8:48$B!""(Bbip39CN notifications@github.com $B$N%a%C%;!<%8(B:

> Chinese text typically does not use any spaces at all.
> 
> $B!=(B
> Reply to this email directly or view it on GitHub.
Since many wallet developers (like me) don't know chinese and wouldn't know not to include spaces, I think it's important to clarify in the ""special considerations"" section. It should either state that there are no spaces or that words should be separated by an ascii space. As the fluent speaker, you should decide which is correct. From a technical standpoint it doesn't matter which as long as everyone does it the same way.
Updated CL. For the sake of uniformity and simplicity we propose to use the same ASCII spaces (0x20) as word separators, as per standard.
ACK
Just wondering... have you looked into whether or not NFKD normalizes Traditional and Simplified to the same symbol?

Or is it not conceivable that someone might remember a phrase in simplified and try to type it out in traditional.

(sorry if this is a dumb question, we only have one set of Hanzi in Japan)
Re: dabura667 unfortunately in general it is not the case; for many simplified Chinese characters their traditional forms are mapped to different code points.

The word list in this pull request contains the most common 2048 simplified Chinese characters in use. A different list must be used for traditional Chinese which is treated as a different locale.

If however it is desirable to avoid two separate lists we can try to compile a list of characters whose simplified and traditional forms are identical.
@bip39CN What kind of population uses both as compared to only one and only the other? Are there any figures on that?...

I am not sure, as I do not know much of China / Taiwan etc.

My (probably wrong) impression was Taiwan = Traditional, Mainland = Simplified, and older people in mainland still remember a lot of Traditional from before the switch was made.

Also I think most Taiwanese learn Simplified at some point...

idk, correct me if I'm wrong.

I don't think multiple wordlists would be confusing... but you might want to change the txt filename and the link to say ""Chinese (Simplified)"" or something of the like.
Updated CL with separate Chinese (Simplified) and Chinese (Traditional) wordlists.
Both Chinese wordlists now added into the .NET implementation :D 
@bip39CN Heya any plans to create test vectors for the two CN wordlists?
@bip39CN @dabura667 @voisine @laanwj Hi all, did we think about Chinese simplified and chinese traditional sharing characters and how that effects Language Auto Detect? I say this because I am literally coding language auto detect unit tests in my code now and having the same characters appear in each while unlikely, could lead to a scenario of the incorrect language being auto detected. Now the thing to ask here is, does it matter? I mean if all the characters are in both wordlists, from a seed generation point of view it won't matter, however if someone is determining that language for use later on then it could become a problem? Food for thought yea?
I guess a way to solve in language auto detect is if one or more traditional character is found it is traditional not simplified. But it may well be worth mentioning this in the spec? But then I just realise it is possible to create pure chinese simplified string even when targeting traditional so that doesn't solve,
@Thashiznets https://github.com/jpatokal/script_detector/blob/master/lib/chinese_detector.rb

This ruby script contains two arrays with the unicode code points for an array of all Simplified-only characters and an array with Traditional-only characters.

The two arrays are only of characters that don't exist in each other's character set.

This will help with auto-detect.
@dabura667 Hiya, this might help but what it doesn't solve is the scenario where someone is using chinese traditional and the mnemonic contains only simplified characters I realise that derived bytes will be the dame, so it doesn't effect seed generation but my concern lies with lets say a program is set to chinese traditional, and creates entropy and builds a chinese traditional string, however, all the characters in the chinese traditional string are also in the simplified which means if we close the program and reopen and type in the mnemonic again, there is no way to determine from the mnemonic if it is a simplified or traditional one as the characters are common in both sets. Do you see what I mean? I propose that we force one traditional char in all generated traditional mnemonics. So as to keep the randomness we would simply just regenerate a new mnemonic if it didn't contain a traditional character, thoughts?
could you run a check on how many ""words"" simplified and traditional have in common?

I am busy all day today.

2014/12/19 8:04、Thå Shïz notifications@github.com のメッセージ:

> @dabura667 Hiya, this might help but what it doesn't solve is the scenario where someone is using chinese traditional and the mnemonic contains only simplified characters I realise that derived bytes will be the dame, so it doesn't effect seed generation but my concern lies with lets say a program is set to chinese traditional, and creates entropy and builds a chinese traditional string, however, all the characters in the chinese traditional string are also in the simplified which means if we close the program and reopen and type in the mnemonic again, there is no way to determine from the mnemonic if it is a simplified or traditional one as the characters are common in both sets. Do you see what I mean? I propose that we force one traditional char in all generated traditional mnemonics. So as to keep the randomness we would simply just regenerate a new mnemonic if it didn't contain a traditional character, th oughts?< /p>
> 
> —
> Reply to this email directly or view it on GitHub.
Yep I can do that. Also right you are, I keep seeing one word and think char due to my native language but correct I mean word not char.
Hello @bip39JP 
There is exactly 1275 words shared common between the cn-simplified and cn-traditional wordlists posted here, well over half of each wordlist making the odds of deriving mnemonics that are simplified/traditional indeterminate, very feasible.
@bip39JP says:

""So a 0.3% chance for 12 word phrase to contain only words in both lists. And a 0.001% chance for 24 word phrase.

3 in 1000, or 1 in 100000 would be thrown away.

But tbh, why would you need to auto detect?""

My maths sucks so I'll take your word on those stats which is actually more favourable than I thought!

I'm auto detecting language to rebuild entropy bytes using the correct language  wordlist when the user re-inputs a mnemonic i.e when rebuilding a wallet from a mnemonic phrase. Or if they input a new mnemonic from words I try auto detect language and rebuild entropy. I guess it is not dire as the mnemonic itself will still derive the same seed bytes language is irrelevant in that case, it's just because I'm providing the ability to swap between languages using backwards derived entropy. I just had a thought tho, as long as the Chinese Simplified words that match the Chinese Traditional words are in the exact same position in each wordlist, the entropy bytes should be same no matter which language is used so I think as long as same, same on lists it should be no issue.

See if you can fire up the demo GUI on my .NET implementation to see hot swapping between languages. I'm not allowing the typing in of mnemonic but the API does support it. It will only allow creation of hot swappable bytes if all words are in the wordlist, if not I provide a static method to just purely derive seed bytes from words.
I think it's crucial we can do auto-detection for the language. No user wants to be bothered with (seemingly) redundant input of information.
What do you mean by redundant input?

2014/12/19 20:10$B!""(BAndreas Schildbach notifications@github.com $B$N%a%C%;!<%8(B:

> I think it's crucial we can do auto-detection for the language. No user wants to be bothered with (seemingly) redundant input of information.
> 
> $B!=(B
> Reply to this email directly or view it on GitHub.
@bip39JP From a users perspective if I enter some chinese words I should not have to select ""Yeah, and by the way this is Chinese"". It will redundant to the user.

Instead, I plan to test user input against all available word lists. As the user types along (and selects autocomplete suggestions from all word lists), wordlists will be excluded progressively. For example, I expect input of a Chinese character will exclude all latin-based wordlists. After the twelfth word, I'd expect the wordlists to be narrowed down to one.
Why does that matter though?

Why can't you just try and detect, and if you fail to detect, just run it through the pkbdf?

2014/12/19 20:47$B!""(BAndreas Schildbach notifications@github.com $B$N%a%C%;!<%8(B:

> @bip39JP From a users perspective if I enter some chinese words I should not have to select ""Yeah, and by the way this is Chinese"". It will redundant to the user.
> 
> Instead, I plan to test user input against all available word lists. As the user types along (and selects autocomplete suggestions from all word lists), wordlists can be excluded. For example, I expect input of a Chinese character will exclude all latin-based wordlists. After the twelfth word, I'd expect the wordlists to be narrowed down to one.
> 
> $B!=(B
> Reply to this email directly or view it on GitHub.
",
Thashiznets,128,,BIP39 Adding reference to .NET C# (PCL) API,closed,2014-12-16 07:00:47,"Addition of a .NET C# (PCL) into the BIPS39 wiki documentation for .NET developers whishing to use BIPS39 in a .NET project to derive seed bytes from a mnemonic sentence.
",https://github.com/bitcoin/bips/pull/128,['bip-0039.mediawiki'],2014-12-16T07:00:47Z,,,,
jonasschnelli,122,,fix secg.org secp256k1 docs link,closed,2014-12-09 08:22:23,"I think this is the right link to secp256k1 recommended parameters (page 9)
",https://github.com/bitcoin/bips/pull/122,['bip-0032.mediawiki'],2014-12-09T08:22:23Z,,['sipa'],"ACK
",
wink,123,,"Update bip32 wiki, repo moved",closed,2014-12-09 08:20:12,,https://github.com/bitcoin/bips/pull/123,['bip-0032.mediawiki'],2014-12-09T08:20:12Z,,['aalness'],"ACK. I've used it. It's there :)
",
kaykurokawa,125,,Updating status of BIP 0010,closed,2014-12-09 08:19:30,"Armory no longer uses BIP 0010 for multisignature transaction, and there does not seem to be any wallets that have actually implemented BIP 0010. BIP 0010 status should be marked as withdrawn, and the dead links to the implementation should be updated.
",https://github.com/bitcoin/bips/pull/125,"['README.mediawiki', 'bip-0010.mediawiki']",2014-12-09T08:19:30Z,,"['gmaxwell', 'etotheipi', 'laanwj']","I think is probably the right thing to do. We should ping Alan. @etotheipi
Yes, that's fine.  Armory no longer uses BIP0010.  It served its purpose, and now we've moved onto better and bigger things.  
you need to update the table in README.md as well
Updated the REAMDE table. Thanks. 
",
aalness,127,,[BIP62] Add explicit note about OpenSSL wrt low S values,closed,2014-12-09 08:18:34,,https://github.com/bitcoin/bips/pull/127,['bip-0062.mediawiki'],2014-12-09T08:18:34Z,,"['sipa', 'Thashiznets']","ACK
What's ACK mean? Acknowledged? And who comes along and looks at pulls and decides what to pull etc? Looks like some pull requests sitting there for a while? I'm reasonably new to git stuff i've only ever really hosted stuff on here so new to the whole pull thing.
ACK means that I agree with merging this.
",
wink,124,,Short one digit in BIP32 doc notes.,closed,2014-11-21 09:36:01,,https://github.com/bitcoin/bips/pull/124,['bip-0032.mediawiki'],2014-11-21T09:36:01Z,,['sipa'],"ACK
",
petertodd,118,,BIP65 CHECKLOCKTIMEVERIFY,closed,2014-11-12 10:31:19,"@gmaxwell As discussed.
",https://github.com/bitcoin/bips/pull/118,"['README.mediawiki', 'bip-0065.mediawiki']",2014-11-12T10:31:19Z,,"['harding', 'ghost', 'luke-jr', 'hoffmabc']","The process described under the escrow portion is technically not escrow.  Escrow is when a third party has control of the funds.
@millybitcoin I'm not sure what you mean by that. There is technically a third-party represented by the multisig signing group. It is not a single person but rather a group fulfilling this role. I believe this meets your definition perfectly fine.
It is not ""my definition,"" it is the normal definition of escrow which means a third party has custody of the funds.  This is also a legal definition and escrow operators normally need a special license and bonding because they have custody of the funds.  In my State an escrow agent needs a special license and needs to be fingerprinted.  

If you have a 2-of-3 transactions where 2 people are doing a transaction and a third party has authority to sign the transaction as a mediator then that is not escrow because the mediator does not have custody of the funds.

May people also confuse escrow with dispute resolution.  Dispute resolution is a separate and distinct process from escrow and is usually a conflict of interest for one party to do both.  You can see the agreement at escrow.com as an example of how these functions are separate
maybe it should be labeled ""Escrow Alternative"" or ""Mediated Transaction""
","I think there's a missing ""requires"" between line 87 and 88: ""is created that [requires] the co-operation of both parties""
Thanks!
Specific example on how to ensure the transaction is mined prior to its output's lock time?
Point is, with CHECKLOCKTIMEVERIFY you don't have to prove that as it's a transaction output that can't be spent. All you need to do is prove that txout was created a prior to the lock time.
Created _and mined_ prior to the lock time. Nothing stops someone from holding on to a proof-of-sacrifice until they find the later-block themselves, and nothing guarantees the fair person's transaction will be mined until that point either...
I think making that distinction is rather pedantic; in the context of the paragraph it should be obvious to anyone who might need proof-of-sacrifice that when we say an output is 'created' we mean the transaction has been mined.
Anyhow, this use case is not supported by the current draft as far as I can see. If it is, an example would be helpful.
This fails to distinguish between block-height and timestamp locktimes. Admittedly, this is just a summary, so maybe full details aren't needed here - but I don't see a proper Specification section in this BIP either.
What would you expect to see in the BIP for that usecase to be ""supported""?
The proper specification is the reference implementation, a very delibrate choice.
A way to convey ""<N blocks | N seconds> after the block height/time this transaction was mined in""
The specification should be documented in the BIP.
For proof-of-sacrifice you want the txout to be locked for months if not years to get past miner business cycles. I'm not worried about a transaction being censored when the timeframes are that long.

Anyway, a future BIP can define a CHECK-BLOCKHEIGHT-VERIFY opcode that leaves a block height on the stack, which could be used in conjunction with ADD to do what you want. But that's a heck of a lot of complexity right now for a very niche use-case.
Yes, and that reference implementation is included in the BIP, both in the form of a few lines of code, as well as a reference by git commit hash to a implementation including all dependencies.
Censorship isn't likely to be the problem. More likely the miner just won't see value in mining the initial transaction until they can at the same time redeem the sacrificed funds.

Since this has a section of its own, it is obviously a primary use case and should be addressed. No need to mess with the stack for it, either...
Doing what you want would be about another order of magnitude more actual code changes; not worth it. If other people have strong feelings about this use-case I'd rather just remove it from the BIP.

Quite seriously, every additional line of consensus-critical code changed represents at minimum hours if not tens of hours of work.
"
maraoz,89,,Draft for p2sh multisig wallet structure,closed,2014-10-22 16:15:44,"Discussion: https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg05156.html
",https://github.com/bitcoin/bips/pull/89,"['README.mediawiki', 'bip-0045.mediawiki']",2014-10-22T16:15:44Z,,"['gmaxwell', 'Michagogo', 'laanwj']","This seems to be stuck?

As this has been discussed on the mailing list and the response is positive, I think you should move to the next phase and request a BIP number from gmaxwell.
I already did, 3 times in the past 6 months. There's no rush but @gmaxwell has been unresponsive so far.

On Wed, Oct 15, 2014 at 6:16 AM, Wladimir J. van der Laan
notifications@github.com wrote:

> This seems to be stuck?
> 
> ## As this has been discussed on the mailing list and the response is positive, I think you should move to the next phase and request a BIP number from gmaxwell.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/89#issuecomment-59178533
It wouldn't be the first time it takes a long time - @gmaxwell is very busy, but I don't think number allocation should be a blocker in the BIP process. As I've stated in the past, I think we need more BIP editors that can deal these out to avoid this.
Gah. BIP 45.
updated with assigned number
Don't forget to add an entry in the table in https://github.com/bitcoin/bips/blob/master/README.mediawiki
updated:
- squashed commits
- added mailing list reference
- fixed @laanwj suggestions
- added more examples 
","Typo?
HDPM = hierarchical deterministic P2SH multi-signature, as defined above.
Or is there another typo there? (I can't english)
""create, use, import, and HDPM wallets.""

I suspect what you mean is ""create, use, and import HDPM wallets."", or maybe you accidentally a word and it should be ""create, use, import, and <missingword> HDPM wallets.""
You're right, thanks!
Please don't add a project-wide gitignore. Gitignore is meant for temporary files that are generated during the build process. We don't have a build system for bips, so there are none.
There are various other ways in which you can see local ignore rules, see https://help.github.com/articles/ignoring-files/
Created date needs to be filled in
Thanks for explaining! I didn't know about local ignore rules :)
"
Y75QMO,112,,Update bip-0039-wordlists.md,closed,2014-10-17 08:14:26,"Added Spanish wordlist.
",https://github.com/bitcoin/bips/pull/112,['bip-0039/bip-0039-wordlists.md'],2014-10-17T08:14:26Z,,"['bip39JP', 'laanwj']","You should rebase your previous branch using

git pull --rebase upstream master

While on your other pull request's branch, then fix and merge conflicts.

Once you're done fixing any conflicts

git cherry-pick <hash of THIS commit>

That will cherry pick this pull request's commit and place it on your newly rebased branch.

If you don't do this, it will be difficult to merge your previous pull request.
git cherry-pick _hash of this commit_

Without the asterisks
Damn formatting and mobile website not having an edit button...
@bip39JP it doesn't conflict
",
Y75QMO,100,,BIP0039 added Spanish wordlist,closed,2014-10-17 08:13:54,"These are a some of the restrictions we have followed in order to create the Spanish wordlist:
1. It is possible to uniquely identify a word just typing the first four or less characters of the word.
2. Spanish words have special characters (such as á, é, ü, ñ, etc.) not available in every keyboard. It is possible to type 'a' instead of 'á' or 'n' instead of 'ñ', etc. while still being able to identify the word with the first 4 characteres. This means that, for example, 'caña' and 'canal' cannot be both in the wordlist.
3. There are some combinations of letters that sound similar. There cannot be two words that only differenciate on those combinations of letters. For example, 'hola' and 'ola' cannot be both in the wordlist. 'quiosco' and 'kiosko' cannot be both in the wordlist.
4. Only standard form of verbs (infinitive), nouns and adjetives are in the list. 
5. The more common words are preferred over less common words.
6. Shorter, simpler, words are preferred over longer words. For example 'libro' is prefered over 'librería'

There are more restrictions. The full set of restrictions is defined in python here: https://github.com/Y75QMO/Tests-for-BIP39-Spanish-wordlist.

We have scanned using software more than 600,000 words and manually reviewed one by one more than 40,000 words. Choosing 2,048 and following all the rules is not an easy task and more than one list is possible. Any help or review of the wordlist is appreciated.
",https://github.com/bitcoin/bips/pull/100,['bip-0039/spanish.txt'],2014-10-17T08:13:54Z,,"['voisine', 'laanwj']","Paging @voisine as (one of) the authors of BIP39, can you have a look at this change?
non-spanish speaking ack.
@Y75QMO you'll also probably want to add a link to the word list here: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
@voisine, I have added  some comments regarding the Spanish wordlist and the link to the Spanish wordlist. Here is the pull request with the additions: https://github.com/bitcoin/bips/pull/112

I am not sure my English is correct or the formatting is right. Please feel free to change my English if it can be improved.
@Y75QMO both this and #112 look good. I don't know if it's easier to add #112 to this PR or keep them separate, but the changes are fine. ACK
",
christianlundkvist,81,,BIP 0039 - Add passphrase info to Test Vectors section,closed,2014-10-16 07:05:47,"In the Test Vectors section it doesn't say anywhere which passphrase is used when generating the test vectors, leading to some frustration when trying and failing to match them. I added the passphrase in the section.

Also ran spell check:
mnenomic -> mnemonic
hexidecimal -> hexadecimal
randomnes -> randomness
",https://github.com/bitcoin/bips/pull/81,['bip-0039.mediawiki'],2014-10-16T07:05:47Z,,"['voisine', 'laanwj']","Reverted spell check since the same spell checks were provided by @voisine.
Paging @voisine...
ack
",
ecdsa,111,,removing myself from bip39 authors,closed,2014-10-15 17:26:01,,https://github.com/bitcoin/bips/pull/111,['bip-0039.mediawiki'],2014-10-15T17:26:01Z,,,,
robjohnson189,110,,Compatible wallet,closed,2014-10-15 13:18:26,"Added mycelium
",https://github.com/bitcoin/bips/pull/110,['bip-0044.mediawiki'],2014-10-15T13:18:26Z,,,,
bip39JP,92,,BIP0039 Added Japanese wordlist,closed,2014-10-15 12:15:43,"I have been testing with some colleagues to create a wordlist for BIP0039 for the Japanese language.

We have decided on the current word list for the following reasons:
1. Japanese borrowed Chinese symbol character set (Kanji) are filled with homonyms that are often only discernible via the Kanji used, we thought that would lower memorability (as the words are random, and context is not possible). This is why we chose to use only the hiragana phonetic character set.
2. If the user inputs any character outside of the hiragana character set (such as katakana character set) the developer may automatically replace with the hiragana to check validity of the words.
3. Hiragana is easier to write down by hand than Kanji and Katakana, and will be easy for all ages (both young and old)

We are anxious for any comments or criticisms that you may have.
",https://github.com/bitcoin/bips/pull/92,"['bip-0039.mediawiki', 'bip-0039/bip-0039-wordlists.md', 'bip-0039/japanese.txt']",2014-10-15T12:15:43Z,,"['janmoller', 'erikahend', 'gary-rowe', 'ecdsa', 'voisine', 'Y75QMO', 'christophebiocca', 'luke-jr']","Native Japanese speaker here (working with MultiBit HD developers).
1. Agreed
2. Disagree. It should be exactly one or the other because it is very unlikely to accidentally type in a Katakana/Kanji that looks similar to Hiragana, so they should be treated as separate letters. There are many Kanji with the same phonic expression but have completely different meaning from one another, so it's adding unnecessary complexity
3. Agreed :-)
MultiBit HD developer here. Just corroborating @erikahend is working with us.
@erikahend Thanks for the reply.

I was considering the implications of someone hitting spacebar accidentally and being so concentrated that they don't notice it changed to katakana, etc.

Also, I wonder, do most wallets validate the seed before running it through the HMAC?

I guess just throwing an error when validating (as no words contain katakan or kanji) would be sufficient.

Thanks for the comment!
http://bip39jp.github.io/

Please generate a few and give them a look. Perhaps you will run into something or realize something not noticeable from just looking at the list.

Please note that word wrap is not working on this site (I am not good at html/css, so I couldn't fix it for the life of me)
@bip39JP the validation for a 128bit seed only involves a 4bit checksum, so that means there's a 1 in 16 chance that any error will still generate a valid checksum. It's better than nothing, but not something to put too much confidence in.
@voisine Very true.

However, sometimes I imagine the scenario where a user inputs seed, sees no bitcoins (because we hashed their typo with their seed) in it and runs to either A. complain about wallet xyz online or B. post an issue on Github etc, when it was user error.

I would think that it is good practice to tell the user ""Don't freak out, you mistyped something."" right after they put it incorrectly. So even if there is a 1/16 chance of generating a valid checksum with a wrong seed. I would say that 90% of the reason why I would like to validate is to check that all words are in the wordlist (aka typos are not present) and checking the checksum is trivial, so I don't see why not to check it.

I think the checksum will help in Japanese, as people trying to remember seeds might mix up word order more often that, say, English.

Does anyone have any comment on the separating by UTF-8 ideographic space and not ascii space? This element is the only one that I would think some hidden technical aspect would point away from doing such a thing... I placed that in the commit because in trials, almost every single person who entered their seed used ideographic spaces.(it's the default when in hiragana mode for typing) so I figured 1. generate the seed with it, and 2. just-in-case, run the input seed (on restoration) through a replace(' ', '　') just in case.

Any comments on this decision?
Should we really be revising the BIP content for every word list? Maybe there should be a separate index of word lists (bip-0039-wordlists.md?)
I think BIPs are a little more fluid than, say, RFCs, maybe we could start versioning them? Though in this case a separately maintained word list index also works.
Once it leaves Draft stage, BIPs should be about as fixed as RFCs. This one is still Draft, but I can see it being desirable to move it beyond Draft before every language has a word list...
I have moved to a separate file.

I agree with @luke-jr and I think we should keep it separate so that the wordlist document can be more flexible.

However, I wonder if each wordlist should be given a status? (like ""draft"" or ""finished"")

I do not plan to change the list, but the rules surrounding a language may require special considerations such as Japanese. These special considerations may only be realized after actual use.

So maybe a Draft > Accepted status for Special Exceptions... and / or the wordlists themselves? is in order.
with regard to the ideographic vs ascii space, something I discussed with stick and slush but hadn't gotten around to submitting yet, was that each word list should specify what the word separator should be when deriving the seed. I had an idea for a word list composed of three letter pronounceable syllables rather than words, and it would be nice to have every other syllable separated by a dash with no other separators like: ""machec-binnev-dordeb-sogduc-dosmul-sarrum""

much shorter and probably about the same difficulty for remembering.
+1 @voisine I agree.

I fear for my English writing skills to edit the BIP in any significant way, so maybe you could make a separate PR? or give me something I could copy/paste in?

If something such as that were added, maybe the wordlists.md file will require a table for the wordlists including info of the separator.
Slight problem, BIP39 requires that phrases are NFKD unicode normalized prior to deriving a seed, and NFKD converts ideograph spaces to ASCII spaces. So the space issue is already handled by the spec, but maybe it would be good to just point it out as a note for the JP word list.
Anyone else with comments or opinions on the way I separated wordlist management into a separate file?

I understand this is the first wordlist since the original English one... so there might be details to iron out for multi-wordlist things.

Please let me know if you have any concerns.

I look forward to any comments or criticism you may have. Thank you.
I can't vouch for the wordlist itself, but the rest looks good to me.

non-japanese speaker ack.
I know it's probably too late for changing bip39, but I think whitespaces should be stripped off the mnemonic string before it is hashed. This would make the seed tolerant to japanese/chinese users forgetting to type the whitespaces. 
It is very much too late for the english word list. However, since no other word lists have officially been added I don't think it is a disaster to have other whitespace characters (blank) for other languages.
On the other hand, it seems to be normal to offer autocompletion for words in the UI, both Trezor and Mycelium does this, and the spaces are added automatically. So maybe spacing this is a non-issue?
Yes, my suggestion is that word spacing should be defined for each word list.
I am not saying that there should be no spaces in the phrases shown in the UI.
I think it is better to remove them before hashing, because it might confuse chinese and japanese users.
(we also remove accents in Electrum, so I decided to also remove whitespaces, after including a wordlist for japanese)
Removing spaces can be dangerous.

It should be impossible that diferent phrases become the same seed. However, for example

""act orange lend"" and ""actor angel end"" BOTH become:

""actorangelend""
It probably makes more sense to remove spaces for some languages than others. I'm not fluent in Japanese, but IIRC spaces are _usually_ omitted in the course of language.
Not really dangerous. You'd lose a bit of entropy, that's all. 
Since the wordlists that are used usually exclude words that are prefix of another word in the list, you will need at least 3 words to create such a situation. 
You don't need 3 words. Conflict with 2 words exist:
""legal one""
""leg alone"" BOTH become
""legalone""

There are many combinations that become the same:
""leg end"" would conflict with ""legend"".
oh right. I thought that words that are prefixes of other words were avoided in that list
I agree with omitting spaces:

To give context, currently Thomas has implemented our wordlist in Electrum, but it does not wordwrap. This is because traditionally, Japanese does not require spaces in their sentence.

However, our wordlist uses the phoenetic alphabet of Hiragana to create the words, and these words are only Nouns, verbs, and adjectives.
1. When Japanese make sentences, they use things called ""particles"" to denote the pieces of a sentence, and this is what helps make things readable without spaces.
2. When Japanese write they use Kanji, Hiragana, and Katakana, three character sets to help differentiate amongst homonyms and to help in understanding context.
3. With Hiragana, we lose 2, with no particles we lose 1... so a problem arises if we include spaces.

This problem is with wordwrap.

If wordwrap (which wraps after every character) comes in the middle of one of our ""words"" like ""chousen"" (romanized) and split it into ""chou"" and ""sen""... given no context, the user could think of those as two separate words and write them with spaces between them. This would give an incorrect seed, even after NFKD.

So rather than worry about how the seed shows up (PyQt offered no way to remedy this situation) Thomas proposed to just remove all spaces.

reference: Look at this screen shot of Pokemon in Japanese. http://blog-imgs-19-origin.fc2.com/k/e/b/kebihabi/20080917124209.jpg

Another solution I proposed was stretching the screen to a size that could fit the largest possible seed. (though it may look ugly) for Japanese. or Thomas said just splitting with line break to show the user their seed.

Wordwrapping may prove to be an implementation issue that may pose more problem to non-Japanese developers. I personally have never had to worry about hiragana only phrases in my career, so Japanese language and wordwrap has never crossed my mind at the same time.

I will have to decide how to set this, and add into the special considerations list.

I am still open to suggestions on how to standardize.

Note: the problem doesn't really go away by using Kanji or katakana, or particles either. Japanese is very modular in their language, so splitting large words up makes smaller words and homonyms are extremely common.
it would be nice to know how often this occurs with the english list. 
if this significantly impacts entropy then we might want to reintroduce spaces
It isn't just entropy that's the issue, it's the fact that an implementation that strips spaces is not compatible with one that follows the spec. A user moving the seed from one implementation to another (which is the entire point of standardizing in the first place) will run into problems. The english list needs spaces when hashing, or it's no different from replacing the wordlist wholesale.
The more I think about it the more this seems like a non-issue. 
The user should very carefully write down the words one after the other in the right order. If you display all the words at the same time there will be mistakes. ""Write word, click, write word, click..."" mitigates the risk of writing them in the wrong order and writing duplicate words. This makes the word-separator an internal detail that the user should not care about.
@christophebiocca : sorry to be offtopic; Electrum is not following BIP39.
@janmoller : entering words one by one makes sense on a smartphone, but on a desktop, you want to be able to paste it
IMO offering copy-pasting of whole word lists is really bad as it encourages users to put them into text files, email, or whatnot. Word lists are designed to be put offline in an easy, low-tech way ... pen and paper. 
Showing them one by one nodges the user to do it the right way IMO. 
",
schildbach,94,,BIP43: Block usage 0 because it's already used in BIP32.,closed,2014-10-15 09:19:16,"It would be unfortunate if BIP32 wallets would at one day overlap BIP43 wallets.
",https://github.com/bitcoin/bips/pull/94,['bip-0043.mediawiki'],2014-10-15T09:19:16Z,,"['periodic1236', 'mikehearn', 'voisine', 'prusnak', 'dabura667']","I like it. I was going to write a BIP for the default BIP32 use case, but it would break the convention of using the BIP number as the purpose number. breadwallet and I believe also Hive are the projects using 0' 
-1

> BIP number as the purpose number

This was the thing I understood least.

So any BIP32 chain that uses BIP43 / 44 with BIP39 as the seed could decide to use `32' 39' 43' or 44'`?

imo, BIP32 doesn't really specify ""this is what you must use as your hierarchy"" So setting a specification off to the side for it completely defeats the purpose of BIP 43/44.

""We make this BIP to finally decide on a HD wallet structure methodology, because BIP32 decided not to... but it kinda did... but that was not sufficient, so we made a new BIP... but we won't improve the old one, just... kinda do our own thing over here then... no one use m/0'/0/k,,, that's BIP32's inferior hierarchy.""

I view BIP32 as ""Here's how to make HD wallets"" and BIP43/44 as ""Here's how to order them""

Yet this PR seems to insinuate that A. BIP32 has a set in stone requirement of an HD structure. and B. That this structure is completely valid, and should be validated by BIP43 as a side-note.

I understand some wallets implemented m\0'\0\k already. But that was because there was no specifications.

Reinforcing the ""use cases"" as ""This is how BIP32 Hierarchies should be done!"" and then saying in your own BIP ""HD wallets needs defined purposes!"" seems very contradictory to me.
@dabura667 The text you're quoting means the BIP number of the BIP implementing a BIP43 hierarchy. Currently, the only (published) BIP implementing BIP43 is BIP44.

BIP32 in the general case (using all acounts) is overlapping BIP43, so its incompatible. However, when you just use the default account (number 0), there are no overlaps as long as no one implements a BIP43 hierarchy with purpose 0. To prevent that from happening, I'm proposing this PR. All I want to say is ""please don't use purpose 0"".
@dabura667 I agree with you we should remove as much as possible of BIP32-hierarchy. I tried some weeks ago and got plenty of disagreements. See https://github.com/bitcoin/bips/pull/61
It sounds to me like they were waiting in a deprecation notice commit
instead.

I personally see no need to remove the whole use case section in BIP32,
just add an adendum to it saying ""BIP43 renders this as obsolete, so don't
use it.""

Also it seemed like everyone saw your point... The only problem was
inactivity and house cleaning.

That issue should be reopened and repurposed as an adendum, not a complete
removal of a whole section.
The only thing that could take path m/0' is BIP-0000 which does not exist, but I am fine with the note to be included in the spec. ACK.
Well, that's true under the current definition, but BIP43 can be amended to state that zero is special. Patch looks good to me.
","I don't know if you'll keep this wording, but `s/preceeded/preceded/`.
Thanks, fixed.
"
apoelstra,99,,Clarify identifier serialization,closed,2014-10-15 09:11:38,"I had a tough time interpreting ""serialization of the public key"", which is hashed to get the extended key identifier. Since the very next section is ""Serialization format [for extended keys]"" I thought that I was supposed to use the serialization of the /extended/ public key. Then I noticed ""ignoring the chain code"", so I tried skipping that part of the extended key serialization. Then I realized that what was meant was ""the `K` half of `(K, c)`"".
",https://github.com/bitcoin/bips/pull/99,['bip-0032.mediawiki'],2014-10-15T09:11:38Z,,"['sipa', 'laanwj']","Paging @sipa as author of BIP 32
ACK
",
harding,64,,BIP32: Disambiguate Which Key Is Compromised When Ext. PubKey + PrivKey Are Leaked,closed,2014-10-15 08:58:22,"I mistakenly inferred from the following clause that a parent extended public key plus a child private key would be equivalent to knowing the extended _child_ private key---meaning that the _parent_ private key was still secure:

> knowledge of the extended public key + any non-hardened private key descending from it is equivalent to knowing the extended private key

This patch's addition of the word ""parent"" (twice) removes the ambiguity and may help other readers draw the correct inference that the parent private key is no longer secure in this case.

I also changed ""+"" to ""plus"" to avoid confusion with the actual mathematical operations used in this BIP.
",https://github.com/bitcoin/bips/pull/64,['bip-0032.mediawiki'],2014-10-15T08:58:22Z,,"['sipa', 'laanwj']","I just took a look at other issues with BIPs---which I should've done first (sorry)---and discovered that #62 mentions the same issue.
As author of BIP32, @sipa can you comment on this change?
ACK
",
ricmoo,72,,BIP 38 - Clarify AES parameters passed in,closed,2014-10-15 08:26:58,"There was some slight ambiguity in which items passed into AESEncrypt was the key and which was the block.
",https://github.com/bitcoin/bips/pull/72,['bip-0038.mediawiki'],2014-10-15T08:26:58Z,,['shea256'],"@midnightlightning @telepathic @wozz @laanwj @ricmoo saw you were the ones who made commits on BIP38, so just wanted to ask you a few questions:
1. Do any of you know what AES mode is used in BIP38? It seems like the implementations I've looked at use ECB mode but ECB mode is only supposed to be used when you encrypt a single block, and in BIP38 there are two halves that need to be encrypted.
2. I've heard there has been some controversy about BIP38. It seems to be quite popular across wallets but some of the core devs have been very outspoken about BIP38 not following the standard review practices. What is the consensus regarding BIP38? Would you consider it to be a recommended method of encrypting private keys? Or would you suggest simple AES encryption with massive key stretching?
3. Is the lack of initialization vectors here really OK?
4. Why is BIP38 so complicated? Isn't there a simpler way to accomplish the same thing?
1. It does not use any of the common modes, but uses the AES block cipher directly, with a sort of one-time pad (derived from the scrypt pbkdf) applied; so it is more of a custom mode of operation
2. When I brought up a suggestion for BIP38, I was sent to https://bitcointalk.org/index.php?topic=258678.0 . That said, it seems bip38 has a moderate level of adoption; but someone with more knowledge of the politics should answer this.
3. You can think of the one-time pad derived from the scrypt pbkdf as a form of IV. However, take a look at the CTR (counter) common mode of operation (which is a recommended mode) to see an example where the lack of an IV is OK. 
4. I will be posting my implementation of a BIP38 wallet soon, and it is actually quite straight forward, with only 26 lines of code to encrypt an address and around the same for encryption. The code is much easier and concise to read than English, it did take some time fiddling to get the code and the English to match, but it really sounds more complicated than it really is. :)
1. What do you mean by this? As far as I understand, the default AES mode is ECB. At least that's the case with pycrypto's AES libarary.
2. OK. I think @gmaxwell was the one who was most vocally against the process employed here.
3. Hm, well have you checked out this? http://stackoverflow.com/a/1220779/1530754.
4. That would be nice, thanks.

Any thoughts on this implementation? https://github.com/bpdavenport/btc/blob/master/bip38.py
Seems to be easier to read than some of the others.
1. A mode of operation can be thought of as ""a way to use a block cipher""... There is no need to necessarily use the AES block cipher, you could use any block cipher. So, it is important to distinguish between a block cipher and a mode of operation; both are interchangeable.

A block cipher, by itself is simply an algorithm that takes in a key and a block, and returns a new block, in a reversible way. ECB is a mode of operation which does nothing beyond pass its bytes directly through to the underlying block cipher, so it can ""kinda"" be thought of as the default behaviour.

The PyCrypto AES Block Cipher is the class: Crypto.Cipher.AES.AESCipher
The PyCrypto AES Modeof Operation is: Crypto.Cipher.AES.MODE_ECB

They will both return the same result, as ECB is the trivial layer on top of the block cipher.

The idea of an initialization vector is specific to certain modes of operation (usually to bootstrap feedback). 

You can check out my implementation at https://github.com/ricmoo/pyaes/blob/master/pyaes/aes.py

Line 95-269 cover the AES block cipher algorithm. Below is each of the common modes of operation; as you can see each in only at most a dozen or so lines of code to cleverly use the block cipher for more interesting purposes.

More interesting, you will see that the CTR (counter) and OFB (output feedback) modes use their encrypt() method to decrypt, as they are symmetric.
1. For the concerns here, you can think of the first 32 bytes of the scrypt pbkdf as an IV, or implicit feedback based on the key... I will think more about this though... Off the top of my head, I wonder if it would be weak against two keys with the same 4-byte prefix of their sha256d (ie. what becomes the salt) and also protected with the same password, as the pbkdf would return the same one-time pad.

Seems like the chances are low, but birthday problem a couple thousand addresses with the same password and it may become an issue... May not be an issue... _thinking_
(that last 1 was supposed to be 3... Seems github automatically turns numbers into number lists, starting at 1)

That said, for 3, I think because the OTP is applied before the block cipher encrypt, that it is actually not an issue, as it behaves more like an IV. I have spent a few hours trying to exploit it, and haven't found anything meaningful; I'm still open to people smarter than I to try though. Here are some test vectors, each set is a pair of keys that produce the same salt, so if encrypted with the same password, will have the same scrypt pbkdf derived components:

a) 5JJ4qiuny4jZheGy5BcFmkkrfQBBbsrabQAxBVmmqvLPj2p9DPu 5Kcicw7Lgu5rt2ywLNnx54hXrHEWnyygf5GW1nKfDErk1BxxxXR

b) 5KBwzUEWPNepAEMabpTyLdGQ8wVXQchZtTRiT7Q32Z8V1WGm9pH 5JCMEW9FpjDT9ESHvhE6bDVTxQCyZYNd31Kh5WM9uQU877FP65y

c) 5JvaJrRgU6c3LifUcdYvhu21Y6XmbzwFr9gzL5nM4NUezmkjwLf 5JKzgnLPspteLdjDNytakdevaDkUgSsGqJmQV2xWUeBxf8ckvHj

d) 5KjaZxcRe9dPCpWhYMZR8PrCfUAVGChwt7UTNKRdg2bwaALndbn 5K2FKeDN2yX3DV2DXTzoGpUNVz6QSMhjEapPQqQrmYxydes3sTH
Regarding point 4, here is my Python implementation of BIP38...

https://github.com/ricmoo/pycoind/blob/master/pycoind/wallet/address.py

At the time, I had not implemented EC-multiply addresses. After implementing them, it does indeed seem a tad complicated. :)
",
Perlover,95,,Added two BIP44 compatible wallets in Android,closed,2014-10-15 08:00:29,"Subj :)
Please update info, not only the Trezor is copatible with BIP44 standard :)
",https://github.com/bitcoin/bips/pull/95,['bip-0044.mediawiki'],2014-10-15T08:00:29Z,,['schildbach'],"Hmm funny, Wallet32 is stating in its description it uses BIP32…
But they are compatible with BIP44! I checked it
You can check too :)
I believe you (-:
One notice please
BTCReceive works only with one any account of BIP44 wallet through using xpub key
So it uses BIP32 path after importing key (m/account/0|1/N)
So now i think BTCReceive not full compatible with BIP44
But Wallet32 is.
BIP44 requires the use of m/44'/*.
So if you're right, BTCReceive is not compatible to BIP44 at all and should imho be removed from this PR.
",
jurov,98,,Passphrase for test vectors + haskell implementation,closed,2014-10-15 07:59:10,,https://github.com/bitcoin/bips/pull/98,['bip-0039.mediawiki'],2014-10-15T07:59:10Z,,['dabura667'],"Passphrase already mentioned in pull #81.
Removed passphrase mention, kept only link to haskell implementation.
+1 on the passphrase mention... not sure why you removed it.

Also, I wish there were some UTF-8 passphrase tests... I'd make them, but I'm not sure in myself enough to make reliable tests. Almost every major screw up I've done in my life has to do with UTF-8 handling... so I wait patiently.
I removed it because it is already in another and better phrased pull
request.

Test vectors for utf-8 - you mean utf8 passphrase? Or localized wordlist?
I'll be glad to assist you if you want to try the former.
Dňa 2.9.2014 12:45 používateľ ""dabura667"" notifications@github.com
napísal:

> +1 on the passphrase mention... not sure why you removed it.
> 
> Also, I wish there were some UTF-8 passphrase tests... I'd make them, but
> I'm not sure in myself enough to make reliable tests. Almost every major
> screw up I've done in my life has to do with UTF-8 handling... so I wait
> patiently.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/98#issuecomment-54135120.
Yes please. I am trying to implement Japanese wordlist of BIP39 and I am not getting NFKD normalized correctly. http://bip32jp.github.io/

I tried `seed_pw = seed_pw.normalize('NFKD');` to no avail.

Do you have any good ideas on how to normalize NFKD in js? Also, if you have some tests for UTF-8 passphrases (instead of ""TREZOR"") then I would appreciate it.

maybe some passphrases like:

アイウエオ
あいうえお
魑魅魍魎
十人十色
㌧㍍㍑

Any pointers would be helpful, thanks.
",
xenog,103,,Changed left angles for HTML entity,closed,2014-10-15 07:50:58,,https://github.com/bitcoin/bips/pull/103,['bip-0037.mediawiki'],2014-10-15T07:50:58Z,,,,
voisine,87,,BIP39 grammar,closed,2014-10-12 09:29:37,"grammar and sentence structure fixes
",https://github.com/bitcoin/bips/pull/87,['bip-0039.mediawiki'],2014-10-12T09:29:37Z,,,,
soroushjp,108,,Updated README statuses with most recent status published to respective ...,closed,2014-10-12 09:00:47,"...BIP document

Please let me know if the status listed in each individual BIP document _isn't_ the authoritative status, and this changed shouldn't be merged. Just wanted the README document to be up-to-date with current status of all BIPs.
",https://github.com/bitcoin/bips/pull/108,['README.mediawiki'],2014-10-12T09:00:47Z,,"['gavinandresen', 'voisine', 'schildbach', 'gurnec', 'laanwj']","BIP72 isn't final.
Thanks for the catch schildbach.

Is there any common authoritative source on BIP statuses at the moment? Just because https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki refers to itself as Final, but I understand that this may not actually be the case.
Authorative and decentralized doesn't match well (-:  Honestly, I don't know. I guess the BIP process itself is still heavy under construction.
Haha agreed.

Okay, hopefully this thread will spur some discussion about which BIPs are formalized and which aren't so that this README can get as close as possible to the authoritative source for the whole community.
BIP72 is final as far as I'm concerned.

I believe Andreas has an issue with a use-case that is not covered by
BIP72, and should be in a separate BIP
(see discussion in https://github.com/bitcoin/bips/pull/106 )
@gavinandresen Well it's the ""payment"" usecase (-:
@soroushjp I'm a bit late, but your PR looks a lot lie PR #104 except for the small change to BIP1...

But I agree that it would be useful to understand (as someone who doesn't know any better) what is authoritative vs. what is simply normative. I assumed as (I believe?) you did that the individual BIPs were generally authoritative, whereas the README generally was not.

(This came about following @saivann's idea that wallets listed on bitcoin.org should support the ""[most basic BIPs](/bitcoin/bitcoin.org/issues/541#issuecomment-55171596)"", and I started wondering how to objectively specify that...)
If we can't agree on what should be in the ""Status"" column, it may be better to remove it completely. Or at least reduce the number of statuses to a set we can agree on (ie, at least Draft and Active/In Use).
You're right @gurnec, this is very similar to PR #104, I should have looked more carefully. One should be removed, honestly mine since it care after, but I would hate to see this discussion end without a resolution.

Could we go ahead and change all the statuses in the README for BIPs for which there are no disputes? I think that covers most BIPs except for BIP72 at this point.

It would be a huge boon to the ecosystem if people could look at the BIPs README, look at all the Final BIPs, without reading through extensive discussions, and just focus on implementing them. Would move the protocol faster and make bitcoin stronger.
Better is better, merging this.

BTW we need to have a discussion some time about this repository. At least who has to merge BIP changes, and when. I'm honestly not sure whose responsibility that is.

Moving the bips to github was good because it allows change control, in contrast to the wiki in which everyone could make changes. But it appears that this is the other extreme and it has become almost impossible to make changes here.
Would it make more sense for BIP authors to host each BIP on their own github repository, so they can merge PRs at will?
@voisine It makes sense but that'd make it harder to find a BIP, at least programmatically. There are some scripts that automatically link to a BIP given the number.

But I like the idea to decentralize the responsibility of reviewing and merging changes to BIPs.

Maybe we could roll something that authors submit a GPG key, and that for each BIP we have a list of author keys, and that commits signed by one of the authors to their BIP are automatically merged. Or alternatively we could forego the GPG signing and base it in github account.

This would assume that the authors are responsible enough to respect their BIP status - that they won't make technical changes after the BIP is Final. Then again, reverting is always possible. It's better than having _everything_ go through the bottleneck of the Bitcoin Core team (which makes little sense in the first place)...
",
derrend,105,,"Update bip-0070.mediawiki, comment correction in signature field.",closed,2014-10-06 19:37:47,"Clarification regarding the signature field in payment details and which key should be used for signing.
",https://github.com/bitcoin/bips/pull/105,['bip-0070.mediawiki'],2014-10-06T19:37:47Z,,,,
sipa,102,,BIP62: Reorder rules and clarify,closed,2014-09-27 01:58:22,,https://github.com/bitcoin/bips/pull/102,['bip-0062.mediawiki'],2014-09-27T01:58:22Z,,"['gmaxwell', 'jgarzik', 'laanwj']","ACK
ACK the reorder, because it's good forward progress... but rule 1 is ambiguous.  It can be read as if a hybrid pubkey in a txout is not permitted.

The rule 1 for any input in block v3 may make some existing spendable (and currently IsStandard) txouts forever unspendable, because of P2SH we can't even know in advance which ones it would slay. Are we really okay with that?
The intention was indeed to disallow hybrid pubkeys, but you raise a very good point. I don't think hybrid keys are actually used, but there are many cases of invalid public keys inside multisig which would also potentially become invalid due to this rule - especially as the rule is only applied on spending, this could potentially make actual coins unspendable.

Too bad, but that needs fixing.
I removed the language about public keys again.
ACK
","s/bounderies/boundaries
Fixed.
"
vstoykovbg,107,,"double ""are""",closed,2014-09-25 06:20:02,,https://github.com/bitcoin/bips/pull/107,['bip-0039.mediawiki'],2014-09-25T06:20:02Z,,,,
prusnak,101,,bip-0044.mediawiki: fix typo,closed,2014-09-06 05:03:02,"remove space which should not be there
",https://github.com/bitcoin/bips/pull/101,['bip-0044.mediawiki'],2014-09-06T05:03:02Z,,,,
sipa,90,,Restructure and make rules 2 and 4 unconditional,closed,2014-09-01 17:25:17,,https://github.com/bitcoin/bips/pull/90,['bip-0062.mediawiki'],2014-09-01T17:25:17Z,,"['gavinandresen', 'laanwj']","ACK
ACK
@jgarzik See #102 (please comment on the mailing list, though).
",
jurov,97,,Added Haskell implementation.,closed,2014-08-22 06:48:10,"Tested it and can confirm it's functional.
",https://github.com/bitcoin/bips/pull/97,['bip-0032.mediawiki'],2014-08-22T06:48:10Z,,,,
erasmospunk,84,,BIP 44 - Specify that this BIP is not a central repository.,closed,2014-08-16 08:30:30,"Clarified that this repo is not a central repository and provided links to Satoshi Labs that maintains this list.
",https://github.com/bitcoin/bips/pull/84,['bip-0044.mediawiki'],2014-08-16T08:30:30Z,,['luke-jr'],"@prusnak can you check if the format and wording is OK?
Looks good to me, how did this get overlooked?
",
davecgh,91,,Add BIP0032 Go implementation.,closed,2014-07-23 04:54:02,"This pull request adds a new BIP0032 implementation written in Go ([hdkeychain](https://github.com/conformal/btcutil/tree/master/hdkeychain)).
",https://github.com/bitcoin/bips/pull/91,['bip-0032.mediawiki'],2014-07-23T04:54:02Z,,,,
timthelion,85,,Spelling BIP 39,closed,2014-07-09 15:51:56,,https://github.com/bitcoin/bips/pull/85,['bip-0039.mediawiki'],2014-07-09T15:51:56Z,,,,
timthelion,86,,Spelling bip 32,closed,2014-07-09 15:51:13,,https://github.com/bitcoin/bips/pull/86,['bip-0032.mediawiki'],2014-07-09T15:51:13Z,,"['sipa', 'schildbach']","ACK
ack
",
wozz,80,,Move Test 3 to the correct location.,closed,2014-07-02 05:55:05,"The encrypted key for unicode test should be in the section for No compression, no EC multiply.
",https://github.com/bitcoin/bips/pull/80,['bip-0038.mediawiki'],2014-07-02T05:55:05Z,,['voisine'],"good catch... ack.
",
voisine,78,,unicode normalization of password,closed,2014-06-26 20:15:48,"Added instructions for unicode normalization of password
",https://github.com/bitcoin/bips/pull/78,['bip-0038.mediawiki'],2014-06-26T20:15:48Z,,,,
MidnightLightning,29,,Update bip-0038.mediawiki,closed,2014-06-26 20:15:03,"Fix some erroneous statements in the description of the math used for encryption/decryption of EC-Multiplied keys/addresses
",https://github.com/bitcoin/bips/pull/29,['bip-0038.mediawiki'],2014-06-26T20:15:03Z,,"['cscott', 'voisine', 'laanwj']","See also PR #27.
The UTF-8 stuff needs some fixes too.  @MidnightLightning would you be willing to add those fixes into your patch set?

In particular, it should be explicitly specified that the password is converted to Unicode Normalization Form C before being encoded in UTF-8.  See http://www.unicode.org/faq/normalization.html and http://tools.ietf.org/html/rfc3987.  And the set of test vectors should include:
1. A sequence normalized with NFC.
2. A character normally encoded using UTF-16 surrogates, to demonstrate that the surrogates should be replaced by the proper code point (especially relevant for javascript implementations).  Ie, the encoding should be UTF-8, not [CESU-8](https://en.wikipedia.org/wiki/CESU-8).
3. Inclusion of a password with an embedded null, to demonstrate that the null is encoded as a zero byte, not [Modified UTF-8](https://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8).

An example of such an input passphrase is: ""\u03D2\u0301\u0000\U10400\U1F4A9"" which should get encoded as '\xcf\x93\x00\xf0\x90\x90\x80\xf0\x9f\x92\xa9' (13 bytes) before being further processed.

EDIT: breaking down the parts of the suggested passphrase:
1. U+03D2 U+0301 which should get normalized to U+03D3 under NFC (http://www.unicode.org/faq/normalization.html#6)
2. U+0000 which should get encoded as 0x00 (Modified UTF-8 would serialize this as 0xC0 0x80)
3. U+10400 which is an astral character which is represented in UTF-16 (Java/JavaScript) as U+D801 U+DC00 but which should _not_ be encoded as six bytes (as CESU-8 would do; see https://en.wikipedia.org/wiki/CESU-8#Examples)
4. U+1F4A9 which repeats the ""astral characters"" test as http://mathiasbynens.be/notes/javascript-unicode#poo-test suggests

Sanity check:

``` python
$ python
>>> import unicodedata
>>> unicodedata.normalize('NFC', u'\u03D2\u0301\u0000\U00010400\U0001F4A9').encode('utf-8')
'\xcf\x93\x00\xf0\x90\x90\x80\xf0\x9f\x92\xa9'
```
Sure, I can add that in. Can you generate the full test vector for that input passphrase, and I'll do the same to make sure they agree?
I don't actually have a full bip38 implementation; I just have https://github.com/cscott/bip38-cracker that I've been hacking on (for a reddit contest).  So it's actually a little easier for me to _verify_ a test vector than to _generate_ one.  So if you generate and post a test vector I can plug it in quick and check it out.

Otherwise it will take me a little longer, as I'll have to write (or carefully audit) a bit of code to do the generation.  But I'll can do it if necessary.
All right, can you check me on this:
- Password of `\u03D2\u0301\u0000\U00010400\U0001F4A9`; [GREEK UPSILON WITH HOOK](http://codepoints.net/U+03D2), [COMBINING ACUTE ACCENT](http://codepoints.net/U+0301), [NULL](http://codepoints.net/U+0000), [DESERET CAPITAL LETTER LONG I](http://codepoints.net/U+10400), [PILE OF POO](http://codepoints.net/U+1F4A9)
- Unencrypted key to encrypt: `5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4`
- Public address of private key: `16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF`
- Encrypted key: `6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn`

Do you get that same Encrypted Key as I do? I'm on a Mac and having problems getting Casascius' [Address Utility](https://github.com/casascius/Bitcoin-Address-Utility) (which is the reference implementation cited in the BIP) to allow proper Unicode character entry on my system (running with Mono); I'll see if I can verify that on a PC if I get a chance. But for this test, I'm using a Node.js Javascript implementation, so the input password is actually using the related [surrogate pairs](http://www.russellcottrell.com/greek/utilities/SurrogatePairCalculator.htm) to define the string literal being input into the function and the [unorm](https://github.com/walling/unorm) library to perform the NFC normalization:

``` js
var pass = new Buffer(unorm.nfc(""\u03D2\u0301\u0000\uD801\uDC00\uD83D\uDCA9""), 'utf8');
console.log(pass.toString('hex')); // cf9300f0909080f09f92a9
```
I added this test case to my own obj-c bip38 implementation and it passed:
https://github.com/voisine/zincwallet/blob/a334859dbd720e1293509f30d98b69324670cdc9/ZincWalletTests/ZincWalletTests.m#L177

Also, I independently found the same typos from your commit and included fixes in pull request #47 before I saw this pr.
This needs a rebase to the current version before it can be merged. If the changes are already in the document through the other patch, we can close it.
Okay, rebased this update. There's some discrepancy between `ownerentropy` vs `ownersalt`; you thought the derivation of `passfactor` was incorrect, while I thought the `seedb` key derivation was incorrect. I'll double-check my code, and can you check yours to make sure the proper use of entropy/salt is used in that definition?

Added in the UTF normalization test case; I haven't tried it with lot/sequence numbers, nor figured out what the private key would be in hex format, so doesn't quite match the syntax of the other test cases yet; if anyone's able to provide them before I have a chance to figure them out, I'll add them in.
I changed step 2 in ec multiply decryption in order for passfactor derivation to match passfactor creation in step 4 of intermediate code generation.

the decryption key for seedb is derivedhalf2, which is generated using passpoint, addresshash, and ownerentropy, so your edit is also correct.
@voisine is this ready for merging?
ACK, this is a good edit. I'll make another PR to add mention about the need for unicode normalization of the password.
",
BenjaminTuckerInstitute,73,,Fixed typo,closed,2014-06-25 08:37:42,,https://github.com/bitcoin/bips/pull/73,['bip-0001.mediawiki'],2014-06-25T08:37:42Z,,,,
gavinandresen,75,,reject P2P message (BIP61),closed,2014-06-25 08:37:02,"Long overdue, I finally found the time to tidy up my 'gist' into a BIP.
",https://github.com/bitcoin/bips/pull/75,['bip-0061.mediawiki'],2014-06-25T08:37:02Z,,"['schildbach', 'laanwj']","Thanks, I think this can be very useful. Random thoughts:

Should the string somehow be limited?
Why is there no ""accept"" message as well? If there is a reason, I think it should be noted somewhere in this BIP.
I think there should be a standard rejection code for ""Double spend"". That's the most common reason transactions for non-propagating transactions from SPV clients.
The string is limited by the maximum length on P2P messages. If you're worried about use-up-bandwidth denial-of-service attacks, that worry is misplaced (I can send you max-length unknown messages all day long that you ignore as easily as reject messages, but it costs me as much bandwidth as it costs you).

There is no accept message because that would just waste bandwidth in the common case. As for putting that in the spec:  not going to do that, specs should be short and to-the-point, not rehash every design decision that went into making them.

rejection code for double-spend:  patches welcome, feel free to implement that and submit a new BIP.
Sure, here is my ""patch"":

| 0x43 || Attempted double spend

Why a new BIP for that simple addition?

re ""accept"": I thought it might be useful. Many devs will ask this question, as usually you have an accept/reject pair.
@laanwj Did you look at my comments before merging?
@schildbach Yes, but unlike with code, not all comments need to be addressed before putting something in the repository in the first place. The information is not final. You can submit any changes as your own pull request.
",
RobbieClarken,77,,Fix URL to source of PHP payment request generator,closed,2014-06-21 07:52:02,"The link to the source code of Gavin's PHP implementation was for the demo web page instead of the GitHub repository.
",https://github.com/bitcoin/bips/pull/77,['bip-0070.mediawiki'],2014-06-21T07:52:02Z,,,,
prusnak,66,,bip-0044: scan just external chains,closed,2014-06-16 15:38:12,,https://github.com/bitcoin/bips/pull/66,['bip-0044.mediawiki'],2014-06-16T15:38:12Z,,"['wozz', 'janmoller', 'sipa', 'luke-jr', 'laanwj']","bump
Why shouldn't they be allowed? You can't really control the order your own transactions get confirmed.
This is a specification. You are free to do whatever you want, but then you are not compliant to this specification.
I suggest not requiring unreasonable things in this specification.
As a wallet implementer you are perfectly in control how you work with internal (change) chains. 
You're not in control of the order in which different transactions that create independent change confirm.

It's reasonable to expect that the gaps in an internal chain will be much less common than in external chains, though.
Unless you reuse change addresses until there is a certain number of confirmations on the last change address.  Electrum does that currently, which I assume is by design.
@wozz Addresses should never be used more than once. That behaviour is a bug.
Restoring from seed gets a lot more complicated if you create new addresses without waiting for confirmations.  It's a tradeoff between reusing addresses and restoring a chain from a seed.

If you get to the gap limit in your change chain, should the wallet prevent you from creating new transactions until one of the current transactions confirms?
Rephrased the wording.
@wozz No, it should just continue making addresses beyond the gap limit, or perhaps start another internal chain. If this makes trouble restoring from seed, then a user option to extend the gap limit is advisable.
NACK. Having to reuse addresses to avoid gaps is a terrible solution.
Please review the commit, not some random conversation of people that have nothing to do with the request.
OK it seems you completely changed the commit from what the pull title says.

Surely, you still need to scan the internal chain. The requirement that keys there receive coins only 'from' addresses in the external chain (which is debatable, what about spending from multisig addresses?) could help optimize the scan, but it doesn't avoid it.
If you are going to send change from a multisig transaction to an internal change without ever touching the external chain then you are on your own. The worst thing that can happen to you is that you use change address twice by accident. It's not wise to force all BIP-0044 implementers to scan two chains instead of one just because of this hypothetical case.
I just realized that your case is not even hypothetical. There is no way a BIP44 compatible wallet would end up with coins on an internal chain without touching the external one. So please let this one in ...
Well, I won't argue anymore, it's your BIP.
Thank you!
> There is no way a BIP44 compatible wallet would end up with coins on an internal chain without touching the external one. 

But there is.
1. You have a wallet with one unspent output (1) on your external chain.
2. You send a fraction of your coins to some external address and end up with one unspent output (2) on your internal chain.
3. You do a second spending with a fraction of your coins and end up with a new unspent output (3), also on the internal chain

The last transaction you sent did not touch your external chain.
If you don't scan the internal chain you won't find unspent output number 3 when scanning the wallet from scratch.
@janmoller if you have UTXO on external chain then you already ""touched it"", no? The sentence just specifies the account discovery, not the discovery of UTXOs on chains .
@prusnak the thing is that you can have a very long chain of transactions send from your internal chain by continuously doing step 3 as described above. 
How will you discover those addresses on your internal chain by scanning the external chain only?
@janmoller: i'll repeat, this is just about the account discovery i.e. if account should be considered as ""unused"" or ""used"". if it's ""used"" than both chains are properly examined using gap limit. just for discovery purposes only the external chain is checked.

If you think this idea could be rephrased in a better way in the spec I would love you to draft such change.
@prusnak very well. I was under the impression that the Account Discovery section was about figuring out which address ranges were in use. If the Account Discovery section is only for figuring out whether an account is used or not, then I suggest removing the Address Gap Limit sub section and just mention that the first 20 addresses should be scanned.

For completeness it would be great if the BIP then had another section that described how to do address range discovery of external and internal chains. There the Address Gap Limit section would come to its right.
@janmoller Feel free to submit a pull request and I will review it. I would love to see someone rewriting our ideas in a less confusing way instead of just dismissing the idea as a whole without trying to understand it first like we've all seen above.
",
Telepatheic,59,,Small typo,closed,2014-06-06 03:55:45,,https://github.com/bitcoin/bips/pull/59,['bip-0038.mediawiki'],2014-06-06T03:55:45Z,,"['luke-jr', 'voisine']","This completely changes the meaning. ""Typo"" is not correct.
Ok, small but important error.
ACK
",
NicolasDorier,67,,Add reference implementation links,closed,2014-05-27 16:36:20,"This BIP is really hard to implement because of the lack of test vectors and lack of documented  implementations. This will save time for implementers.
",https://github.com/bitcoin/bips/pull/67,['bip-0070.mediawiki'],2014-05-27T16:36:20Z,,['gavinandresen'],"Good idea.
",
rnicoll,55,,Add reference to RFC 2616 to BIP0072,closed,2014-05-20 17:52:28,,https://github.com/bitcoin/bips/pull/55,['bip-0072.mediawiki'],2014-05-20T17:52:28Z,,['laanwj'],"ACK on the changes.

@schildbach I'm OK with forbidding redirects. We don't allow redirects either - Qt doesn't handle them automatically, and we haven't added code to handle them. I don't see a good reason to use them for payment requests.
",
aalness,60,,Validate a payment request is still valid prior to payment,closed,2014-05-20 17:51:39,"Currently there exists the potential for a user to load a payment request into
their wallet which is valid at that time but its expiration lapses prior to
the user authorizing the payment. This could lead to an unnecessary customer
service interaction.
",https://github.com/bitcoin/bips/pull/60,['bip-0070.mediawiki'],2014-05-20T17:51:39Z,,"['schildbach', 'gavinandresen']","I think the last expiration time check should take place immediately before broadcasting the signed tx or exposing it via a payment message, whichever comes first. The reason is transaction creation and signing can take from several seconds up to hours/days (if multiple persons need to sign).
@schildbach good point. I updated my change to move the check immediately before the broadcast step. Seem reasonable?
This pull request is OK with me.

I don't really care; the PaymentRequest could be considered expired by the merchant because the the merchant and customers machines disagree about the time, so there will always be annoying edge cases.
Thanks for the review and agreed. I think there will always be edge cases out of the wallet's control but if it can do anything to avoid mis-payment I think it should try.
",
rnicoll,54,,BIP0070 limits and error handling,closed,2014-05-20 17:51:21,"Changed example URL to be standard example domain.
Added file size limits for PaymentRequest and PaymentACK.
Added requirement to handle repeated sending of Payment message (i.e. to handle network failure).
",https://github.com/bitcoin/bips/pull/54,['bip-0070.mediawiki'],2014-05-20T17:51:21Z,,"['sipa', 'gavinandresen', 'leofidus']","ACK
@leofidus I've tightened up wording to hopefully make intent clearer. I've also moved the URL validity section up to PaymentDetails, where the payment_url is actually specified, as it probably makes more sense there.
","I think this sentence is a bit too weak. ""Handling it"" is the equivalent of undefined behaviour in the C specification: it's perfectly on spec to crash or to format the hard drive. I would prefer at least ""must/should handle receiving multiple copies ... _gracefully_"".
Nitpick: why a must here if the previous one was a should? No point in keeping the url valid if multiple copies are not being handled; and what would ""valid url"" even mean in that case?
Okey dokey-- ""good luck with that"". A specification cannot force a company to stay in business.

How about ""should remain valid...""
I'd weaken that to ""may be rejected.""  The merchant might be perfectly happy to handle 1MB Payment messages.
""may"" -- give clients and merchants the option to do more (""Here's an MPEG of the drone being dispatched to deliver your product!"").  And I'd vote against justifications for every constant in the spec (commit messages are a better place for that, I think).
Maybe ""The server must process payment messages of a length of up to 50,000 bytes, larger messages may be rejected"" is closer to the intended meaning?
The concern would be that people tend to test against implementation not specification, so if they happen to test with a server that accepts 1MB files, and another is much stricter, problems could ensue. See the Content-Type header in HTTP as an example; in theory a client can indicate character set of a request body using a parameter on the Content-Type, however as early versions of IE didn't send the character set, many web applications were developed without taking this into account. By the time there was a push to use the character set parameter, it was generally considered that it would break too many implementations. This lead to this particularly terrible workaround: http://web.archive.org/web/20060427012511/http://ppewww.ph.gla.ac.uk/~flavell/charset/form-i18n.html
Or more closely related to Bitcoin, see the mess that resulted from OpenSSL
accepting more than just strictly standard signature and public key
encodings.

There is a difference of course, in that here we can offer a specification
that is stricter in what it is required to accept than implementations, but
I still don't like it.

Clear specifications, that include rejecting input that is non conformant
help set clear expectations.
"
harding,41,,Clarification of how to construct the PaymentRequest signature,closed,2014-05-20 17:50:32,"Slightly re-worded description of the signature field in PaymentRequest

The previous phrasing confused me and I had to check the Bitcoin Core source code to see what it was expecting for a signature.
",https://github.com/bitcoin/bips/pull/41,['bip-0070.mediawiki'],2014-05-20T17:50:32Z,,"['patricklodder', 'gavinandresen', 'mikehearn', 'voisine', 'schildbach', 'rnicoll']","In principal looks good. Could ""zero-byte"" be ""empty string"" perhaps, though?
@rnicoll Changed to ""empty string"" per your suggestion.  Thanks!
Looks good.

This matches current implementation in [paymentrequestplus.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/qt/paymentrequestplus.cpp#L157) as well now.
I'm not sure if its relevant, but the empty string should be an ""empty _byte_ string"" (the signature is composed of bytes rather than chars).
Ah... in which case my reading of the current implementation is that because an empty std::string is a character array of length 1 containing a NULL value (terminator), that's then cast into a byte array of length 1, containing the value 0.

Can someone check my working? If we have a spec/implementation mis-match not sure which is better to change in this case.
Can't tell about C++. The Java (bitcoinj) implementation uses
    paymentRequest.setSignature(ByteString.EMPTY);
and ByteString is not type compatible to String. ByteString is a protobuf specific class, since Java does not know about byte strings, only byte arrays.

The BIP70 spec defines a signature as
    optional bytes signature = 5;
I wonder how character strings fit into this picture, even if empty. I'd prefer if the wording of the spec stays consistent and uses byte strings (or byte arrays).
The Python code I [wrote](http://bitcoindev.us.to/en/developer-guide#derivable-data) used an empty string: `request.signature = """"`

I ran `protoc` and looked at the objects it created for each of the three supported languages, and it handles the byte-string differently than a regular string in each language.  This is most apparent in Java, as @schildbach pointed out, where it types the signature field as a ByteString:

```
private com.google.protobuf.ByteString signature_;
```

In C++ and Python, it creates the field as a string but converts it into a byte array (if necessary) when it goes to serialize it.  A few more details are in this [StackExchange answer](http://stackoverflow.com/questions/11467567/why-protocol-buffer-bytes-is-string-in-c).

I thinking that maybe we should say, ""empty string (C++/Python) or empty ByteString (Java).""  This provides information for programmers of the three languages supported by Google protobuf and also a flag to users of third-party protobuf compilers that they might have to check the code to see what data type is expected.

If there are no objections to that phrasing, I'll change it tomorrow (April 28th UTC).
@rnicoll : empty strings in c++ are certainly not length one, and are not zero-terminated (unless you call .c_str() ).

For wording, how about just ""The signature field must be set to it's default (empty) value before serialization and signing.""
@gavinandresen The problem I had which led to this pull request is that I assumed the default value was fine.  In the Python protobuf-generated class, at least, that's not the case---you have to explicitly add a line that says, `request.signature = """"` before you serialize and sign the PaymentRequest.   (My research indicated that protobuf does not let you set an empty default value for optional parameters because it uses a default empty value internally to indicate that the field hasn't been set and so shouldn't be serialized.)
Indeed, this table explains very nicely how protobuf types map to language types:
https://developers.google.com/protocol-buffers/docs/proto?hl=de#scalar

I think we should stay consistent to protobuf language, which uses the word ""bytes"". We could say ""empty bytes"". How that maps to the individual language should not be part of this spec.

It's indeed a bit unfortunate that we did not apply the signature to a protobuf without signature field at all (the default). That would have been much more intuitive. But I fear it's too late to change now, given that there are already 4-5 implementations being used.
@schildbach Nice table!  I wish I found that. :-)

I like the ""empty bytes"" suggestion, but when I tried it out, I discovered that it's hard to use the term bytes in a sentence to refer to something besides actual bytes without adding confusing qualifiers or ambiguity.  For example:

> Before serialization, the signature field must be set to an empty ""bytes"" value.
> 
> Before serialization, the signature field must be set to an empty value of the Protocol Buffers ""bytes"" type.

I was thinking that it might be better to just say ""empty value"" but also better explain the expected output so implementers can research how to achieve that output if ""empty value"" isn't sufficient information:

> Before serialization, the signature field must be set to an empty value so that the field is included in the signed PaymentRequest hash but contains no data.
""Before serialization, the signature field must be set to a
length-delimited field of length zero.""

Using the nomenclature in the protobuf documentation:
https://developers.google.com/protocol-buffers/docs/encoding#structure

Aaron

There's no trick to being a humorist when you have the whole government
working for you -- Will Rodgers

On Sun, Apr 27, 2014 at 1:12 PM, David A. Harding
notifications@github.comwrote:

> @schildbach https://github.com/schildbach Nice table! I wish I found
> that. :-)
> 
> I like the ""empty bytes"" suggestion, but when I tried it out, I discovered
> that it's hard to use the term bytes in a sentence to refer to something
> besides actual bytes without adding confusing qualifiers or ambiguity. For
> example:
> 
> Before serialization, the signature field must be set to an empty ""bytes""
> value.
> 
> Before serialization, the signature field must be set to an empty value of
> the Protocol Buffers ""bytes"" type.
> 
> I was thinking that it might be better to just say ""empty value"" but also
> better explain the expected output so implementers can research how to
> achieve that output if ""empty value"" isn't sufficient information:
> 
> Before serialization, the signature field must be set to an empty value so
> that the field is included in the signed PaymentRequest hash but contains
> no data.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bips/pull/41#issuecomment-41507480
> .
@voisine isn't ""a length-delimited field"" a description of the format after serialization, not what should be done ""before serialization""?

Taking your meaning, we could include the expected serialized output, which is 0x2a 0x00.  For example:

> Before serialization, the signature field must be set to an empty value so that the field is included in the signed PaymentRequest hash but contains no data (that is, the PaymentRequest's final two bytes are 0x2a 0x00).

That's a bit wordy, but it certainly makes debugging easy.  What do you think?
@schildbach : I disagree that it is too late to change, this BIP is still 'Draft'. I'm certainly willing to change the reference implementation to omit the signature field before verification (and change the sample code to match).  The fact that it sets it to an empty byte array instead is, I think, clearly a mistake.
@gavinandresen That's brave. It would require a coordinated release between bitcoin-qt, Bitcoin Wallet and BitPay, plus maybe others I'm not aware of. Can we do that?
Saying ""set it to an empty byte array"" seems straightforward enough to me. I don't think anyone has actually had any problems with implementing this part of the spec.
As long as the implementation matches that, happy with ""set it to an empty byte array"". Does feel like it's low value to change now.
@mikehearn I spent a couple hours debugging, posting to the forum, and reading Bitcoin Core's source code before figuring out what was expected in the `signature` field.

I'm not a particularly proficient programmer, which probably accounted for a large amount of my confusion and wasted time, but I also thought that rephrasing the `signature` field description on BIP70 could save other people some of that hassle.

I did initially try the default @gavinandresen is proposing, so that would certainly be nice for new implementers.  However, it seems sufficient to me to just make the BIP70 `signature` field description clearer using something like the patch in thiss pull request.

I don't really care whether we use ""empty byte array"", ""empty string"", ""empty 'bytes' value"", or whatever else. I think the important part is what comes before that: ""Before serialization, the signature field **must be set** to..."" (emphesis added)

Of the current rephrase proposals, my favorite is,

> Before serialization, the signature field must be set to an empty value so that the field is included in the signed PaymentRequest hash but contains no data.
That looks good to me.
Sounds good
ACK for ""Before serialization, the signature field must be set to an empty value so that the field is included in the signed PaymentRequest hash but contains no data.""

(no consensus on changing the spec and implementations at this point to make it perfect).
Pull request updated to use revised final sentence for the `signature` field.
",
NicolasDorier,58,,C# implementation,closed,2014-04-29 14:08:28,"Github link to a C# implementation
",https://github.com/bitcoin/bips/pull/58,['bip-0032.mediawiki'],2014-04-29T14:08:28Z,,,,
e4xit,57,,Minor grammatical & spelling corrections,closed,2014-04-29 10:46:05,,https://github.com/bitcoin/bips/pull/57,['bip-0044.mediawiki'],2014-04-29T10:46:05Z,,,,
prusnak,56,,fix typos in BIP-0043 and BIP-0044,closed,2014-04-27 10:31:30,,https://github.com/bitcoin/bips/pull/56,"['bip-0043.mediawiki', 'bip-0044.mediawiki']",2014-04-27T10:31:30Z,,['schildbach'],"ACK
",
schildbach,48,,Define a deadline for returning funds via refund_to.,closed,2014-04-26 08:28:58,"See discussion ""BIP 70 refund field"" on bitcoin-dev.
",https://github.com/bitcoin/bips/pull/48,['bip-0070.mediawiki'],2014-04-26T08:28:58Z,,"['gavinandresen', 'mikehearn']","ACK
Anyone else got a mind about this? @mikehearn maybe?
Looks good.
",
schildbach,22,,Recommend including intermediate certificates in a BIP70 payment request.,closed,2014-04-25 23:27:16,,https://github.com/bitcoin/bips/pull/22,['bip-0070.mediawiki'],2014-04-25T23:27:16Z,,"['gavinandresen', 'ExperimentsAndIdeas']","I think the wording needs to express the idea that the certificate chain MUST be complete, up to (but not including) a trusted root certificate.  But RFC5280 validation will fail if it is not, so I'm not sure how  explicit we really need to be.
The AIA field should tell the client where to fetch the issuer certificate if it's not included.  We should recommend  that the certificate is always available of HTTP and perhaps Namecoin (or other store).

It may be educational to say that HTTPS storage of a signed parent certificate provides no security value add.

(new to GitHub, not sure if this is where this comment should go.  Please advise on the correct location  to discuss this)
@makerofthings7 Keep in mind wallets might not have HTTP(S) access, maybe not even TCP connectivity. IMHO it should be a goal of this spec that the cert chain can always be validated offline.
If offline validation is a goal, and we want to support DANE (self published CA roots in DNS) then the entire chain, including the root should be included.

http://tools.ietf.org/html/rfc6698

@schildbach  @gavinandresen 
I changed the wording to:

""This MUST be
followed by additional certificates, with each subsequent certificate
being the one used to certify the previous one, up to (but not
including) a trusted root authority. The trusted root authority MAY be
included.""

That allows self-signed CA roots while still suggesting that normally the root cert is not required.
ACK
@makerofthings7 Are you ok with the current change?
Yes thank you. 
Ping. What's needed to get this merged? (I just rebased on current master)
Ping! What's needed to get this merged?
",
prusnak,53,,introduce BIP-0043 and BIP-0044,closed,2014-04-24 12:04:14,"BIP-0043 Purpose Field for Deterministic Wallets
BIP-0044 Multi-Account Hierarchy for Deterministic Wallets
",https://github.com/bitcoin/bips/pull/53,"['README.mediawiki', 'bip-0039.mediawiki', 'bip-0043.mediawiki', 'bip-0044.mediawiki']",2014-04-24T12:04:14Z,,"['voisine', 'schildbach', 'TierNolan', 'slush0', 'laanwj']","Will merge after fixing dates.
I'm happy with the contents of BIP43.
@laanwj Fixed
Thank you
What do you think of adding the simplest possible use case to BIP43 as purpose 0'? A single user wallet with no accounts/subwallets and just two chains for internal and external addresses. m/0'/chain

I'm already using this scheme in https://github.com/voisine/zincwallet , and it might be nice to have a standard for this use case for wallets designed with minimal complexity in mind. It's simple enough that it could be the default purpose and included in BIP43 rather than having it's own BIP.

I'm happy to make a pull request if other's like the idea.
Exactly for these purposes we defined BIP43, so feel free to propose your own BIP defining such simple structure. It should be pretty straightforward, once we agreed on m/purpose'/ stuff.

Btw ThomasV from Electrum wants to do the same (single account structure), so maybe you can join forces.

I have no interest in writing yet another BIP for the usecase which I do not use myself...
However, please use ""purpose"" in line with the BIP number, to prevent chaos in the numbering.
@voisine Good idea, but I think for ""fairness"" it should be in a separate BIP. Your structure looks like bitcoinj could adopt it. @mikehearn , what do you think?
My case for using 0' rather than another number is that anyone who has implemented BIP32 since it came out of draft a year ago (like myself) is already using it, since BIP32 originally suggested the first derivation be used as a subwallet/account number (though not explicit, it was indicated in the examples). By including it in BIP43 as the simplest possible use case, we can avoid confusion about the purpose matching the BIP number, while at the same time causing the least disruption for existing implementations. I also find having fewer BIPS appealing.

To clarify, I'm willing to go along with the consensus if it's to make a new BIP. I just want to argue my case.
I don't think it should be a part of BIP43 itself; we tried to put bare minimum there just to ""instruct"" other BIPs how to not conflict each to other.

I honestly think your needs are quite similar to Electrum's requirements and it deserves its own miniBIP for one-account-only structures.

Unfortunately, BIP32 example counts with 0' for first account, but it doesn't restrict usage of any other number at first level, so ""full"" specification from such example will conflict with BIP43, because it defines first level with other meaning.

Anyway I wouldn't be against BIP for one-account-only structure, where the ""purpose number"" will be set to ""0'"", to help existing applications where's 0' already hardcoded in some way.
","Please use ISO 8601 (YYYY-MM-DD) format for dates as mentioned in BIP 1 (also below in BIP44).
""meaning no its"" should be ""meaning none of its""
It's already merged in. Please create a pull request to https://github.com/trezor/bips for further improvements.
"
voisine,51,,steps to recalculate address from confirmation code,closed,2014-04-24 01:38:07,"also fixed a typo and clarified scypt parameter
",https://github.com/bitcoin/bips/pull/51,['bip-0038.mediawiki'],2014-04-24T01:38:07Z,,,,
petertodd,36,,Add in-repo BIP70 extension registration page,closed,2014-04-24 01:35:24,"Follow-up to 549afce2ee1339370dec52787548645ab1f8c3c5
",https://github.com/bitcoin/bips/pull/36,"['bip-0070.mediawiki', 'bip-0070/extensions.mediawiki', 'bip-0070/paymentrequest.proto']",2014-04-24T01:35:24Z,,"['gavinandresen', 'jgarzik']","Technical ACK -- this is technically true and technically an improvement, but, really this text is talking narrowly about extending the protobufs protocol definition.

More widely, any extensions should be documented in a BIP.
Any suggestions on the wording to make that clear?

For now it may be best to just add something along the lines of ""This page is only to avoid conflicts; you should also write a BIP document describing your extension as well.""
ACK.

RE: extensions should be documented in a BIP:  only if they prove to be useful. I expect there will be ""we thought it was a good idea at the time"" extensions that never become BIPS.
Idea: add an explicit private/experimental-use-only numbering range.
Good point.  Most specs that must allocate number/name-spaces include
- An experimental range.  Anybody is free to use these without a BIP for experiments etc.  If you get clobbered and break something, you get to keep both pieces.
- A vendor-specific range.  Any vendor rolling out vendor-specific extensions uses this range.
Y'all like making things complicated...

RE: experimental use range:  NACK on that idea, because then there is pain when a successful experiment ""needs"" to change numbers to be Officially Supported.  See the history of the x-foo ""experimental"" MIME types for a good example of why not to go that way.

RE: vendor-specific range: I don't like that either, for the same reason (successful vendor extensions get used by multiple vendors, then you have pain if you need to support the same feature as both a vendor and a standard extension).
Well the general point is to let people self-organize, rather than centrally administer.
@jgarzik Careful - I'll suggest we use 128-bit UUIDs...
",
voisine,47,,Update bip-0038.mediawiki,closed,2014-04-13 07:34:07,"fixed some typos that made the spec inconsistent and confusing to implement
",https://github.com/bitcoin/bips/pull/47,['bip-0038.mediawiki'],2014-04-13T07:34:07Z,,['laanwj'],"See also #29 and #27
Looks like the authors of the BIP are pretty much missing in action, though, so we lack someone to judge the technical correctness of the changes.
What's the procedure if a bip is abandoned by the authors for someone else
to pick it up? I'd be willing to do it. I'm one of the authors of BIP39 as
well.

Aaron

There's no trick to being a humorist when you have the whole government
working for you -- Will Rodgers

On Sat, Apr 12, 2014 at 2:03 AM, Wladimir J. van der Laan <
notifications@github.com> wrote:

> See also #29 https://github.com/bitcoin/bips/pull/29
> Looks like the authors of the BIP are pretty much missing in action,
> though, so we lack someone to judge the technical correctness of the
> changes.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bips/pull/47#issuecomment-40275646
> .
Sure, it's even encouraged to pick it up!

Would be good if you can get the OK from the previous owner (Mike Caldwell). I have the mail address mcaldwell@swipeclock.com on record for him.

If it's not possible to reach him, the BIP editor @gmaxwell can also make the decision to make you the new owner.
Just for info: Mike Caldwell got back on this and agreed. @voisine takes on ownership of BIP0038.
",
olalonde,46,,Fixed typo,closed,2014-04-08 13:41:20,,https://github.com/bitcoin/bips/pull/46,['bip-0032.mediawiki'],2014-04-08T13:41:20Z,,['petertodd'],"ACK
",
laanwj,45,,Change date format to ISO 8601,closed,2014-04-05 14:24:43,"This came up on the mailing list.

yyyy-mm-dd (ISO 8601) is the internationally accepted format for numeric
dates. This commit changes all BIPs to use that instead of dd-mm-yyyy.
It also updates BIP 0001 to prescribe the new format.
",https://github.com/bitcoin/bips/pull/45,"['bip-0001.mediawiki', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0012.mediawiki', 'bip-0013.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0017.mediawiki', 'bip-0018.mediawiki', 'bip-0019.mediawiki', 'bip-0020.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0030.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0033.mediawiki', 'bip-0036.mediawiki', 'bip-0037.mediawiki', 'bip-0038.mediawiki', 'bip-0039.mediawiki', 'bip-0042.mediawiki', 'bip-0050.mediawiki', 'bip-0060.mediawiki', 'bip-0062.mediawiki', 'bip-0070.mediawiki', 'bip-0071.mediawiki', 'bip-0072.mediawiki']",2014-04-05T14:24:43Z,,"['sipa', 'petertodd']","ACK
ACK
",
sipa,44,,Include image for BIP42,closed,2014-04-02 00:04:24,,https://github.com/bitcoin/bips/pull/44,"['bip-0042.mediawiki', 'bip-0042/inflation.png']",2014-04-02T00:04:24Z,,,,
sipa,42,,Add BIP 42: finite monetary supply for Bitcoin,closed,2014-04-01 21:57:54,,https://github.com/bitcoin/bips/pull/42,['bip-0042.mediawiki'],2014-04-01T21:57:54Z,,,,
stevenroose,39,,Fixed broken links to other BIP pages,closed,2014-03-25 06:47:53,,https://github.com/bitcoin/bips/pull/39,['bip-0016.mediawiki'],2014-03-25T06:47:53Z,,,,
petertodd,14,,Assign BIP63 for Stealth Addresses,closed,2014-03-18 17:37:38,"People are starting to come out of the woodwork and implement this; good to have something to point them to.

I'll do up an initial full-node-only draft.
",https://github.com/bitcoin/bips/pull/14,['README.mediawiki'],2014-03-18T17:37:38Z,,"['sipa', 'gmaxwell', 'laanwj']","@gmaxwell agree with this number assignment?
Uh, I got 62 for malleability.
@petertodd it's better to mail @gmaxwell to request a number (that's also what is in BIP0001)
@sipa Obviously it's more stealthy if the BIP is hiding behind another BIP...

@laanwj I did awhile back and never got a response.
It took a long time for me as well. Maybe we need an extra BIP editor.
Weird. my mailbox shows nothing except this pull and the public thread for ""petertodd stealth"", and nothing but this pull and sipa's for bip62.   In any case, sorry, I didn't see the pull because it had the same number as one I already handled!

Switch it to 63 please.
Done.

Weird, I noticed I don't seem to have that email too - maybe my memory isn't as good as I thought it was. :/
Oh, also noticed that the entry for BIP62 was duplicated - fixed. (after like 10x git rebases...)
 Huh, so looks like @gmaxwell managed to add a duplicate entry for BIP62 with a different title.

@sipa Can you double-check the README.mediawiki file after this pull-req is what you intended?
",
petertodd,24,,Document BIP16/P2SH 520 byte redeem script limit,closed,2014-03-18 17:23:15,,https://github.com/bitcoin/bips/pull/24,['bip-0016.mediawiki'],2014-03-18T17:23:15Z,,"['gmaxwell', 'gavinandresen']","This should probably go in, though I'm not sure if this alone is visible enough.
@gmaxwell I checked and bitcoinj and libbitcoin don't have specific code to take a redeemScript and product a P2SH address/scriptPubKey. bitcoin-ruby and bitcoin-js do, but do not warn about the pushdata limit. (bitcoin-js's implementation is particularly nuts, and treats _any_ unknown script as a P2SH) My python-bitcoinlib does, and is the only one that checks for excess length.

So yeah, I wouldn't be at all surprised if someone gets caught up by this eventually and loses some funds due to poorly tested code. Might be worth it to re-write the BIP so that it first describes the point of P2SH, followed by the implementation details implementors need to know. Similarly we should also mention how the coinbase ""voting"" code is now obsolete, and that P2SH checks are simply applied after a specific time. (or better yet, just point implementors to the Satoshi codebase for details on this rather than giving the wrong impression that the BIP document is the standard)
ACK
",
airbreather,31,,Documenting the timestamp for BIP-0030,closed,2014-03-18 17:21:41,"Per the linked commit, this rule became active for blocks with timestamps after on March 15, 2012 at 00:00 UTC (February 20, 2012 at 00:00 UTC for testnet).
",https://github.com/bitcoin/bips/pull/31,['bip-0030.mediawiki'],2014-03-18T17:21:41Z,,"['petertodd', 'gavinandresen']","Thank you.  I've updated the wording to better reflect the current reality.
Looks good, ACK.
ACK
",
swansontec,30,,Fix BIP 21 and BIP 72 ambiguities & mistakes,closed,2014-03-18 16:22:17,"As mentioned in the [bitcoin-development mailing list](http://sourceforge.net/p/bitcoin/mailman/message/32070951/), I have discovered some ambiguities and mistakes while writing my own bip-21 parser. This pull request fixes the various issues.
",https://github.com/bitcoin/bips/pull/30,"['bip-0021.mediawiki', 'bip-0072.mediawiki']",2014-03-18T16:22:17Z,,"['schildbach', 'gavinandresen', 'sarchar', 'laanwj']","Is the ABNF grammar case sensitive? Because RFC 3986 is, afaik. This is relevant e.g. for the ""bitcoin:"" scheme, which could also be written as ""BITCOIN:"" or ""BiTcOiN:""
See also #26 
@schildbach You are right, the scheme is case-insensitive, although the RFC strongly advises everyone to write it in lower case. On the other hand, we have to accept things like ""BiTcOiN:"". I will add another patch to fix this.
While you're at it, parameter names are case insensitive as well afaik.
The URI scheme identifier is case insensitive, however we only accept parameter names in lower-case. 
@laanwj I'm talking about RFC 3986 rather than current impls.
I don't think RFC 3986 says anything about the interpretation/comparison of parameter names.
(see for example 6.2.2.1: The other generic syntax components [apart from scheme and host] are assumed to be case-sensitive unless specifically defined otherwise by the scheme)
@schildbach Ok, I have researched this a bit more, and yes, ABNF is case-insensitive. So, this means that both the scheme (good) and query parameter names (bad) are case-insensitive. The only way to make the query parameter names case-sensitive is to encode their ASCII values, like so:

```
amountparam    = %x61.6d.6f.75.6e.74 ""="" *digit [ ""."" *digit ]
labelparam     = %x6c.61.62.65.6c ""="" *qchar
messageparam   = %x6d.65.73.73.61.67.65 ""="" *qchar
reqparam       = %x72.65.71 ""-"" qchar *qchar ""="" *qchar
```

This is ugly, but conforms to what bitcoin-qt is doing.
Now that the grammar is free of syntax errors, it is possible to actually run it. There is an interactive ABNF tester at [http://coasttocoastresearch.com/interactiveapg]. The grammar from the BIP doesn't define ""digit"", ""base58"", or ""qchar"", so the following temporary definitions are still needed to make it work:

```
digit  = %x30-39
base58 = %x31-39 / %x41-48 / %x4A-4E / %x50-5A / %x61-6B / %x6D-7A
qchar  = digit / %x41-5A / %x61-7A
```
Adding raw hex in the grammar description doesn't make it easier to read for humans, which are the prime audience here. Maybe just add a mention that the parameter names are case sentitive.
Yes, @laanwj, I agree that this is harder to read. I have rebased the pull-request, reverting the change to the ABNF grammar and  inserting a note instead.
ACK
There haven't been any comments in a while. Perhaps this is ready to merge?
ACK
","I know it's pedantic, but RFC 3986 seems to imply that the query string can be empty, even if ""?"" is present.  Thus,

```
bitcoin:1JwSSubhmg6iPtRjtyqhUYYH7bZg3Lfy1T?
```

is a valid URI, according to RFC 3986, but would not match this grammar.
To fix this, we could add a second set of square brackets to `bitcoinurn`, like so:

```
bitcoinurn     = ""bitcoin:"" bitcoinaddress [ ""?"" [bitcoinparams] ]
```
Also, the RFC only defines the general syntax of a URI, and the individual schemes are all a subset of that, each with their own restrictions. Therefore, it is perfectly valid for us to make an empty query string illegal in our scheme. It might be worthwhile to see what the reference client does with URI's like this, and just match that behaviour.
We accept empty query strings so just `bitcoin:address?`.
Also the address can be empty in case of a payment request i.e. `bitcoin:?r=...`. But that's a different BIP.
"
afk11,35,,Link to PHP implementation of BIP32- Passes test vectors.,closed,2014-03-17 08:39:23,"Adding a link to my PHP implementation of BIP32. Passes test vectors from github. 
",https://github.com/bitcoin/bips/pull/35,['bip-0032.mediawiki'],2014-03-17T08:39:23Z,,,,
ethernomad,33,,Link to Protocol Buffers message definition file.,closed,2014-03-17 08:34:56,"It took me quite a while to locate this file. Having it in the BIP would have made things easier.
",https://github.com/bitcoin/bips/pull/33,"['bip-0070.mediawiki', 'bip-0070/paymentrequest.proto']",2014-03-17T08:34:56Z,,"['petertodd', 'jgarzik', 'laanwj']","An alternative would be to include the content instead of a link.

After all, in this case the BIP is normative, not the master branch of the reference implementation (which could add extensions etc...).
Agreed.

Copy the protobuf message file to the bip-0070/ directory and link it internally.
@laanwj  +1
Okay I added the file and linked to it directly.
ACK
ACK
",
sipa,12,,Update BIP32: 'hardened' terminology + explicit conversions,closed,2014-03-13 15:27:30,,https://github.com/bitcoin/bips/pull/12,['bip-0032.mediawiki'],2014-03-13T15:27:30Z,,"['sarchar', 'mikehearn', 'laanwj']","@mikehearn Please have a look!

This is a significant rewrite; it's probably better to look at the formatted result (https://github.com/sipa/bips/blob/bip32update/bip-0032.mediawiki) than at the diff.
Request for comments:
- Are the explicit conversion functions (serpoint, ser32, ser256, parse256) useful, or do they clutter?
- Same for the N() (neuter) function: useful to explicitly make derivation chains private or public?
- Is using a function (point(k)) an improvement over writing k*G (making it clear that it's sort of a conversion, but I'm not entirely happy with the name ""point"").
- Notation for hardened keys: is the suffix ""h"" better than just ""'""? It's sort of ugly when preceded by a variable.
- Shorter function names, or are these long ones more readable?
I think this is a huge improvement, thanks! Just a couple of very minor things:
- changelog at the top could be updated
- There's a Java impl in bitcoinj as well (code.google.com/p/bitcoinj)
I like the explicit conversion functions, especially as they are described in detail in an initial conventions section, this makes the document more accessible. The longer names are also easy to look up when needed. They don't appear to cause clutter anywhere.
> Notation for hardened keys: is the suffix ""h"" better than just ""'""? It's sort of ugly when preceded by a variable.

My only concern is that for my site (http://bip32.org/), the subscripted ""h"" can't (easily?) be typed into the custom derivation path.  I don't know how big of a concern that is because 99% of users will never see a derivation path, but at least for my site I won't be able to support the ""h"" in custom paths.
@sarchar How about a non-subscripted h?

Given that the other usage of ' has been removed, I can just revert to using it for hardened derivation steps. Maybe others already depend on that notation too.
Would a non-subscripted h make it look like a hex number?

How about a plus sign?
@sipa is this ready for merging or are you still planning to update it?
I've added a note that the old notation (i') is also allowed, in addition to i_H. 
","does not -> do not
This doesn't mention that coordination is needed to prevent the two systems from stepping on each other's toes (dealing out the same keys by generating overlapping indices). Does it assume that they will be using different accounts?
No motivation is given for having separate internal/external chains. I suppose this is because they have different look-ahead properties (as mentioned later under wallet sharing) but it may be useful to mention this here.
I'll address this in a separate change.
"
sipa,32,,Add draft BIP62,closed,2014-03-12 19:03:05,,https://github.com/bitcoin/bips/pull/32,"['README.mediawiki', 'bip-0062.mediawiki']",2014-03-12T19:03:05Z,,['petertodd'],"I've got changes to suggest, but let's merge this as a good start.

ACK
",
schildbach,25,,Fix typo: PaymentRequest is hashed rather than the Payment message.,closed,2014-03-02 12:42:15,,https://github.com/bitcoin/bips/pull/25,['bip-0070.mediawiki'],2014-03-02T12:42:15Z,,,,
schildbach,20,,Clarify UTC for all time values in BIP70.,closed,2014-02-19 00:11:19,,https://github.com/bitcoin/bips/pull/20,['bip-0070.mediawiki'],2014-02-19T00:11:19Z,,"['sipa', 'petertodd', 'jgarzik', 'luke-jr', 'laanwj']","I don't object to this as a clarification, but it's not really a change. Unix timestamps are always seconds since 1 jan 1970 UTC.
NACK

Unix timestamps _are_ UTC:

Unix time, or POSIX time, is a system for describing instants in time, defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970,[note 1] not counting leap seconds.[note 2] It is used widely in Unix-like and many other operating systems and file formats. Due to its handling of leap seconds, it is neither a linear representation of time nor a true representation of UTC.[note 3] Unix time may be checked on most Unix systems by typing date +%s on the command line.
-http://en.wikipedia.org/wiki/Unix_time
@petertodd I think it makes still sense as a clarification. The (I believe) first two users of the spec -- apart from the author himself -- got it wrong. I only implemented it correctly by accident.
I don't see how one can get this wrong. It shouldn't even be possible to get a Unix-time-like number in another timezone...?

If it's a clarification, it should be the one place _inside_ the parenthesis.
Agree with @luke-jr here.
Ok I moved the UTC into parenthesis.

I also rephrased the third appearence because it wasn't even mentioning unix time (just ""system"").
Looks reasonable, ACK.
s/Require/Clarify/ in commit description.
ACK
ACK

Maybe what we need here is a reference to the definition of Unix time and the POSIX functions for it, no matter how strange it may sound people seem to not be aware of those (some developers implementing this spec manually implemented functions to count seconds since the epoch in local time?!).
@laanwj Just a side node: As a Java dev, you never get in touch with unix time. All time values are expressed in milliseconds, or other fancy stuff like Date or Calendar objects.
@schildbach Right, though currentTimeMilis() is really UNIX time but multiplied by a factor 1000. I don't think it gets confused about timezones.
",
jmcorgan,16,,Added bip32utils Python implementation reference,closed,2014-02-10 15:01:38,,https://github.com/bitcoin/bips/pull/16,['bip-0032.mediawiki'],2014-02-10T15:01:38Z,,['laanwj'],"The branch has been updated with a better description of the two Python implementations available.
","This looks a bit duplicated. Maybe mention the two Python implementations in one paragraph, and explain in one line or so what is the difference.
"
oleganza,15,,added link to Objective-C implementation of BIP32,closed,2014-02-10 07:56:01,,https://github.com/bitcoin/bips/pull/15,['bip-0032.mediawiki'],2014-02-10T07:56:01Z,,,,
fanquake,19,,Fix typos in BIP 14,closed,2014-02-10 07:50:06,"proceeds -> precedes
seperate -> separate
",https://github.com/bitcoin/bips/pull/19,['bip-0014.mediawiki'],2014-02-10T07:50:06Z,,,,
slush0,17,,BIP39 changes,closed,2014-02-10 07:31:37,"Hello,

BIP39 is already implemented in Trezor, Multibit HD and bitcoinj 0.11. Other projects also agreed to eventually implement it (Electrum). Please merge the latest version of BIP39 and change status from Draft to Accepted.

Thanks,
Marek
",https://github.com/bitcoin/bips/pull/17,"['bip-0039.mediawiki', 'bip-0039/english.txt']",2014-02-10T07:31:37Z,,"['gmaxwell', 'maaku', 'prusnak', 'petertodd', 'christophebiocca', 'luke-jr', 'gary-rowe']","PBKDF2 iteration counts this low are kind of snake-oily— not high enough to prevent millions of attempts per second and precomputation attacks. The low count was more acceptable when the design wasn't being promoted as a ""brain wallet"". To both recommend this as a brain wallet and reduce the iteration count further is concerning.  The lack of a delegatable structure has also arisen as an issue with other wallet encoding formats.

I'm afraid that I couldn't recommend this design as a best practice. I consider the current design irresponsible and unsafe.
@gmaxwell: I don't think that low iteration count is a problem. The thing is that every passphrase is accepted and will generate a valid BIP32 root node (plausible deniability). Attacker would need to take this root node, descend to a node which contains possible address and look into a blockchain if it has been used already. The last operation is much more complicated than using higher PBKDF2 iteration count or  using scrypt instead of PBKDF2.

Moreover user can send various small amounts of bitcoins to fake passphrases in order to confuse a possible attacker and protect the intended passphrase.
Another point is that BIP39 is not supposed to be a classic ""brainwallet""; source of entropy is a computer's RNG, not a human mind, so the BIP39 sentence is already very strong, plus the passphrase described by @prusnak.

For these reasons I don't think your concern is valid for expected usecases of bip39.
Yes, doing the point multiply to get the pubkey is more costly— but my laptop can do around 170,000 G*s operations per second. Specialized hardware (e.g. retasked FPGAs) could be much, much faster. We've already seen in practice that brain wallets have _frequently_ resulted in users getting robbed (google: brainwallet stolen).  I would not personally support a BIP promoting brainwallets— which the revised text of the BIP currently does as of this pull request— unless it had ludicrous strengthening.

> Moreover user can send various small amounts of bitcoins to fake passphrases in order to confuse a possible attacker

... Really?
@gmaxwell Really 
> Specialized hardware (e.g. retasked FPGAs) could be much, much faster. 

The entropy of bip39 mnemonic is 128-256 bits. Bruteforcing that is impractical.
Not only are you promoting brainwallets, but for the users who don't use BIP39 as a brainwallet your risking their funds by not including a checksum. Even a very simple checksum, just 8 bits, would dramatically reduce the chance of this happening, and can be implemented on slow devices like a Trezor, yet you're not doing that.

Like it or not you're going to get people hurt.
> The entropy of bip39 mnemonic is 128-256 bits. Bruteforcing that is impractical.

The entropy of bip39 used as a brainwallet is not 128-256 bits...
@gmaxwell @petertodd In the whole bip39 the ""brainwallet"" is mentioned only once with the meaning that you _may_ remember the sentence generated by the computer.

In our proposal the mnemonic is supposed to be generated by algorithm described here: https://github.com/trezor/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic
. This creates mnemonic with very high entropy and with checksum; that's how we implement that in Trezor.

The reason why generating of mnemonic is ""optional"" part of the proposal is because some developers want to implement mnemonic generator in different way (but still with high entropy), but still want to achieve bip39 compatibility.
Which is the problem, ""bip39 compatibility"" will end up getting achieved by letting invalid checksums be ignored, users will accidentally enter in seeds that are invalid, and they're not going to notice. Like I said before on the email list if you're stuck with the UTF8 strings requirement - which I think it nuts anyway - brute force seeds so that only a small % are valid. In this case you can ""soft-fork"" the standard by further restricting what is valid, and depreciating old seeds as quickly as possible.
We at Trezor solve ""bip39 compatibility"" by displaying red warning when the mnemonic has invalid checksum (or words are not in known wordlist). User can agree in using _that_ sentence as the seed,  but he got the information that he might be doing something wrong, which is generally a good practice.

I mean - this is purely problem of dialogs in the application and not the problem of the algorithm itself, which has been created as a consensus across many developer teams. As I said, this is already implemented in various software and people are already using that in real applications. For that reason it is impractical to re-write the draft.

There was also long discussion (started more than six months ago), so I'm bit puzzled that you raised such concerns right now.
@slush0 At some point the design changed, originally an application _could_ reject user formed ""brainwallet"" strings, under the revised design this isn't possible because the proposal now consists of a completely independent ""brainwallet"" scheme with no constraints at all on the string. Because of this I can't see how you're arguing this is ""purely a problem of dialogs in the application"".

As it stands there is no advice to include such dialogs, much less any instruction about required to  do so, any considerations in the design to make doing so easy, or even any acknowledgement that a concern and a solution even exist.  Effectively your response is telling me that to make the proposal safe an implementer must undertake a number of additional steps which are not even hinted at in the proposal. I hope you can see why I consider this concerning.

""We rushed ahead and deployed this in applications"" is absolutely not a reason to endorse a BIP as accepted that has a flawed security model which _will_— as has been amply been demonstrated by the catastrophe of ""brain wallets""— put users funds at risk.

If the proposal was revised (reverted!) to include a specification for decoding and checking the strings and mandating that conforming implementations perform this check and at least warn the user as you describe I would still consider this an mildly unfortunate conclusion— as we already know that users risk assessment on brainwallets is usually miscalibrated— but far better and no longer reprehensible. This could maintain compatibility with ""plausible denyablility"" schemes by only applying the test to the (say) first 128 bits worth of input.
@gmaxwell Yes, we changed things as some developers on bitcoin-dev mailing list raised concerns about hardcoded wordlist. All this has been widely discussed on the list so this is not any ""surprise"". Actually the change was the way to find any consensus. Again, there _is_ a checksum, it is simply not enforced; that's the red box described above.

Yes, we rushed in recent year to find a concensus between developers. Obviously it is not possible to satisfy everybody, but as you see, the draft is implemented by independent teams in other software, so it's not that _I_ rushed anything. The fact that you didn't follow discussion on topic is not my fault.
@slush0 "" that's the red box described above."" is not part of the proposal. If it were part of the proposal I would have far less concern.  Effectively you are admitting that this proposal is unsafe if implemented as specified.

I did follow the discussion on bitcoin-development— and I saw several people express concern that the proposed modifications were unsafe. Accordingly, I was surprised to see this pull request.

Can you explain to me the opposition to specifing the behavior which you admit above is necessary for safe usage?
> Can you explain to me your unwillingness to specify the behavior which you admit above is necessary for safe usage?

If it will be enough for you, then it is ok for me as well. This is your first constructive comment since the beginning of the discussion.
I apologize for offending you, it wasn't my intent.

If I thought I were raising a new concern I would have lead with remedies.  Proposed solutions were proposed by Peter Todd and Adam Back and went completely without response by the proposing team, and concerns were expressed by others. (And Peter was clear that his opposition at the time was strong enough for him to NAK the proposal)

Specifying a verification scheme, even if its bypassable in conforming implementations, would be acceptable to me. As would the condition check proposed in various forms at various times and places by Sipa, Peter Todd, and Adam Back (which has the benefit of dictionary independence but with some computational cost at generation time).— though I'll go ask those other folks to comment to, because I don't want to send you down a goose chase only to get to another roadblock.
@gmaxwell Do you think adding the following paragraph to ""From mnemonic to seed"" section would solve the raised problem? (Feel free to extend and/or rephrase).

""Although using mnemonic not generated by algorithm described in ""Generating the mnemonic"" section is possible, this is not advised and software should compute checksum of the mnemonic sentence using wordlist and issue a warning if it is invalid.""
I don't think this is (correctly used) merely a ""brainwallet"", since it is 1) computer-generated (entropy should be the same as any other HD wallet seed), and 2) represents a true wallet (not just an address). It'd definitely be better if software had a way to (and was required to) verify the input was computer-generated - is there a way to at least ensure this is possible in the future, even if not implemented in the initial releases?

Side idea, probably way too late unless people really like it: can the seed (and checksum) be encoded as a pattern, rather than the words themselves?
@slush0 @prusnak

I think enforcing the checksum (at least with a warning, if not outright refusal to proceed) is exactly how we steer users away from using brainwallets. If they're willing to calculate the checksum by hand and still not use a good random generator, we can't help them.

I'll also reiterate my previous suggestion to include the trezor's wordlist as a recommended default right in the BIP itself. While I understand you're trying to accomodate the desire for other wordlists, there's no harm in at least saying ""use this one for maximum compatibility"". Hopefully most/all wallets will support it.
Such a low, non-user settable iteration count for PBKDF2 is _extremely_ worrying. It should be set as high as possible without introducing unacceptable delay in the user interface. I expect that even on a hardware constrained device like the Trezor this would be a much larger value, maybe in the 10k range. Additionally, it is something which could be compactly encoded in the mnemonic itself (e.g. by storing the base-2 logarithm minus the minimum). This would future-proof the standard against future hardware advances.

The lack of a details of checksum validation is a non-starter. If I were creating or curating a wallet app, I would not allow creation/exports of private keys using this BIP. Users must have a simple, offline mechanism for checking that the validity of a remembered private key, especially if this is being recommended for brainwallet use.

It is trivially easy to create two UTF-8 strings which are semantically identical but hash differently. With Trezor you control the input stack, but other wallet developers are left up to the whims of the operating system / user software. This will become a problem for users whose localized wordlists involve compatibility characters: is é U+00E9 or U+0065 U+0301? Both are valid Unicode, both hash differently, and both look identical to user. There is a solution to this problem almost as old as Unicode: normalized forms of Unicode standard annex 15 (http://unicode.org/reports/tr15/). Why are you not first converting to a normalized form before hashing?
> Such a low, non-user settable iteration count for PBKDF2 is extremely worrying. It should be set as high as possible without introducing unacceptable delay in the user interface.

If the entropy is bad, you've already lost. These aren't password hashes, they're meant to be a way to crunch a high-entropy string back into a fixed size seed. Honestly, it might as well be a single SHA256 call, to make people understand that it's not secure when used with user-chosen strings.

> Users must have a simple, offline mechanism for checking that the validity of a remembered private key

They do, as long as the implementation they use to check it suppports the same word list. The one advantage of this over the original bidirectional mapping technique is that once I've written down my mnenomic, and I've verified that it is correct (using the checksum), I can import that passphrase into any future wallet that supports BIP39, even as they migrate to other wordlists or longer strings.

> This will become a problem for users whose localized wordlists involve compatibility characters: is é U+00E9 or U+0065 U+0301

Assuming a wallet developer does use a custom word list with unicode characters, can't the list itself define the canonical representation of the word? It won't save you when the importing wallet doesn't support the word list, of course, but that's a given.

It seems like everyone is fixating on the fact that this BIP allows for unsafe implementations to still technically be compliant. Yet when the stricter original proposal was written, it was impossible to get wallet developers to agree to implement it.

My concern is not whether wallets with terrible security practices can call themselves ""bip39 compliant"" or not. All I want to make sure of is that someone writing a new wallet, reading the proposal, can write a secure implementation without having to read between the lines.
@maaku  _""Such a low, non-user settable iteration count for PBKDF2 is extremely worrying.""_

Wrong. Read my comment above: https://github.com/bitcoin/bips/pull/17#issuecomment-34444090

@maaku  _I expect that even on a hardware constrained device like the Trezor this would be a much larger value, maybe in the 10k range._

Wrong again. 1k takes around 1 second on Trezor. 4k takes ~4 seconds.
::sigh:: the slow KDF is the reason for delegatable designs, but I'm certainly not about to argue that you should have that kind of major redesign. I should have called out delegation very early... but when there was ~no risk of brainwallet use there wasn't really a need for a KDF at all except for standard good practice and to make adhoc manual threshold encryption by splitting up the key more secure.

The constraints on trezor performance make it infeasible to make any user produced entropy reasonably secure, so I suspect the focus should be on the minor improvements necessary to make that kind of misuse unlikely. 

As far as the language goes, I think thats probably the right direction but inadequate detail to actually achieve the good behavior in practice. I feel bad that I've left you feeling like the goalposts are being moved out from under you, and so I'm hoping that some actual (fast) resolution can come from the thoughts being expressed here, and I'm consciously trying to avoid adding more yea/nay while other people are still chiming in.
Regards to unicode normalization: which form of these four is the most common? https://en.wikipedia.org/wiki/Unicode_equivalence We can mention specific normalization form in the BIP, making these conversions clear.
@christophebiocca:

> If the entropy is bad, you've already lost. These aren't password hashes, they're meant to be a way to crunch a high-entropy string back into a fixed size seed. Honestly, it might as well be a single SHA256 call, to make people understand that it's not secure when used with user-chosen strings.

Then find a way to make the checksum mandatory and fail strings which do not pass. If you don't do that, then human nature being what it is people will use it to construct their own unsafe private keys. And they will have their funds stolen.

> They do, as long as the implementation they use to check it suppports the same word list.

The word list is not a part of this standard. What you're telling me is that to perform the verification I need to use something implementation-defined. That's very much defeating the point of having a standard, and worrying. I'd much rather there was a universal, wordlist-independent way to check validity.

> It seems like everyone is fixating on the fact that this BIP allows for unsafe implementations to still technically be compliant.

Yes, yes we are. Because it is our responsibility to make sure that standards ensure safety.

The Unicode problem is trivially fixable: mandate that strings are converted into a normalized form before further processing. NFKD is probably the form you'd want, but I'd recommend reading the entire annex and making a determination yourself.

This is a one-line fix to the standard, and doesn't effect your Trezor implementation at all, assuming you're using an English (ASCII) word list.
> Regards to unicode normalization: which form of these four is the most common? https://en.wikipedia.org/wiki/Unicode_equivalence We can mention specific normalization form in the BIP, making these conversions clear.

Normalized form C is the most common, as that is what is mandated for Internet traffic (I'm not sure if there's an actual RFC to this point, or if it is just convention, but it's what everyone uses).

However for this particular application you probably want one of the compatibility forms, since those are many-to-one mappings that further reduce the possibility of bad Unicode input resulting in the wrong key being imported. I think NFKD would be the safest choice, but it'd be nice if someone else read the annex and made an independent determination.
Ok, after digging into normalization forms, NFKD really seems to be the best choice, so I specified it in the paper.

I also removed the reference to ""brainwallet"" (which was clearly misunderstanding, because we didn't understand that term as a sentence necessarily generated by human) and with an explanation that this proposal aim to encode computer-generated entropy to human-readable data and back, not to serve brainwallet purposes.
@slush0 
This addresses my concerns with the standard. Someone reading and implementing bip39 can now write an entirely secure and compatible implementation without having to dig around for auxiliary information.

Thanks.
@slush0 Would you mind raising an issue in Bitcoinj to cover the normalization requirement? I think that Ken Sedgwick should know about the normalization requirement, if he isn't tracking this repo.

This link will probably help him: http://docs.oracle.com/javase/tutorial/i18n/text/normalizerapi.html
This is much better, but please consider adopting something like Peter/Adam's checksum grinding proposal, or separating the checksum from the menmonic. I would rather there was no KDF and the checksum enforced than standardization on an English wordlist.
",
schildbach,13,,Fix missing word in pki_data description,closed,2014-01-28 17:25:34,"I guess this should be uncontroversial.
",https://github.com/bitcoin/bips/pull/13,['bip-0070.mediawiki'],2014-01-28T17:25:34Z,,,,
sipa,4,,Extend description of the partial merkle block format,closed,2014-01-23 07:04:09,,https://github.com/bitcoin/bips/pull/4,['bip-0037.mediawiki'],2014-01-23T07:04:09Z,,"['mikehearn', 'jgarzik', 'TheBlueMatt']","@mikehearn @TheBlueMatt Look!
Seems sane by quick review
Awesome, thanks! Fixed comments in the code would be neat too :)
Nice, looks good.
","Would be nice to add a note as to why this is necessary (""in the same way that hashes are repeated when building the full merkle tree"")
"
brotchie,10,,Fixed table cell truncation in BIP 70,closed,2014-01-23 07:03:52,"Added spaces after cells in the first column of the `PaymentDetails` table because their contents were being truncated by GitHub's markdown renderer.
",https://github.com/bitcoin/bips/pull/10,['bip-0070.mediawiki'],2014-01-23T07:03:52Z,,,,
matiu,11,,fix typo at bip0010,closed,2014-01-23 07:03:33,,https://github.com/bitcoin/bips/pull/11,['bip-0010.mediawiki'],2014-01-23T07:03:33Z,,,,
elidourado,9,,Add Type field to table in README,closed,2014-01-17 16:06:08,"I thought it would be nice to enable people browsing BIPs to be able to
tell at a glance which ones are standards track and which are
informational.
",https://github.com/bitcoin/bips/pull/9,['README.mediawiki'],2014-01-17T16:06:08Z,,"['gavinandresen', 'jgarzik']","ACK
Nice, ACK
",
discretepackets,6,,Update bip-0013.mediawiki,closed,2014-01-14 08:18:37,"Clarified that the 4-byte checksum is from double SHA256 rounds
",https://github.com/bitcoin/bips/pull/6,['bip-0013.mediawiki'],2014-01-14T08:18:37Z,,"['gavinandresen', 'laanwj']","@gavinandresen This change is correct, I suppose?
ACK
",
sarchar,7,,Link to Sarchar's JavaScript BIP32 implementation.,closed,2014-01-14 08:18:29,,https://github.com/bitcoin/bips/pull/7,['bip-0032.mediawiki'],2014-01-14T08:18:29Z,,['laanwj'],"Needs rebase
Rebased
",
wemeetagain,8,,Adding link to Go implementation of BIP0032,closed,2014-01-13 17:42:17,,https://github.com/bitcoin/bips/pull/8,['bip-0032.mediawiki'],2014-01-13T17:42:17Z,,,,
prusnak,3,,update to latest BIP-0039 draft,closed,2013-12-16 08:35:10,,https://github.com/bitcoin/bips/pull/3,"['README.mediawiki', 'bip-0039.mediawiki']",2013-12-16T08:35:10Z,,,,
laanwj,1,,Update BIP-0001 for github move,closed,2013-12-13 07:44:04,"- Mention github instead of wiki
- Add markdown as allowed format
- Fix some weirdnesses such as ""A BIP editor must subscribe to the gmaxwell@gmail.com list."". Remove the repetition and create a new section which lists the BIP editors (currently only gmaxwell).
- Prefer discussion on mailing list to forum

This is just a cleanup and change for the github move. I have not changed the process to jgarzik's new proposed process (http://sourceforge.net/mailarchive/forum.php?thread_name=CAAS2fgROsymXnXTrfLTLTQ%3DEDwaAFu%2BxrrD4Q-Gye5XWze7vFw%40mail.gmail.com&forum_name=bitcoin-development), this can be done in a later separate change.
",https://github.com/bitcoin/bips/pull/1,['bip-0001.mediawiki'],2013-12-13T07:44:04Z,,"['gmaxwell', 'ghost']",":+1:
ACK
",
wink,2,,Adding link to Ruby implementation of BIP0032,closed,2013-12-13 07:43:52,"I had added this link on the wiki, but when the page got moved over to GitHub, the link disappeared.
",https://github.com/bitcoin/bips/pull/2,['bip-0032.mediawiki'],2013-12-13T07:43:52Z,,,,
kallewoof,725,,BIP: Generic Signed Message Format,open,,,https://github.com/bitcoin/bips/pull/725,['bip-generic-signmessage.mediawiki'],,,,,
jeffrade,724,Proposed BIP modification,[Trivial] BIP-70 Fixing sipa's gist proposal url,open,,"Came across ""broken"" url. This should have given a 404, but there is actually a user `1237788`. ",https://github.com/bitcoin/bips/pull/724,['bip-0070.mediawiki'],,,['luke-jr'],@gavinandresen @mikehearn ,
rahimnejhad,723,Proposed BIP modification,Add persian wordlists,open,,,https://github.com/bitcoin/bips/pull/723,['bip-0039/persian.txt'],,,['luke-jr'],@slush0 @prusnak @voisine @ebfull ,
ghost,722,invalid,Recovery,closed,,Satoshi Nakamoto ,https://github.com/bitcoin/bips/pull/722,"['.travis.yml', 'README.mediawiki', 'bip-0001.mediawiki', 'bip-0002.mediawiki', 'bip-0002/process.png', 'bip-0002/process.svg', 'bip-0008.mediawiki', 'bip-0008/assignments.mediawiki', 'bip-0008/states.png', 'bip-0009.mediawiki', 'bip-0009/assignments.mediawiki', 'bip-0009/states.png', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0012.mediawiki', 'bip-0013.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0017.mediawiki', 'bip-0018.mediawiki', 'bip-0019.mediawiki', 'bip-0020.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0030.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0033.mediawiki']",,,,,
DavidMStraub,721,Proposed BIP modification,Add German word list for BIP0039,open,,"This adds a German word list with the following properties:

- Only ASCII letters (no äöüß, no dashs or apostrophes)
- Only nouns in nominative case (no plurals, no genitives), i.e. all startig with an uppercase letter
- At least 4, at most 6 letters
- First 4 letters identify the word uniquely
- No offensive words
- Tried to avoid words with ambiguous spelling (Delphin,  Delfin)",https://github.com/bitcoin/bips/pull/721,['bip-0039/german.txt'],,,"['benjam1n', 'luke-jr']",@slush0 @prusnak @voisine @ebfullWhat are the chances for this to get merged soon?,
brenorb,720,Proposed BIP modification,Add Portuguese wordlist,open,,"1. Length between 4 and 8 characters.
2. Words can be uniquely determined typing the first 4 characters.
3. No accents or special characters.
4. No complex verb forms.
5. No plural words, unless there's no singular form.
6. No words with common double spelling, except when the only change is the accent.
7. No words with the exact sound of another word with different spelling.
8. No offensive words.
9. No words already used in other language mnemonic sets.
10. The words which have not the same spelling in Brazil and in Portugal are excluded.",https://github.com/bitcoin/bips/pull/720,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/portuguese.txt']",,,"['murtagha', 'johnnyasantoss', 'luke-jr']","Thanks for doing this!   <div id=""btc-quote""></div>
    <script type=""text/javascript"" src=""https://www.weusecoins.com/embed.js""><script>@slush0 @prusnak @voisine @ebfull",
azuchi,717,,[BIP158] Fix test vector link,closed,,"Test Vector link is old (P = 20), so replace it new one(P = 19).",https://github.com/bitcoin/bips/pull/717,['bip-0158.mediawiki'],,,,"so it was duplicated (#713), I will Close.",
straumat,715,Proposed BIP modification,BIP171 - Adding Cerise to Reference implementation,open,,,https://github.com/bitcoin/bips/pull/715,['bip-0171.mediawiki'],,,,,
straumat,714,Proposed BIP modification,BIP171 - Error management,open,,Adding a proposal of error management for the API.,https://github.com/bitcoin/bips/pull/714,['bip-0171.mediawiki'],,,,,
RCasatta,713,Proposed BIP modification,fix test vector link,open,,,https://github.com/bitcoin/bips/pull/713,['bip-0158.mediawiki'],,,['luke-jr'],@Roasbeef @aakselrod ,
elucidsoft,708,Proposed BIP modification,Added .NET Standard 2.0 Implementation,open,,Added line in implementation for .NET Standard 2.0,https://github.com/bitcoin/bips/pull/708,['bip-0039.mediawiki'],,,['luke-jr'],@slush0 @prusnak @voisine @ebfull,
Varunram,706,Proposed BIP modification,[trivial] remove duplicate of,open,,,https://github.com/bitcoin/bips/pull/706,['bip-0069.mediawiki'],,,"['odarboe', 'Empact', 'promag', 'luke-jr']",ACK 3640129.ACK 3640129ACK 3640129@kristovatlas ,
technologiespro,705,Proposed BIP modification,Add Russian Word list,open,,,https://github.com/bitcoin/bips/pull/705,['bip-0039/russian.txt'],,,['luke-jr'],excluded symbols (й & ё) for compatibility with other libraries@slush0 @prusnak @voisine @ebfull,
cornfeedhobo,697,,Remove erroneous prefix bits from BIP-0039 french wordlist,closed,,"This PR seeks to remove a strange prefix found in the french wordlist.

This can be confirmed with `hexdump -C -n 8 bip-0039/french.txt`.

    00000000  ef bb bf 61 62 61 69 73                           |...abais|

The first 8 bytes should be the word `abaisser`.

    00000000  61 62 61 69 73 73 65 72                           |abaisser|",https://github.com/bitcoin/bips/pull/697,['bip-0039/french.txt'],,,['iancoleman'],"See https://github.com/bitcoin/bips/pull/537

> That's the UTF8 BOM marker (3 bytes `EF BB BF`). You should not remove that, as it will disable automatic encoding recognition for some apps.

And further discussion in https://github.com/bitcoin/bips/pull/622@iamsamwood thanks. I'm going to close this and follow #622.",
yuntai,695,Proposed BIP modification,[Trivial] typo fix in bip-0032,open,,parse<sub>256</sub>(I<sub>L</sub>) to compare with an integer,https://github.com/bitcoin/bips/pull/695,['bip-0032.mediawiki'],,,['luke-jr'],@sipa,
4tochka,693,,fix example for Native P2WPKH,closed,,"First input P2PKH missed public key is script sig ( P2PKH script sig : <signature> <public_key> )

Incorrect witness field bytes, changed according to bip 141: The witness is a serialization of all witness data of the transaction. Each txin is associated with a witness field. A witness field starts with a var_int to indicate the number of stack items for the txin. It is followed by stack items, with each item starts with a var_int to indicate the length. A non-witness program (defined hereinafter) txin MUST be associated with an empty witness field, represented by a 0x00.",https://github.com/bitcoin/bips/pull/693,['bip-0143.mediawiki'],,,,,
polydin,691,Proposed BIP modification,Trivial: typo,closed,,,https://github.com/bitcoin/bips/pull/691,"['bip-0157.mediawiki', 'bip-0158.mediawiki']",,,"['Empact', 'luke-jr']","ACK 0ad7061 - https://github.com/polydin/bips/blob/master/bip-0158.mediawiki#definitions@polydin Given the commits are unrelated, I'd split the second one out into a separate PR.@Roasbeef @aakselrod ",
dlwhitehurst,690,Proposed BIP modification,added my C implementation to the mediawiki page for bip-39 ,open,,I am requesting the addition of my command-line c-implementation of BIP-39.,https://github.com/bitcoin/bips/pull/690,['bip-0039.mediawiki'],,,"['Nathapon8899', 'luke-jr']",@slush0 @prusnak @voisine @ebfull @voisine @ebfull@prusnak @ slush0 ,
afk11,689,Proposed BIP modification,BIP 114: Add DROP after CLTV/CSV opcodes in flattened branches,open,,"In the HTLC example https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki#hashed-time-lock-contract I think there DROP is required after the CSV / CLTV opcodes

There was branch by the same author @jl2012 to make CSV/CLTV actually pop from the stack in MAST, but the behavior is not described or referred to in BIP114 at the moment.",https://github.com/bitcoin/bips/pull/689,['bip-0114.mediawiki'],,,['luke-jr'],@jl2012 ,
AtsukiTak,688,Proposed BIP modification,Fix a link of BIP 0060,open,,There was an invalid link pointing to BIP 0037.,https://github.com/bitcoin/bips/pull/688,['bip-0060.mediawiki'],,,['luke-jr'],@genjix ,
dongri,686,Proposed BIP modification,Add Go implementation,open,,I added a BIP39 Go implementation link.,https://github.com/bitcoin/bips/pull/686,['bip-0039.mediawiki'],,,"['dabura667', 'luke-jr']","Your implementation is broken.

1. Your tests don’t check the seed vectors.
2. Your library doesn’t NFKD normalize.

NACK

Please fix for reconsideration.https://github.com/dongri/go-mnemonic/commit/a6bb3ac443e0cf8522899e7076aeb9d659460704 

1. Fix Japanese word (NFKD normalize)
2. Fix library apply NFKD normalize

Please check
You need to NFKD normalize mnemonic and password for ToSeedHex before casting to a []byte()Also chunksRe should be

[01]{11}

and not

.{1,11}@dabura667 Thank you

I fixed some issue

https://github.com/dongri/go-mnemonic/commit/4ccec56a5421efb908134624d22c91e05e7b3be61. Using TREZOR as the passphrase for testing Japanese will not test NFKD. This is because
norm.NFKD(“TREZOR”) == “TREZOR” (try it)

So you should keep the passphrase used in the Japanese test vectors. (It is made so that
norm.NFKD(passphrase) != passphrase

Then your tests will make sure NFKD is used properly.This is also why the Japanese test vectors are NOT pre-normalized.

We want to test the NFKD is working correctly.

:-)@dabura667 Good morning! 

I change passphase ""TREZOR"" to ""がちょう""

Can test the NFKD is working
https://github.com/dongri/go-mnemonic/blob/master/mnemonic_test.go#L58One tiny nit-pick: `binaryToByte` should be `binaryToInt` since you return an int64 and not a []byte...

Other than that, the vectors look good to me. I tested using apps I know to work and the entropy / mnemonic / seed for all the Japanese and English test vectors in your app passed.

Also, I might prefer if you convert the wordlists into .go files rather than using the statik dependency.

In general cryptocurrency libraries should avoid dependencies when at all possible.

ie. https://github.com/bitpay/bitcore-mnemonic/blob/master/lib/words/japanese.js

Maybe make a package called wordlists in /wordlists and have one go file for each language and make a struct like:

```go
// /wordlists/wordlist.go
type Wordlist [2048]string

// /wordlists/english.go
const WordlistEnglish Wordlist = [2048]string{
  ""aaa"",
  ""bbb"",
  ...
  ""zzz""
}

// /wordlists/french.go
const WordlistFrench Wordlist = [2048]string{
  ""aaa"",
  ""bbb"",
  ...
  ""zzz""
}
```

etc etc... (I am new to go, so if my syntax is wrong I am sorry.@dabura667  Thank you advice
I fixed func name, and remove statik dependency

https://github.com/dongri/go-mnemonic/commit/dc9bfc04a038dd0e7245c783ccfca51a8a483bff
Looks great.

ACK on adding it to the list of implementations.@slush0 @prusnak @voisine @ebfull ",
dongri,685,,Fix: japanese words,closed,,"Change Japanese word

like `だ` -> `だ`

```
irb(main):003:0> ""だ"".bytesize
=> 6
irb(main):004:0> ""だ"".bytesize
=> 3
irb(main):005:0> 
```
",https://github.com/bitcoin/bips/pull/685,['bip-0039/japanese.txt'],,,['dabura667'],"Please read the BIP.

All wordlists must be unicode NFKD normalized.

NFKD正規化された状態で単語リストを保有しないとバグ出ますよ。お気をつけて下さい。NACK@dabura667 Thank you

BIP39 Test vectors
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#test-vectors

https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json

Is the test data incorrect?
Not unicode NFKD normalized
oh...
I misunderstood the specification. ",
shivaenigma,680,,Version prefixes for Segwit xpubs,closed,,"## Motivation 
Segwit wallets are still using _xpub_  version prefix for segwit in p2sh/native segwit wallets. This is leading to incorrect address derivation from an xpub/xprv 

## Reference Discussion
- Thread from [bitcoin-dev](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014921.html) mailing list
- [Different bip32 prefixes for various output scripts](https://github.com/bitcoinjs/bitcoinjs-lib/issues/934) 

## Implementation
Already in use by [electrum](https://github.com/spesmilo/electrum/blob/b4d71e651b16a16afc427f87542b8fd9e05b66e3/lib/constants.py#L52), samouri and trezor",https://github.com/bitcoin/bips/pull/680,['bip-0032.mediawiki'],,,"['ecdsa', 'afk11', 'SomberNight', 'luke-jr', 'clarkmoody']","Hey @shivaenigma - thanks for the thought, but we don't modify BIP's to widen the scope after they have been finalized - given there already complete implementations of BIP32 in the wild.

Also these prefixes are already defined in SLIP-0132, and they should remain there IMO, unless someone wants to submit a standalone BIP for it. But the prefixes being defined in the SLIP repository haven't negatively affected their uptake. As you note, three wallets are using them already.

I think this PR is not acceptable due the above (though it's certainly not my place to decide that), but it may be acceptable if presented as a new BIP.@afk11 Totally Understand point about not modifying existing BIP. No Problem

I will create a new BIPPlease open a new PR when you have a new BIP draft ready, following review of the draft on the bitcoin-dev ML.@SomberNight you should submit your text hereIndeed we have a draft for this as a new BIP at https://github.com/SomberNight/bips/blob/bip-xpub-versionbytes-extension/bip-xpub-versionbytes-extension.mediawiki
I think I'll read it a few more times and potentially clean it up a bit, and submit it to the mailing list soon@SomberNight Thanks ... looks good ..
I have few tests [here](https://github.com/richardkiss/pycoin/pull/260). Feel free to copy

Looking forward to the submission to the mailing listWhy not submit updates and changes to [SLIP-0132](https://github.com/satoshilabs/slips/blob/master/slip-0132.md)? There are (a few) test vectors and a generation code there as well.",
nopara73,679,Proposed BIP modification,Fix typos in BIP 126,open,,,https://github.com/bitcoin/bips/pull/679,['bip-0126.mediawiki'],,,['luke-jr'],@kristovatlas ,
nopara73,678,Proposed BIP modification,Fix typo in BIP 126,open,,,https://github.com/bitcoin/bips/pull/678,['bip-0126.mediawiki'],,,['luke-jr'],@kristovatlas ,
bitcoinbrisbane,676,Proposed BIP modification,Fix grammar,open,,,https://github.com/bitcoin/bips/pull/676,['bip-0141.mediawiki'],,,"['Empact', 'luke-jr']","ACK 0aedaf0 - could be more informatively titled ""Capitalize months in bip-0141""@CodeShark @jl2012 @sipa",
Varunram,675,Proposed BIP modification,[trivial]: Correct spellings across bips,open,,,https://github.com/bitcoin/bips/pull/675,"['bip-0011.mediawiki', 'bip-0016.mediawiki', 'bip-0035.mediawiki', 'bip-0060.mediawiki', 'bip-0061.mediawiki', 'bip-0080.mediawiki', 'bip-0081.mediawiki', 'bip-0098.mediawiki', 'bip-0116.mediawiki', 'bip-0117.mediawiki', 'bip-0143.mediawiki', 'bip-0152.mediawiki', 'bip-0157.mediawiki', 'bip-0158.mediawiki', 'bip-0174.mediawiki', 'bip-0176.mediawiki']",,,"['gavinandresen', 'practicalswift', 'luke-jr', 'sipa', 'jimpo', 'kallewoof']","ACK 333a605d21c77002efb27aaf2fe352775f1bb3b0BIP 35: @jgarzik
BIP 60: @genjix 
~~BIPs 11, 16, 61: @gavinandresen~~
BIPs 80 & 81: @justusranvier @jimmysong 
~~BIPs 98, 116, 117: @maaku @kallewoof @btcdrak~~
~~BIP 143: @jl2012 @sipa~~
BIP 152: @TheBlueMatt 
~~BIP 157: @Roasbeef @aakselrod @jimpo~~
BIP 158: @Roasbeef @aakselrod 
BIP 174: @achow101 
BIP 176: @jimmysong 

@practicalswift Why did you ACK this? You don't seem to be an author for any of the BIPs? O.o@luke-jr I wasn't aware that only BIP authors were supposed to review typo fixes. Sorry about that! :-)Yes, it's kind of a nuisance. I opened #596 a while back, but got push-back on the mailing list. :(ACK BIP 157ACK BIP 143ACK BIP 98, 116, 117.Perpetual ACK for all trivial changes that do not change the meaning of BIPs I wrote.

ping @luke-jr, can I edit the PR just to include the BIPs which have been ACKed?Please don't. That would reset the ACKs. I'll manually merge the applicable ones when I get a chance.Merged BIPs 11, 16, 61, 98, 116, 117, 143, 157 in c3e8379b611a53114544b0ed7af5307b022b8ac8

Leaving open for the remaining BIPs (please don't rebase)",
prahaladbelavadi,674,Proposed BIP modification,(BIP 32) Repo has been relocated,open,,The https://github.com/jmcorgan/bip32utils repo appears to have been moved to https://github.com/OpenNetworking/bip32utils,https://github.com/bitcoin/bips/pull/674,['bip-0032.mediawiki'],,,['luke-jr'],@sipa ,
skywinder,672,,BIP 39: Аdd swift library with multi lang support,open,,"Add one more swift library to generate mnemonics (with multi lang support)
Here is an implementation:
https://github.com/BANKEX/web3swift/blob/0293c8f74bf9accf71bbc5d8268f2ca70e17da48/web3swift/KeystoreManager/Classes/BIP39.swift#L22",https://github.com/bitcoin/bips/pull/672,['bip-0039.mediawiki'],,,,"@luke-jr please, kindly check this small addition :wink:",
Sword-Smith,671,,Specify that points are added in the elliptic curve group,closed,,"The returned child key in CKDpub is the result of elliptic curve addition, not 
regular or Cartesian addition of points.

This is non-trivial to non-mathematicians.",https://github.com/bitcoin/bips/pull/671,['bip-0032.mediawiki'],,,"['sipa', 'Vilaiuk']","NACK, the text already states ""Addition (+) of two coordinate pair is defined as application of the EC group operation."". Got it.#671",
Varunram,665,Proposed BIP modification,[trivial] Fix link to considerations,open,,Fix link in bip49 and correct formatting,https://github.com/bitcoin/bips/pull/665,['bip-0049.mediawiki'],,,['luke-jr'],@DanielWeigl ,
stevenroose,664,,BIP0173: Include bech32 prefix for regtest mode,closed,,"A mismatch between implementation occurred on the bech32 prefix for
regtest mode.  Bitcoin Core decided to use the `bcrt` prefix in order
for it to be distinguishable from the testnet prefix.  btcd on the other
hand uses the same prefix as testnet because of lack of a separate
prefix specified in this BIP.

Core: https://github.com/bitcoin/bitcoin/issues/12314
btcd: https://github.com/btcsuite/btcd/pull/1150",https://github.com/bitcoin/bips/pull/664,['bip-0173.mediawiki'],,,,"Even though a standard definition of regression test chain params would help integration testing between different implementations, f.e. for Lightning integration tests, I do agree with [the argument](https://github.com/bitcoin/bitcoin/issues/12314#issuecomment-375232961) that they should not be included in official BIPs.",
yobum,663,Proposed BIP modification,add Number related wordlists,open,,"A method helps avoid inherent problems in current wordlists, specifically management of multi-language wordlists (with English being the defacto), and the natural or political evolution of spelling and language use. Seed lifespan will now become multi-generational as well.",https://github.com/bitcoin/bips/pull/663,"['bip-0039.mediawiki', 'bip-0039/numeric-english.txt']",,,"['iancoleman', 'prusnak', 'dabura667', 'teenkung', 'ThomasMaxon', 'luke-jr']","1. So in order to represent 128 bits of entropy you write down 12 sets of 5 digit numbers (16.6 bits each)... that's 33% inefficient. If you want to write numbers, just divide the entropy up into 16 bit chunks and covert it to base 10 and you will get a more efficient numbering system with only 8 sets of 5 digit numbers with the same entropy. English words were only introduced because they are easy to write down. If you think writing down English words is somehow the wrong way to do it, I suggest encoding your entropy directly.
2. Your txt file is not in any parse-able format. You should just write all 2048 numbers in the same order that matches up with the english.txt and separate them with line breaks. "" = "" and the English words themselves as well as the first row (we get it, you don't need to explain it in the file itself) need to go.

concept NACK
formatting NACKTo clarify: Our proposal for the number-related protocol is not related directly to the 128 bits of entropy. It is only a numeric translation source from the official English wordlist. Again, the number list is subordinate to the English wordlist and it does not directly represent seeds. Likewise, users can choose an English mnemonic to recover their seeds since English is the dominate source. a 'mnemonic' English wordlist is based on the assumption that the presented words are easy to remember and write down for a user. The massive worldwide non-english user base has difficulty reading and writing English, thus recording and remembering these 'mnemonic' words is less likely for them. However, nearly the entire population of the world can read and write numbers. If we hope bitcoin can witness world-wide mass adoption, it is only logical to present users with an additional source to recover their valuable wallets.The only reason we don't use another language is for compatibility reasons; most wallets do not support other languages than English....... but you need to realize:

12 words x 5 digits = 60 digits

a 12 word seed is 128 bits (132 bits with the checksum) of base entropy.

but 132 bit largest integer is:

`5444517870735015415413993718908291383295`

which is 40 digits (easier to write down)

and you can convert the digits to a seed easily. (literally every wallet app gets a random number like the above, and converts it into the english phrase........... why convert the english words into numbers when there is a smaller number that can be converted into the same words.........?????)Also, you didn't address the formatting issue.We agree that direct entropy encoding resulting in 40 digits is an elegant and efficient solution to reduce the size of the integer - this might be a long-term solution if wallet manufactures are willing to adopt numbers only. However as a hardware manufacturer, we're trying to introduce real world compatibility protocol for world-wide bitcoin users.

Here's a response to your message:

1. Users cannot recover their seeds on another hardware wallet if the use an integer seed wallet.

2. Currently, seed recovery is a rare occurrence. Meaning, if a user needs to recover their seed, they'll most likely do it once or twice a year (perhaps once per month for a small number of outliers).

3. Thus seed recovery compatibility, not efficiency, is paramount to the user. Hardware wallet compatibility is a requirement for the bitcoin community. A user must be able to recover their seeds anywhere on any device.

The number-related wordlist is simply the original English wordlist but represented only as numbers so it can help cross language and multiple wallet compatibility.1. Yes they can. You can easily convert the 40 digit number into the 12 word English phrase.Every BIP39 library has a function to convert the 40 digit number (entropy) to the mnemonic phrase (12 words)

https://github.com/bitcoinjs/bip39/blob/v2.5.0/index.js#L93> It is only a numeric translation source from the official English wordlist.

This means what is being proposed is not a wordlist, but rather a new feature into BIP39.

Encoding the same entropy into different languages currently produces different seeds. But if this proposal is introduced, that's no longer the case.

`abandon abandon ability` is equivalent to `00001 00001 000049` and under the existing BIP39 operations should produce a different seed and keys, but would not if this proposal were accepted.

I do not support this proposal. A mnemonic is an encoding of entropy, not an encoding of another mnemonic.

> most wallets do not support other languages than English.

It seems they would also not support a feature / wordlist such as this one, especially considering it actually changes the BIP39 functionality rather than simply extends the existing wordlists. I don't see how the current lack of support for other languages strengthens the case for this proposal.

> we're trying to introduce real world compatibility protocol for world-wide bitcoin users.
>
> The number-related wordlist is simply the original English wordlist but represented only as numbers so it can help cross language and multiple wallet compatibility.

I can see the appeal of universality but why not encode the raw entropy or the word indexes rather than a special number-word list? Having a gap of 48 between each index doesn't really add much benefit, or am I missing something? Wordlists have [characteristics](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#wordlist), but number lists don't seem to.

My thoughts are if the numbers are treated as a wordlist and not a conversion/lookup then this proposal qualifies as a barely passable idea. But as a lookup for English it's not adding benefit to the current BIP39 specification, and if anything adds unwarranted complexity.@dabura667 
Your solution assumes that the user has the technical skills to be able to convert the 40 digit number into English if they ever need to use another wallet --in reality not many users can do that correctly. The number-encoded entropy is not supported by any other wallet. If you want to use the number-encoded entropy in other wallet, a user must first convert it using a program or library. As you can see, there are significant security considerations to this.

We haven't found that the 40 digit proposal is the proper solution due to the technical skills needed by the user to complete, the lack of security offered on our end, and the incompatibility issues with other wallets. 

Our proposal solves all these problems - no user needs technical skills for conversion, the conversion table is published publicly, and it is compatible with all hardware wallets.

Although we could theoretically help a user convert their seed for them, this is not ideal due to security concerns when asking the user to provide their secure seed.@iancoleman 

> It seems [other hardware wallets] would also not support a feature / wordlist such as this one, especially considering it actually changes the BIP39 functionality rather than simply extends the existing wordlists. I don't see how the current lack of support for other languages strengthens the case for this proposal.

Other hardware wallet manufactures wouldn't need to support it. A user finds their number on the list and converts it by themselves (we never manage their seeds). They can convert the number without ever interfacing with a computer or device -- conforming with best security practices. 

> abandon ability is equivalent to 00001 00001 000049 and under the existing BIP39 operations should produce a different seed and keys, but would not if this proposal were accepted.

Exactly right. This is not a numeric mnemonic. When multi-language wordlist produces different seeds, it will prevent users from recovering their assets if their language is not supported by the wallet. In reality, most wallet support only the English mnemonic. Which renders the dictionaries of other languages irrelevant. 

We like to introduce our findings based on our real-world experience. It simplifies and streamlines the BIP39 process, not adds unwarranted complexity.

New functionality to the English wordlist is not a bad thing, but rather an small improvement to the overall user-experience. Functionality is meant to reduce barriers to entry, not complicate.Encoding entropy directly into numbers is a theoretical solution to a real world problem.  

Yes, we understand that our proposal isn't a mnemonic. Yet its functionality has proven (by our users) to be a workable compromise for our non-English, first time Bitcoin users. After all, billions use numbers for security across the world everyday for passwords, lock combinations, etc.

An mnemonic is an idealization; it would be ideal if wallets support multi-language wordlists. In reality, none of them do. It would be ideal if all users understand English. In reality, most of the world doesn't. Language fluency is the reason de entendre for a 'mnemonic' to exist in the first place.

This problem with BIP39 and its over-reliance on the English language must be addressed. Offering solutions would be much appreciated.

We're trying to help share this solution to the community to solve a wallet compatibility problem. Keep in mind that through this proposal, we are allowing our users to work directly with other wallets if they need to recover their seeds or take advantage of a fork. We thus see this as a community-wide call to action.  

Compatibility and usability is the next step for Bitcoin to see widespread adoption.

If this shouldn't be included in BIP39, where should it be included?You are starting to contradict yourself now.

1. We convert each word into a number.
2. But we don’t want to use a smaller number because that would require extra knowledge, and then users can’t convert easily into English.

But............ the whole point of using numbers was because “not everyone uses English” and yet your primary concern with using 40 digits was, “ohh well if we do it that way we can’t get the English words that we can’t understand if we don’t understand the numbers!”

It makes no sense.

I’m sorry, you can make your own wallet that uses such a scheme, but no other wallet will use it because it doesn’t make sense...

If you want to add your language to the wordlists, feel free. All my friends use Japanese phrases fine, with no problem.I'm on board with reducing dependency on English and increasing the universal accessibility of BIP39 and mnemonics. I realise from my tone maybe that wasn't clear. However modifying the BIP39 spec is the wrong way to go about it.

> This problem with BIP39 and its over-reliance on the English language must be addressed.

I don't see how the bip specification is the right place to address that. It seems like specific implementations and choice of wordlists are where the problem lies, not the bip39 spec.

> Offering solutions would be much appreciated.
> If this shouldn't be included in BIP39, where should it be included?

Make a tool / document and publish it. If it's useful users will use it. The BIP39 spec is not the right place for that.

I'm very-much interested in what's best for users and changing the way mnemonics work is the opposite of that.

> Compatibility and usability is the next step for Bitcoin to see widespread adoption.

Sure, but the proposal breaks compatibility with existing BIP39 libraries. There'd be some implementations that are 'mnemonic only' wordlists and other (newer) implementations which support 'mnemonic or lookup' wordlists. That's a worse situation, not better.

I think this quote from the bip39 spec explains why number-based mnemonics of any kind could be considered dubious: ""A mnemonic code or sentence is superior for human interaction compared to the handling of raw binary or hexadecimal representations of a wallet seed."" Number-based mnemonics go against the motivation of the bip regardless of how the numbers are grouped or encoded or treated.@slush0 @prusnak @voisine @ebfull I don't care about this lists. The only list I support is the English one.> An mnemonic is an idealization; it would be ideal if wallets support multi-language wordlists. In reality, none of them do. It would be ideal if all users understand English. In reality, most of the world doesn't. Language fluency is the reason de entendre for a 'mnemonic' to exist in the first place.

We wrote this two days ago.

> I don't care about this lists. The only list I support is the English one.

You're right. That's why we proposed this modification so that all wallets need only support English. Uy",
zaq1tomo,659,Proposed BIP modification,Fix markdown format [in BIP65],closed,,,https://github.com/bitcoin/bips/pull/659,['bip-0065.mediawiki'],,,"['petertodd', 'luke-jr']","@petertodd n.b. BIPs are Mediawiki format, not Markdown, so this should probably be rejected?I think @luke-jr is correct here.",
zaq1tomo,658,Proposed BIP modification,Fix an invalid link and message [in BIP 11],closed,,,https://github.com/bitcoin/bips/pull/658,['bip-0011.mediawiki'],,,['luke-jr'],@gavinandresen This looks like a bad idea IMO...Do you think what should be substituted for invalid links?,
zaq1tomo,657,,Fix an invalid link and message,closed,,,https://github.com/bitcoin/bips/pull/657,['bip-0011.mediawiki'],,,,,
eMaringolo,656,Proposed BIP modification,Added working Pharo Smalltalk implementation [for BIP 39],open,,"This implementation is compliant with the spec allowing the creation of new mnemonics from an entropy from 128 to 256 bits, from mnemonic words or from the the raw entropy+checksum bytes.

Supports English, Spanish, Italian and French, and passes all tests from the Python reference implementation.

",https://github.com/bitcoin/bips/pull/656,['bip-0039.mediawiki'],,,"['amirziari', 'luke-jr']",@slush0 @prusnak @voisine @ebfull not work,
kuthullu,654,Proposed BIP modification,Add brazilian portuguese wordlist to BIP39,closed,,"The wordlist consists of 2048 non offensive, manually picked brazilian portuguese words.

Also edited the README with a small note about the work done.",https://github.com/bitcoin/bips/pull/654,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/portuguese_brazilian.txt']",,,"['guilhermep', 'brenorb', 'prusnak', 'johnnyasantoss', 'luke-jr']","@slush0 @prusnak @voisine @ebfullI don't care about this lists. The only list I support is the English one.I think this list should not contain words in common with the other wordlists, following the [precedent set by the spanish, italian and french lists](https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md#spanish) and maintaining the possibility to detect the language with just one word.I suggest changing the word ""abdome"" and other words which have more than one possible orthography in portuguese. Is there any progress with this PR?
I agree with @brenorb argument about having words that may cause confusion.One or more of the authors is needed to approve any modifications.I worked some weeks in kuthullu's list to fix these issues and submitted a pull request https://github.com/bitcoin/bips/pull/720 now with these rules:

1. Length between 4 and 8 characters.
2. Words can be uniquely determined typing the first 4 characters.
3. No accents or special characters.
4. No complex verb forms.
5. No plural words, unless there's no singular form.
6. No words with common double spelling, except when the only change is the accent.
7. No words with the exact sound of another word with different spelling.
8. No offensive words.
9. No words already used in other language mnemonic sets.
10. The words which have not the same spelling in Brazil and in Portugal are excluded.

","I suggest changing words like ""abdome"" which can be written in more than one form, and words like ""acento"", which sounds identical to ""assento"".Has two forms of writing. It might be best to change it.Sounds very similar to ""bravo"", which is widely more used.Sounds identical to ""cocha""."
EvertonMelo,653,,Create repository for translate Brazilian Portuguese BIP001,open,,"as suggested by @luke-jr on: #650 #651 

> 
> You deleted the original. There is also no process for translation of BIPs at this time.
> If you'd like to translate the BIP, please do so for the entire BIP (not just an image), and put everything in a new directory (eg, i18n/pt-BR/bip-0002.mediawiki etc)

succssesfully done.",https://github.com/bitcoin/bips/pull/653,['pt-BR/bip-0001.mediawiki'],,,"['sipa', 'pedrosimoes79', 'luke-jr', 'MarcoFalke']","You translated BIP 1, but called the file bip-0002

`Comments-Summary` has a specific meaning. You should translate the source comments-summary.

Some of it isn't translated?
Has there been a discussion on the mailing list, if translations even make sense for BIPs?@luke-jr 

> You translated BIP 1, but called the file bip-0002

I change the file for bip-0002

there are several things that are not translatable,
but the idea is to keep what has already been translated into the source:

https://bitcoin.org/pt_BR/faq


@MarcoFalke 

read the file 

https://github.com/bitcoin/bips/blob/master/README.mediawiki 

please;

> ""People wishing to submit BIPs, first should propose their idea or document to the bitcoin-dev@lists.linuxfoundation.org mailing list. After discussion, please open a PR. After copy-editing and acceptance, it will be published here.""

Did you find something about translation??

note that the default flow is not for translation, but for BIP creation / editing.

I'm proposing this, I'm just translating that it was already done.

As for making sense, I leave you the following answer:

https://bitcoin.org/en/faq 

if it did not make sense, because they translated into 23 more languages?

if more people understand what is written more people, it can contribute with bitcoin core, not why it is better or worse but why it is affordable.

I am following standard flow that are in the rules,

https://github.com/bitcoin/bips/blob/master/README.mediawiki

If you do not like it, create a new beep and stop that translation.

do not disturb anyone who has read the rules, do not disturb those who copreende the rules better than you.

thanks for playing while others work,
this only demonstrates how your comments are foolish, follow the rules shut up and get out of my way.as for the ""Comments-Summary"" I will do this gradually,
much of what is there is translatable.

I have in mind if you so cooperate with me, translate the BIPS: 001; 002; 0070; 0071 and 0072

Thanks a lot for the help, @luke-jr 
you do a great job, I want to contribute to this great project.

you had the patience to tell me what is necessary, I am adjusting to it.@EvertonMelo Precisas de ajuda?@pedrosimoes79 

Yes, Bro! 

If you can translate what was pending, thank you very much.
I will resume the translation only tomorrow.

Envia-me email para pedrosimoes79@gmail.com para combinarmos melhor e evitar encher o PR com as nossas mensagens. Abraço.add more itens( changeLog) for translate BIP001 Portuguesetranslate status: 8/14;
14 total stretchs.
8 translated.
Please discuss this on the mailing list first.

Without broader agreement on how to do this, I believe this is the wrong approach. BIPs are specification documents, and mistranslations could have very serious impact on software implementing them. Having them under the bips repository may make people incorrectly assume that these translations are peer reviewed and vetted by their authors. I don't believe that is a reasonable expectation and if your goal is making these documents more accessible, it's better to do so in a private capacity.Also from a technical perspective, the git repository does not have any infrastructure to support translations (i.e. mark them automatically as outdated when the source changes, mark them reviewed, ...)@sipa 

Please discuss this on the mailing list first.
R: there are no rules for this.

> ""People wishing to submit BIPs, first should propose their idea or document to the bitcoin-dev@lists.linuxfoundation.org"" 

Am I submitting a new BIP ?? I am the Author of this BIP ???
( please tell me in a simple way what rules force me to do this. ) 


@MarcoFalke 

> Also from a technical perspective.. 

I am obliged to disagree, there are several ways to do however only one people can accomplish this.

other point. 
please read the status of BIP0001

Status: [Replaced](https://github.com/bitcoin/bips/blob/master/README.mediawiki)

this document has no more value, is there any rule to review something discontinued ???

Be honest, please.

translate status: 9/14;
14 total stretchs.
9 translated.

translate status: 10/14;
14 total stretchs.
10 translated.",
Sword-Smith,652,Proposed BIP modification,Fix error in scriptPubKey field in BIP 143 example,open,,It seems that a scriptPubKey used when signing a transaction was wrong.,https://github.com/bitcoin/bips/pull/652,['bip-0143.mediawiki'],,,['luke-jr'],@jl2012 @sipa,
EvertonMelo,651,,Create a File in Brazilian Portuguese,closed,,,https://github.com/bitcoin/bips/pull/651,['bip-0070/paymentrequest-pt-br.proto'],,,['luke-jr'],"@luke-jr 

Hello,

Why would you please explain why the ""pullrequest"" was canceled?

What rules did I break?Renaming a file for no reason? What are you trying to do?sorry, 

I'll try in a more appropriate way, I'm sorry for the bad way.",
EvertonMelo,650,,Create a File for Translate Brazilian Portuguese,closed,,,https://github.com/bitcoin/bips/pull/650,['bip-0002/process_pt-br.svg'],,,['luke-jr'],"Uh, no?@luke-jr 

So how could you tell me what the problem was?

I just translated a workflow,
and has no place saying that this is wrong.

many people have difficulty understanding basic concepts because they are not in their mother language.

is there any rule in bitcoin core that prohibits translation of technical content?You deleted the original. There is also no process for translation of BIPs at this time.

If you'd like to translate the BIP, please do so for the *entire* BIP (not just an image), and put everything in a new directory (eg, `i18n/pt-BR/bip-0002.mediawiki` etc)ok, 

do as requested,
clone the original content, make the language modifications and do the pullrequest.

Thank you so much",
MarcoFalke,649,Proposed BIP modification,BIP 123: Add buried deployment as subdivision of consensus layer,open,,,https://github.com/bitcoin/bips/pull/649,"['bip-0002.mediawiki', 'bip-0123.mediawiki', 'scripts/buildtable.pl']",,,['evoskuil'],"> buried deployments do not require community and miner coordiation [sic] for a safe deployment

It would seem that validation below 25,000 blocks is deemed unimportant. Do embedded checkpoints greater than 25,000 blocks deep count as ""buried deployments""?Note that this is just a patch. Please don't ACK or NACK. Extended discussion is held on the mailing list.",
eklitzke,648,,Update the BIP 9 assignments doc to reflect mainnet segwit activation,closed,,"This is just a small clerical change to update the BIP 9 assignments ""living document"" with information about when SegWit activation on mainnet. I wasn't exactly clear about which height to use -- SegWit was activated at 481824 (which is what I included in this PR) but SW transactions didn't become valid on mainnet until 494784. I'm using the activation height as that's my understanding of the intent here.",https://github.com/bitcoin/bips/pull/648,['bip-0009/assignments.mediawiki'],,,['luke-jr'],Merged by 0e3551cbe9819bc41fafbfff99886e9876c57866,
4tochka,646,Proposed BIP modification,witness reserved value,closed,,current witness reserved value,https://github.com/bitcoin/bips/pull/646,['bip-0141.mediawiki'],,,"['sipa', 'jl2012', 'luke-jr', 'MarcoFalke']","NACK. It has no special but no assumption could be made.So at this moment to calculate correct commitment to verify block,  What  witness reserved value we should use?   Experimentally I got  correct value on existing testnet blocks using  b""\x00"" * 32 
  _double_sha256(merkleroot(wtxid_list[::-1]) + b""\x00"" * 32)_There is no restriction. Those 32 bytes can literally be anything, and the block will be valid.

It's there for future extensibility which may give a meaning to those 32 bytes.Ok I understand, but still not clear about recent value. I have read BIP and got definition that Commitment hash: Double-SHA256(witness root hash|witness reserved value). Where is defined recently used _witness reserved value_? At example I take block from testnet and try to recalculate commitment hash. How do I know which value used by block creator concatenated with witness root hash? The result is Double-SHA256 and can't be reversed. Is any other document have definition about what value we should use today?The value is in the coinbase transaction's witness. No need to guess it. It's chosen by the miner and included in the block.Thank you!Close?Yes please closeI think it'd be reasonable to suggest some ""default"" value that can be used if a miner doesn't want to give it a special meaning. Otherwise, someone implementing could be left wondering...",
helder-garcia,644,Proposed BIP modification,BIP0008 diagram change - comparison should be start_height <= height,open,,"In the diagram the comparison for transition from DEFINED to STARTED should be start_height <= height, not start_height <= timeout_height.",https://github.com/bitcoin/bips/pull/644,"['bip-0008.mediawiki', 'bip-0008/states.png']",,,['luke-jr'],@shaolinfry ,
psztorc,643,New BIP,BIP 301: Blind Merged Mining (Consensus layer),open,,"This is a draft of a bip for blind merged mining, the second of two drivechain bips.",https://github.com/bitcoin/bips/pull/643,"['bip-blind-merged-mining.mediawiki', 'bip-blind-merged-mining/bmm-dots-examples.png', 'bip-blind-merged-mining/images.txt', 'bip-blind-merged-mining/witness-vs-critical.png']",,,"['TheBlueMatt', 'luke-jr']","Seems reasonable to just merge with a ""received only limited feedback, which was largely left unaddressed"" header tag.

On February 4, 2018 2:44:03 AM UTC, Paul Sztorc <notifications@github.com> wrote:
>This is a draft of a bip for blind merged mining, the second of two
>drivechain bips.
>You can view, comment on, or merge this pull request online at:
>
>  https://github.com/bitcoin/bips/pull/643
>
>-- Commit Summary --
>
>  * Create images.txt
>  * Add files via upload
>  * Add files via upload
>  * Add files via upload
>  * Delete bip-hashrate-escrows.md
>  * Delete images.txt
>  * Delete two-groups.png
>
>-- File Changes --
>
>    A bip-blind-merged-mining.md (329)
>    A bip-blind-merged-mining/bmm-dots-examples.png (0)
>    A bip-blind-merged-mining/images.txt (1)
>    A bip-blind-merged-mining/witness-vs-critical.png (0)
>
>-- Patch Links --
>
>https://github.com/bitcoin/bips/pull/643.patch
>https://github.com/bitcoin/bips/pull/643.diff
>
>-- 
>You are receiving this because you are subscribed to this thread.
>Reply to this email directly or view it on GitHub:
>https://github.com/bitcoin/bips/pull/643
> Furthermore, the spec itself seems strictly inferior to the older merge mining protocol as used by Namecoin etc. The alleged shortcomings this BIP claims the older protocol has, are not in fact true.

These shortcomings are not even issues that I feel strongly about. But they *are* issues which are constantly raised by Matt Corallo and Peter Todd specifically. They are in Section 4.3 of [Blockstream's sidechains whitepaper](https://blockstream.com/sidechains.pdf) as well as [in this podcast](https://www.reddit.com/r/Bitcoin/comments/2424x1/peter_todd_explainins_why_sidechains_are_insecure/).

I feel that pool operators will just run all of these nodes from a safe place, and then send as little data as possible to the hashers (the physical ASICs). Perhaps you agree with me, but other people don't agree with us!!

> Some actual shortcomings in this BIP:
> 
> Requires changes to the Bitcoin protocol.

Yes

> Limited to merely 256 sidechains.

Of course, we can have sidechains *of* sidechains, so the real number is unlimited. And we could simply soft fork BMM into the mainchain a second time (for example to add 256 more).

I really do not think there will be more than 256, but I suppose we can't know for sure.

> Requires conveying the prevblock for no apparent reason.
> Includes information on sequence of sidechains in the mainchain for no apparent reason. (Skip count is especially redundant since the prev is already explicit)

You may have misunderstood the intent here. It is all about creating the conditions for M8, which is the way that sidechain nodes ""buy"" space in the main:coinbase_txn . To do this, the M8 payment must trigger on something. In fact, we have two possible versions of M8. One triggers on prev, the other on skip count. The ideal M8 payment is M8_v2 a lightning network payment that triggers on prev. But when we need to resort to an on-chain txn then we must use M8_v1. M8_v1, however, unlike the LN payment, can trigger using the index. It actually saves 30 bytes (although the LN txn is better because it uses zero on-chain bytes).

>Requires softforks for sidechains.

There are a few reasons why this is a good idea. One is that, if miners do not support a sidechain, it is in danger of having its funds lost, trapped, or stolen. Another is that is not a big deal, because we expect profit-seeking miners to want to add sidechains, as these increase the value of mined BTC as well as miner's total tx-fee revenues.

More important reasons are here: http://www.drivechain.info/faq/#categorical-control

> No merkle tree for sidechain data!

All of the data here is mandatory, so a merkle tree would only accomplish two things (as I see it): first, it would waste 32 bytes of space, to accommodate the (pointless) root hash ; and second, it would be a SegWit-like ""evil fork"" increasing the blocksize limit arbitrarily (or, I suppose, by 32*256 = 8192 bytes).

>Requires full nodes maintain a new database.

This is a disadvantage of this proposal, yes. But the database is pretty small, if you ask me.

>Requires finding a Bitcoin block for any merged chains.

I feel that the asymmetric model is by far the most practical way to develop sidechains tech. We get half of the problem solved for free, and we can leverage this solved half to make dealing with the unsolved half much easier. For these asymmetric sidechains, nothing is lost by this requirement.I think I am now up to date on Luke's requested changes and clarifications.","Where is this file?Extension blocks and sidechains are two different things.It's not made clear *why* this data is considered critical... It certainly doesn't seem like it should be.Why? This is useless data to the main chain.Lightning doesn't require you to have a channel with the recipient...They can take a merged chain header from someone else risk-free.They can accept payment in any way they like... nothing stops them from being paid in bitcoins to include the mentioned merge block header.Now, it is here, in the first BIP: https://github.com/bitcoin/bips/pull/642/files#diff-faa5d00974be8fe9f13c7d7fec81b7eeThey are indeed. I feel that an asymmetric sidechain is the same as an optional extension block. I will clarify it.I have clarified this part by adding: "" This data is ""critical"" in the sense that it is the minimum amount of data required to define a sidechain. ""The mainchain needs this data in order to validate the two styles of ""M8"" transaction.Yes, I have edited this part to instead read ""LN connection"". Although, it does not change the point I was trying to make.Is there not a risk that they will get a merged chain header that is ultimately invalid (as I say above)? If so than it is not risk free.The goal here is to make it require zero trust.

The issue is not being paid in BTC (as they will also be paid ""in BTC"" if they mine a namecoin sidechain [instead of namecoin-altcoin]). Instead, the issue is being paid on the mainchain.I'm not sure these are drawbacks. By eliminating them, you essentially turn all sidechain hashrate into a kind of decentralised Nicehash service. This can be catastrophic, since it essentially sells control to the highest bidder, which can easily be an attacker.This is a huge scalability regression for sidechains, which currently can be increased in number infinitely without adding more than a fixed 32 bytes to Bitcoin's blocks.Why would there only be 256 sidechains?What about side:blocks that do not meet the difficulty of a valid Bitcoin block (but still remain a valid sidechain block)?There is no tx-standardness policy for coinbases (it is a self-contradicting concept)... Nor are such matters of policy subject to BIPs - they are entirely up to implementations and/or individual node operators.Let's go with BIP 301.
> I'm not sure these are drawbacks.

The first is, I think. Some miners complained about Namecoin's buggy software, and refused to use it -- leading to suboptimal NMC hashrate, and disproportionate 2x-sha256 rewards (which some SC reviewers are strongly against). Also, if/when namecoin software crashed, it (very temporarily) took down the Bitcoin hashing network with it.

The second is really just a convenience. I suppose it is better for miners to ""dogfood"" (in a sense) their coinbases (they will be more loyal to Namecoin if they are paid in NMC). But in the sidechains case, they are being paid with BTC, and their ASICs have been designed mine BTC.

> sells control to the highest bidder

This does give control over block ordering to the highest bidder. I am truly not sure what will happen as a result.

But first of all we are already in a world where control goes to the highest bidder -- today, they must instead bid using illiquid currencies -- ASIC equipment and electrical power. But if they win then they will have ""control"" (in the same limited sense that miners have control over block ordering today).

But, hashes/second has a time component, whereas the bidding in blind merged mining does not.

On the other hand, when Bitcoin has no block subsidy, an attacker can broadcast a string of ""attack transactions"" that pay extremely large fees, and thus induce miners to reorg the chain. It really comes down to the wealth generated by the chain, I think (whether it is a main- or side- chain).Hmm, yes I think it is.

But it is intended to respond to the allegation that, in practice, miners would need to run a sidechain node. In that case, the scalability regression would be several orders of magnitude greater. Instead of 32 bytes in your example, it would be infinite bytes.We only allocate one byte to identifying a sidechain.

But there can be sidechains-of-sidechains, so in practice there is no real limit.Such a block would not be a found sidechain block. It would just be a candidate for the next block (perhaps), or else it would be some arbitrary collection of mempool data.

In BMM, a sidechain header meets its difficulty requirement if and only if the header is included in a mainchain Bitcoin block. That is the only way it can meet its ""difficulty"" requirement. This is a difference from regular merged mining. That may be so, but in practice many people have pointed out to me that I am ""not allowed"" to use multiple OP Returns. So it definitely interests some readers.

And we did in fact change the standardness policy.

Should we ensure that we have only changed the policy for coinbase txns only?Got itThe scalability regression affects not just miners, but all full nodes.Policy is about off-chain transaction acceptance. There is no policy for on-chain blocks - just consensus rules.Ah, I see what you are saying.

I will try to find a way to clarify the sentence.That is correct. It is part of the tradeoff required for trustless BMM.

One could still use the technique of BMM, without any code changes to Bitcoin. But it would involve some trust -- likely, side:nodes would have to open (and fund) an account with pools. Side:nodes would then request that the pool find certain side:blocks (""blindly"") and the pool would then deduct some value (side:txn_fees - epsilon) from the node's account."
psztorc,642,New BIP,new bip for hashrate escrows,open,,"This is my draft of the hashrate escrows bip, the first of two drivechain bips.",https://github.com/bitcoin/bips/pull/642,"['bip-hashrate-escrows.mediawiki', 'bip-hashrate-escrows/appendix-1.txt', 'bip-hashrate-escrows/images.txt', 'bip-hashrate-escrows/two-groups.png']",,,"['jtimon', 'pennersr', 'gusbjerpe', 'CryptAxe', 'luke-jr']","This seems to have the wrong files...?> This seems to have the wrong files...?

It does, my mistake! Fixed nowOk, this one appears to have survived the transition to .mediawiki format.> written partially by some Blockstream co-founders.

why do the bip readers care about who wrote it?

> A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners

This is not true for sidechains using spv 2wp. If you want to make that analogy, at most it would be with the sidechain miners, not with bitcoin miners. Remember merged mining is only an option. Sidechains could even use different proof of work than bitcoin.
Also, wouldn't it be better to rebase the implementation on top of master rather than backport changes from master to it? How are we supposed to find out which commits are relevant to the implementation of this BIP?
>> written partially by some Blockstream co-founders.

> why do the bip readers care about who wrote it?

It is cursory background information. Often, the easiest way to explain something is to link it to an existing thing that the audience may already be familiar with.

>> A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners

> This is not true for sidechains using spv 2wp.

Actually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can ""steal"" from the sidechain.

And here it is doubly true because the SPV proof here always proves mainchain work, not sidechain work.> Also, wouldn't it be better to rebase the implementation on top of master rather than backport changes from master to it? How are we supposed to find out which commits are relevant to the implementation of this BIP?

Are you talking about the BIP text? Because the code is in a branch called ""mainchainBMM"" as seen here https://github.com/drivechain-project/bitcoin/tree/mainchainBMM  .> Actually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can ""steal"" from the sidechain.

No, all they can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.
In spv 2wp, the pegin tx in the sidechain presents work from the mainchain, and the pegout tx on the mainchain presents work from the sidechain.

> Are you talking about the BIP text? Because the code is in a branch called ""mainchainBMM"" as seen here https://github.com/drivechain-project/bitcoin/tree/mainchainBMM .

I'm talking about that branch, it seems to have commits recently backported from master apart from the necessary changes. Don't you have a branch that contains only the changes that would be necessary (done against current master or against some other previous version of master)?
That would be more convenient for review. Perhaps you can point out thecommits on that branch that are relevant for this BIP?

For example, commit https://github.com/drivechain-project/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c in your branch is clearly not relevant to the implementation of this BIP.
> > Actually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can ""steal"" from the sidechain.

> No, all they can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.
> In spv 2wp, the pegin tx in the sidechain presents work from the mainchain, and the pegout tx on the mainchain presents work from the sidechain.

That is [a mistake which it was very important to fix](https://www.youtube.com/watch?v=xGu0o8HH10U&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4&index=1). You are 1.5 years behind on the latest sidechain theory.

> Don't you have a branch that contains only the changes that would be necessary (done against current master or against some other previous version of master)?

Do you mean this??? https://github.com/bitcoin/bitcoin/compare/master...drivechain-project:mainchainBMM> Do you mean this??? bitcoin/bitcoin@master...drivechain-project:mainchainBMM

Sorry, yes! I meant that. Thank you.

> That is a mistake which it was very important to fix. You are 1.5 years behind on the latest sidechain theory.

I haven't watched the video, but, ok, I guess...never too late to catch up!

Still, *with spv 2wp, all bitcoin miners can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain*.

So I think the part of the BIP that contradicts this (ie ""A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners"") should be corrected.
Another possibility - if that is a necessary part of the definition of a ""Hashrate Escrow"" is to exclude sidechains (or at least the spv 2wp) from its definition, since it doesn't have the same properties.

Otherwise one could get confused thinking that ""An spv 2wp resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners"", which is not true.
>> I haven't watched the video, but, ok, I guess...never too late to catch up!
>> Still, with spv 2wp, all bitcoin miners can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.

> So I think the part of the BIP that contradicts this (ie ""A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners"") should be corrected.

The video makes the case for the set of miners being the same. Ie ""spv proof with work from the sidechain"" would be the same as ""dynamic-membership set of Bitcoin Miners"".

So it is correct as-is.

Your other comments are just the same error repeated.May I ask why this isn't getting assigned a BIP#? @gusbjerpe I believe that Luke-jr who maintains this repository is simply a very busy man. ","Please drop the empty lines hereThe end looks like it belongs in the Credits section, rather than Abstract.This does not seem to logically follow. The existing databases are not being apparently reduced in size to compensate, so it is strictly adding requirements here, no?

I think it may be appropriate to increase the block weight when these new databases are affected.Why not have optional overrides? I'm not sure it's a good idea to hardcode these.A UUID or hash seems like a better option here. Human-readable stuff doesn't really belong on-chain.What architecture? Compiled with what options? Why is there such a thing as reference software in the first place?

I don't think this field makes sense...How it's stored seems like it's an implementation-specific detail?

Not sure what the point is of this field...These requirements are subjective and cannot be imposed.

As it stands, I think this may be a technical unsoundness. (impediment to a BIP number assignment) :(The rules against invalid or double-spent txns are exactly identical to the rules against exceeding the block weight limit. I'm not sure what distinction you are implying exists here...I don't think equating undesirable transactions to ""aggression"" makes sense here. It also seems out of place.If it doesn't do anything, it shouldn't exist at all...The above seems to be specifying extension blocks, not sidechains, which is a whole can of worms, and *should not* be considered acceptable to be done by miners at will.Extension blocks (see above) are not softforks.Why isn't this in the main BIP file?OkI don't really think soI suppose that you are right that the ""storage"" requirements would in some sense increase. But, as a soft fork, this would only be for users who upgrade.

This would also be true if, for example, the latest Bitcoin Core were larger in size, and so downloading and building the software required more disk space. Or it would be true for a release that required the upgrading users to track Segwit and nonSegwit outputs and sort among these (or even, CheckLocktimeVerify outputs and non-CLTV outputs). In such cases I would find it strange to decrease the block size/weight limits to offset this cost.

But nonetheless I think I could remove the ""and storage"" phrase from the last sentence.The justification is given: to remove ACK-count as a basis for discriminating against sidechains, and make them identical in this respect. It is also less complex (and safer). And it is slightly more byte-efficient, of course.

Ultimately the user is always in charge. But it is more convenient for the user if a design has safeguards in place to prevent errors. It is better for all sidechains if they share ACK-periods, but probably most users do not understand why.

But I suppose it could be optional.These hashes that you keep talking about inserting are the mandatory extension blocks that you dislike!

Miners and users will be looking for the underlying data. So the hash achieves nothing -- it is just a waste of 32 bytes. And moving this data off chain just obfuscates it.As I said, the process as it stands does do something -- it allows tracking of the sidechain's balance.They are transactions that prevent other, more objectively valuable (in terms of txn fees, and consumer surplus) transactions from taking place. In that sense they really do resemble ""theft"" in modern society (which makes it difficult for society to produce anything worth stealing).

How would you explain it?If you have a better way of doing that, we will change it.In this proposal, since the sidechains are so asymmetric, a sidechain is considered to be equivalent to an optional extension block.

And since they are optional, it makes no difference if anyone does them at will.

And since one purpose of these sidechains is ""permissionless innovation"" (ie, to provide a way for Bitcoin to recover from errors in the dev process / BIP process), it is actually imperative that there be some way of adding new sidechains even if the BIP process doesn't want them.When describing anything, there is always a tradeoff between thoroughness and brevity.These are optional extension blocks, and the withdrawals from them will *not* depend on what happens ""in the x-block"". The withdrawals only depend on the ACK-ing process, all of which happens on the mainchain.

So they meet the definition of a soft fork. In fact they do so much more than the SegWit proposal did.It is helpful in cases where there is a disagreement over the definition of a sidechain. It prevents users from being misled over which software to download (if, for example, they want to run ""the zcash sidechain"" and someone is pretending to offer that software for download).

If a sidechain software has one ""reference software"", then it inherits the institution of the soft fork. This is great for users who like soft forks. And it is great for developers who want to resist being coerced into hardforking-in bad features into their sidechains.Yes, the ones with asterisks are not fundamental.The first requirement was an implied part of the SegWit UASF BIP.

And both are really not that subjective -- knowledge about ""what will maximize profits"" does exist. And even if it exists imperfectly, then that is no different from any other kind of knowledge.

And in the UASF case these ""requirements"" ended up being imposed, in practice.

But if you want to reject the BIP, arguing that it is technically unsound to require miners to maximize their profitability, I am fine with that.It is a distinction about control, as I say.

If miners had the option to remove the block weight, they probably would. But if they had the option to allow invalid txns, they probably would not.@psztorc  You did not address the ""What architecture? Compiled with what options?"" part. Is it supposed to be a Linux/Mac/Windows binary...?"
randolf,640,Proposed BIP modification,Minor improvements,open,,"Improved the clarity of the ""that candy cost me 2 bits"" example to make it easier for people to understand the meaning of ""2 bits.""
Corrected punctuation for ""e.g.,"" and also with quotation mark usage.",https://github.com/bitcoin/bips/pull/640,['bip-0176.mediawiki'],,,['luke-jr'],@jimmysong ,
sdaftuar,638,,New BIP: P2SH and Version 0 Segwit Script enforcement from genesis,closed,,I believe this is ready for BIP number assignment?,https://github.com/bitcoin/bips/pull/638,['bip-sdaftuar-p2sh-v0segwit-from-genesis.mediawiki'],,,"['MarcoFalke', 'luke-jr', 'evoskuil']","See also PR #639.  (This topic should be brought up on the bitcoin-dev mailing list for discussion.)

@luke-jr I think it was: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015588.htmlOn further thought, we can wait on BIP number assignment for now, if the PR to Bitcoin Core isn't merged then I'll just withdraw this.@MarcoFalke That doesn't address the question of whether to make BIPs for ""technically a protocol change, but has no actual effect on the chain present or future"".Would the plan then be to document soft forks only after miners have actually rejected blocks by enforcing them?Talking about protocol upgrades, whether they are soft forks or hard forks, clearly they should be documented.That was my point, we don’t wait until there is a split to document a fork, we do it well beforehand. So the occurance of a split cannot be a threshold criteria.

Upgrade is a loaded term, implying that there are other deviations that do not need to be documented. If the purpose of the documentation is to document the protocol, any deviation from the protocol needs to be documented.Closing in favor of @luke-jr's suggestion here: https://github.com/bitcoin/bips/pull/639#issuecomment-382196357",
luke-jr,628,Proposed BIP modification,BIP173: Support for P2SH^2-style preimages,closed,,,https://github.com/bitcoin/bips/pull/628,['bip-0173.mediawiki'],,,['sipa'],"@gmaxwell I think it's far too late for changes as big as this; several pieces of software have implemented BIP173 already, and some are already released in production.",
perlancar,621,Proposed BIP modification,Add bip39 Indonesian wordlist,open,,,https://github.com/bitcoin/bips/pull/621,"['bip-0039.mediawiki', 'bip-0039/bip-0039-wordlists.md', 'bip-0039/indonesian.txt']",,,"['dabura667', 'nym-zone', 'luke-jr', 'ubunteroz']","Technical Checklist ACK 2b35f485a449619060af724ea88a6ef0e1f44e43

Checked:
1. Is NFKD normalized list
2. No BOM
3. Has single trailing LF line break and is separated by LF line breaks@dabura667 Like English, Indonesian only uses 26 Latin letters and encodable in ASCII so no need to put in BOM and asciibetical sorting suffices. Please advise about trailing LF and LF line breaks, because that's how most of the other wordlist files use too.ACK means ""ok to merge"" and ""Technical Checklist"" means I checked for formatting errors and everything is OK.Ah ok, thanks.Has this any independent review from other native speakers or experts in the language?  The earlier BIP wordlist addition pull requests witnessed much lively discussion and examination.  One was superseded by a new proposal after significant problems were found.

Since this is said to be ASCII, it is easy to check some basic characteristics in addition to those checked by @dabura667:

```
$ grep '^[^a-z]' indonesian.txt
$ grep -Eo '^[a-z]{0,3}$' indonesian.txt
$ grep -Eo '^[a-z]{4}' indonesian.txt | sort -s | uniq | wc -l
2048
```

Sample 24-word mnemonic (outside of code-tagging to permit line breaks):

`$ easyseed -b 256 -l id`
keuskupan utuh kegunaan serta pesisir mungkin reguler cermin langsung enam parkir lari gaib bensin babak dinilai meluncurkan mandiri bijaksana keamanan domestik bercerita prefektur legislatif

@perlancar, a question from an implementer:  Are [these strings for identifying this wordlist](https://github.com/nym-zone/easyseed/blob/b2f66ba1a49ba9947a06c7b3459f2c8986c9b6fd/easyseed.c#L103) sensible and appropriate for Indonesian-speaking users?

```
+	LANG(indonesian,	u8""Bahasa Indonesia"",	""id"",	ascii_space ),
```

I have proposed on bitcoin-dev that native language strings and short ASCII codes should be standardized:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015498.html
  @perlancar, I recommend that you split 4fcfed70d2761c10c2cd228db8c9310af15f64e6, “Add Perl bip39 implementation: Bitcoin::BIP39”, into a separate pull request.  That should be reviewed separately from the wordlist; and it’s not even mentioned in the title or description of this pull request #621.  People who glance through the list of pull requests will not even realize that this exists.

It is good that you did atomic commits, so that 2b35f485a449619060af724ea88a6ef0e1f44e43 (the proposed Indonesian wordlist) and 4fcfed70d2761c10c2cd228db8c9310af15f64e6 (listing of the Perl module in bip-0039.mediawiki itself) can be handled separately.

I am not a maintainer here; therefore, I can only make a “recommendation”.@nym-zone I did separate into two pull requests, but admittedly I didn't create a branch for the first PR. And then when I created the second PR, Github merged the two.
  @nym-zone Thanks for the input. I did publish the proposed Indonesian wordlist as a Perl module (mentioned above) in hope of gathering some input, but of course the number of Indonesian Perl users is negligible. I will try to solicit input from more communities. For your information, I am a native Indonesian speaker. The wordlist were selected from most common Indonesian words which I have curated manually so I would say they are sensible. But that is my opinion.Hello, native Indonesian speaker here. Thanks @perlancar for your effort!
Quick review from your wordlist:
1. It's better to remove conjuctions (such as _atau_, _tetapi_, _yaitu_, and _yakni_) to avoid confusion.
2. Also, non-root words can cause another confusion (_peperangan_ -> _perang_, _pedesaan_ -> _desa_, _menyebabkan_ -> _sebab_).
3. Limiting wordlist to max. 8/9-letter words can help us to remember easily.Hi Surya (@ubunteroz), thanks for the comments. All are good. I will manually construct an edited new wordlist when I have some free time, but PR's or patches are welcome :)@dabura667 Only authors are supposed to ACK changes to BIPs.

In this case, these people: @slush0 @prusnak @voisine @ebfull ",
cclauss,619,,Run flake8 tests on all new code submissions,open,,"flake8 testing of https://github.com/bitcoin/bips on Python 3.6.3

$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__
```
./bip-0069/bip-0069_examples.py:52:9: F821 undefined name 'bytearray_cmp'
	return bytearray_cmp(output_tuple1[1], output_tuple2[1])
               ^
1     F821 undefined name 'bytearray_cmp'
```",https://github.com/bitcoin/bips/pull/619,['.travis.yml'],,,"['promag', 'luke-jr']","Why? BIPs aren't source code, they're documents...Because this repo contains __./bip-0069/bip-0069_examples.py__ and that file could raise a NameError exception at runtime.  How can users verify the validity of implementations when the examples crash?

See: https://travis-ci.org/bitcoin/bips/builds/321281686@luke-jr why not? @cclauss maybe include the fix in a commit (before the current commit)?",
gspasov,615,Proposed BIP modification,BIP 32: Private key derivation operation order fix,closed,,"Added additional parentesis for clear understanding of the equation on this row. I am doing this proposition because I was stuck on this part for quite some time untill I understood that I furst need to add and then do the modular devision. I think that this way, the order of operations is more clear.",https://github.com/bitcoin/bips/pull/615,['bip-0032.mediawiki'],,,"['MeshCollider', 'melodeys', 'sipa', 'luke-jr', 'dcousens']","@sipa Unsure. The ""(mod n)"" at the end just means the entire operation is done modulo n. It's not an operation.We actually had this come up recently in https://github.com/bitcoinjs/bitcoinjs-lib/issues/929#issuecomment-345909669@sipa 
Well I didn't know that. And this made me stay on this problem some days until I understood that I wasn't doing the operations in the correct order. I'm sure I wasn't the only one that got confused there and I won't be the last one. After I figured it out I asked some people what did they think this operation is done and they had the same first thought as I did. So either we are all blind or this isn't written the best way possible.The (mod n) at the end is standard in maths, I don't think changing it here improves clarityLearning Keeping fingers crossedCan hope this works Keep all updated Hope getting close Time will only tell..Not sure what to do next Trying to go with the flow uggg..",Not sure what this all means Learning I hope anyway 
BTCTaras,614,Pending acceptance,BIP 9: Update segwit deployment state,closed,,,https://github.com/bitcoin/bips/pull/614,['bip-0009/assignments.mediawiki'],,,"['Lamtikhongem1989', 'luke-jr']","I just saw that this change is addressed in #584, but the table is not formatted correctly in that commitMerged by 0e3551cbe9819bc41fafbfff99886e9876c57866",481824
jwilkins,612,,Status => rejected,open,,,https://github.com/bitcoin/bips/pull/612,['bip-0102.mediawiki'],,,"['gmaxwell', 'luke-jr']","Either @jgarzik needs to ACK, or it needs to timeout (3 years).https://lists.linuxfoundation.org/pipermail/bitcoin-segwit2x/2017-November/000685.html  < wouldn't this count as withdrawn by the proposer?",
Roasbeef,609,,new bip: compact client side filtering,closed,,"This BIP describes a new light client node type for Bitcoin as well as the
modifications to current full-nodes required to support this new type of light
client. The light client mode described in this BIP is meant to supersede BIP
37 as it provides a greater degree of privacy, utility, and also reduces the
resources required for full-nodes to service this new light client mode
compared to BIP 37. The light client mode described in this BIP can be seen as
a ""reversal"" of BIP 37: rather than the light clients sending filters to
full-nodes, full-nodes send filters to light clients. Unlike BIP 37, we don't
utilize bloom filters. Instead, we utilize a compact filter (more efficient
than bloom filters) which leverages Golomb-Rice coding for compression.
Additionally, blocks are downloaded as a whole (from any source), rather than
directly from peers as fragments with merkle-branches proving their
authenticity.

We've tested the implementation of both [a light client implementing this
BIP](https://github.com/lightninglabs/neutrino), as well as the serving full-node on Bitcoin's testnet over the past several months. Additionally, this new operating mode also serves as the basis for our [light weight Lightning node](https://github.com/lightningnetwork/lnd/).",https://github.com/bitcoin/bips/pull/609,"['gcs_light_client.mediawiki', 'gcs_light_client/gcstestvectors/testnet-01.csv', 'gcs_light_client/gcstestvectors/testnet-02.csv', 'gcs_light_client/gcstestvectors/testnet-03.csv', 'gcs_light_client/gcstestvectors/testnet-04.csv', 'gcs_light_client/gcstestvectors/testnet-05.csv', 'gcs_light_client/gcstestvectors/testnet-06.csv', 'gcs_light_client/gcstestvectors/testnet-07.csv', 'gcs_light_client/gcstestvectors/testnet-08.csv', 'gcs_light_client/gcstestvectors/testnet-09.csv', 'gcs_light_client/gcstestvectors/testnet-10.csv', 'gcs_light_client/gcstestvectors/testnet-11.csv', 'gcs_light_client/gcstestvectors/testnet-12.csv', 'gcs_light_client/gcstestvectors/testnet-13.csv', 'gcs_light_client/gcstestvectors/testnet-14.csv', 'gcs_light_client/gcstestvectors/testnet-15.csv', 'gcs_light_client/gcstestvectors/testnet-16.csv', 'gcs_light_client/gcstestvectors/testnet-17.csv', 'gcs_light_client/gcstestvectors/testnet-18.csv', 'gcs_light_client/gcstestvectors/testnet-19.csv', 'gcs_light_client/gcstestvectors/testnet-20.csv', 'gcs_light_client/gcstestvectors/testnet-21.csv', 'gcs_light_client/gcstestvectors/testnet-22.csv', 'gcs_light_client/gcstestvectors/testnet-23.csv', 'gcs_light_client/gcstestvectors/testnet-24.csv', 'gcs_light_client/gcstestvectors/testnet-25.csv', 'gcs_light_client/gcstestvectors/testnet-26.csv', 'gcs_light_client/gcstestvectors/testnet-27.csv', 'gcs_light_client/gcstestvectors/testnet-28.csv', 'gcs_light_client/gcstestvectors/testnet-29.csv']",,,"['jimpo', 'TheBlueMatt', 'luke-jr', 'evoskuil']","@luke-jr AFAICT other BIPs do contain test vectors in folders named the same as the BIP. For example BIP-00039 contains the word list used. Added a section for backwards compatability. 

@TheBlueMatt thanks for the thorough review! Admittedly the initial section reads more like a blog post. Following your suggestion I've adopted RFC words where applicable throughout, and created a new section (""Mathematical Background"") that houses what use to be the opening portion of the specification. > The light client mode described in this BIP is meant to supersede BIP 37 as it provides a greater degree of privacy...

As far as I can tell the privacy improvement is never quantified. It would seem that the independent downloading of less than all blocks (which is ultimately the objective) is the only source of privacy loss. However, given that privacy is a primary objective, it would be helpful if this analysis was explicit. I am specifically interested in whether there is *any* privacy loss in the filtering aspect (as compared to the operation of a full node).@Roasbeef I see you're doing a lot of revising of stuff. Let me know when you'd like this merged. (others commenting should note that this is just a draft, and merging does not preclude acting on comments in future revisions)

There's no hard rule against test vectors in the repo. My opinion on where they belong is an opinion.Closing this in favor of #636. 

Thanks to everyone who gave valuable review comments, especially @TheBlueMatt for his comments on the P2P aspect which led to notable improvements as proposed by @jimpo. ","Please choose one of the [recommended, or at least acceptable licenses](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#Recommended_licenses) (and also add a Copyright section below).`[1]` should be `<ref>https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki</ref>` (and use `<references/>` below) to make it auto-linkable. (suggestion, not mandatory)This should mention that k=4 in the example.

Also, I'm confused by the RLE scheme. How are runs of more than 2 1's represented? What would be the encoding of the below example with `s/0{20}/0{15} 1 0{5}/`?I feel like ""vector"" is more appropriate than ""array"" (not just in a C++ sense).typo: Due *to* the encodingtypo: (q and *r*) for a given integer n

Also missing closing parenthesis.typo: `aid`. aide is a noun.Doesn't mention what strategy this algorithm uses fewer cycles than.Is it necessary to subtract the remainder? Just the shift is sufficient, no?SFNodeCFMentioning the command string seems redundant.Yea, this is underspecified and also probably not entirely relevant here - the point of the Specification section is to describe *what* you do, not some alternative ways to encode the data.This paragraph probably doesn't belong in the ""Specification"" section, motivation section seems much more appropriate, or maybe a ""Background Math"" section.I dont think ""public key script"" is the way we normally refer to it....I'd say stick with either ""scriptPubKey"" or ""the output script"".This is technically underspecified - ""unary"" is not a normative encoding, and can be 0-indexed, 1-indexed and can encode as 0s followed by a 1 or 1s followed by a 0.Wait, sorted_set? No where else does anything reference that the set must be sorted? Sorted in what order?extract_push_datas is never well-defined - only referenced in a general sense.Sort order is not defined.Wait, huh? I think you mean meaning filters are *not* validated by full-nodes and *not* committed to in blocks.More importantly, dunno why you have to specify this? It is binding insofar as the protocol says it must be X, and light clients will think you're broken if its not X.Soooo...0? Please just say 32 bytes of 0s.Huh? Can you make it a bit clearer that you're saying if the filter has data in it? case Some, case None reads as nonsense to me (and you say this before you describe it in text).Also, why the special case here? Why not just sha256 of the empty string?I think this section may be clearer if you use RFC words (which you appear to already be doing) and be clear that you are. Also, what is the advantage of fetching the filter headerS from each peer? It would be less bandwidth and just as much cross-checking to only fetch the top block's filter header after you've synced the headers chain (which is probably a much better approach in any case as you can first make sure you're on the best chain, and then download a filters chain, protecting you from some types of DoS issues). You can then do a backwards sync of the filters. If there is a mismatch you do a binary search or otherwise to figure out which peer is lying.I dont know why this needs to be in the normative ""Specification"" section - clients can use this how they feel, and I think this is probably not the best approach anyway. You may wish to say something like clients SHOULD avoid syncing the full filter chain from all peers, but instead should only download from multiple peers when an inconsistency is detected.I dont think this should be normative, but if it is, I'd suggest using RFC words and use MAY here instead of SHOULD.I do not believe this is neccessary? There is a new service bit, which should be sufficient.I think we need to much more seriously consider whether we want to, for the first time, introduce big endian at the purely-p2p layer - it is nice at a bit level, but it kinda sucks to have yet *more* endianness confusion in Bitcoin's P2P protocol.64 bits appears as a magic number here. I would note that the 64 bits comes from the SipHash output size.Dunzo, we chose `CCO-1.0`. "
philsmd,608,Proposed BIP modification,bip38 typo: specifid -> specified,open,,"There was a small typo in the bip38 specification. If I'm not totally mistaken the word should be ""specified"" (not specifid)
Thx",https://github.com/bitcoin/bips/pull/608,['bip-0038.mediawiki'],,,['luke-jr'],@voisine ,
maaku,603,New BIP,Add BIP98: Fast Merkle Trees,closed,,"This contains the revised draft proposal for BIP98: Fast Merkle Trees, which incorporates all the feedback received so far from the developer mailing list and in-person review. This BIP draft is considered complete by its authors.

For context, see the following mailing list discussions:

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014932.html
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014935.html
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015028.html
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-October/015209.html
",https://github.com/bitcoin/bips/pull/603,"['bip-0098.mediawiki', 'bip-0098/build.sh', 'bip-0098/node-variants.dot', 'bip-0098/node-variants.png', 'bip-0098/skip-skip.dot', 'bip-0098/skip-skip.png', 'bip-0098/traversal-example.dot', 'bip-0098/traversal-example.png', 'bip-0098/unbalanced-hash-tree.dot', 'bip-0098/unbalanced-hash-tree.png', 'scripts/buildtable.pl']",,,['luke-jr'],"From Travis:

> Unknown field License-Code in bip-0098.mediawiki at scripts/buildtable.pl line 167, <$F> line 12.

License-Code in this BIP is compliant with BIP-2.I think maybe buildtable.pl is in error?> License-Code in this BIP is compliant with BIP-2.I think maybe buildtable.pl is in error?

You're correct.

This is however missing (above Status):

```mediawiki
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0098
```

Please also add a brief backward compatibility section (saying it isn't, and should only be used in/for new rules).

Finally, there should be a simple Copyright section with the full license terms in plain English.Why closed?",
rude9,602,,Merge pull request #1 from bitcoin/master,closed,,mona,https://github.com/bitcoin/bips/pull/602,[],,,,,
luke-jr,596,"Pending acceptance, Proposed BIP modification",BIP 2: Allow editors to fix typos,open,,Please see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015065.html,https://github.com/bitcoin/bips/pull/596,['bip-0002.mediawiki'],,,"['Varunram', 'btcdrak', 'jimpo', 'randolf']","@luke-jr If this can't be implemented easily in GitHub's system, I'm willing to help out by watching for these kinds of Pull Requests and then fast-tracking them in when they are only spelling/grammar corrections (after a quick read of them first, of course).Nobody's approval matters other than the author of the BIP being modified (unless it's s a Final/Active BIP, in which case the usual requirements apply *also*).

Approving changes you don't have authority to approve is at best a waste of time. :/I'm in support of this, perhaps requiring sign off from multiple BIP contributors (not necessarily the BIP author) that the meaning is unchanged, [as suggested by cdecker](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015083.html).This would be a good idea since it wouldn't waste people's time to ACK trivial stuff and also if the contributor(s) of the BIP(s) is/are not available, it prevents merging trivial fixes.ACK.",
danra,590,,"BIP 13: Remove broken link to ""Base58 encoding""",closed,,"Alternatively, if the document previously linked-to still exists (I don't know), the link can be fixed.",https://github.com/bitcoin/bips/pull/590,['bip-0013.mediawiki'],,,['sipa'],"BIPs used to live on the [bitcoin wiki](https://bitcoin.it), but were moved to avoid vandalism and self-assignment of numbers.

The original paged linked to is https://en.bitcoin.it/Base58Check_encodingThanks, closing this to open PR which just fixes the link.",
alokmenghrajani,581,Proposed BIP modification,Add a sentence explaining a risk with unsecure money receivers.,open,,,https://github.com/bitcoin/bips/pull/581,['bip-0032.mediawiki'],,,"['schildbach', 'nym-zone', 'luke-jr']","@sipaActually three Java impls exist: bitcoinj is missing.re: bitcoinj, I (or anyone else) can add that in another PR.friendly pingNACK:

>+Obviously, if someone illegally obtains access to the webserver, they can steal money by diverting future transactions to their own address.

Too obviously!  Obviously also, in this scenario, the intruder could steal credit card info, reduce the prices of all products to zero, insert Javascript malware into every page, replace the homepage with an [offensive “shock” image](https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/The_Global_Financial_Context_James_Dimon_%28cropped%29.jpg/545px-The_Global_Financial_Context_James_Dimon_%28cropped%29.jpg), or `rm -rf /` the whole server.

Sadly, the BIP 32 standard omits specification of magical means to stop the hax0r who pwned your server from replacing your Bitcoin addresses with his Bitcoin addresses.  `NOTABUG`.

So, yes, an intruder who takes control of a server can control the server and its outputs.  This is not a BIP 32-specific or Bitcoin-specific issue.  To explain such an elementary general fact in the standard would make the standard look dumb, and insult the intelligence of the reader.",
CikeQiu,580,Proposed BIP modification,Add a Swift implementation of BIP32 for iOS.,open,,Include BIP39 implementation and BIP32 implementation.  -- Askcoin team.,https://github.com/bitcoin/bips/pull/580,['bip-0032.mediawiki'],,,['luke-jr'],@sipa ,
MeshCollider,579,Proposed BIP modification,Fixing spelling in multiple BIPs,open,,"Fixing spelling mistakes picked up by this bot:
https://github.com/ka7/misspell_fixer",https://github.com/bitcoin/bips/pull/579,"['bip-0009.mediawiki', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0019.mediawiki', 'bip-0032.mediawiki', 'bip-0035.mediawiki', 'bip-0039.mediawiki', 'bip-0045.mediawiki', 'bip-0047.mediawiki', 'bip-0061.mediawiki', 'bip-0065.mediawiki', 'bip-0075.mediawiki', 'bip-0080.mediawiki', 'bip-0081.mediawiki', 'bip-0099.mediawiki', 'bip-0103.mediawiki', 'bip-0106.mediawiki', 'bip-0109.mediawiki', 'bip-0140.mediawiki', 'bip-0143.mediawiki', 'bip-0150.mediawiki']",,,"['jimmysong', 'jonasschnelli', 'maraoz', 'petertodd', 'UpalChakraborty', 'rustyrussell', 'jtimon', 'gavinandresen', 'justusranvier', 'sipa', 'prusnak', 'cdecker', 'justinwnewton', 'luke-jr']","* BIP 9: ACK'd @sipa @petertodd @gmaxwell @rustyrussell 
* BIP 10: @etotheipi 
* BIP 11: @gavinandresen
* BIP 14: @genjix @phantomcircuit
* BIP 15: @genjix
* BIP 16: @gavinandresen
* BIP 19: ACK'd @luke-jr
* BIP 32: ACK'd @sipa
* BIP 35: @jgarzik
* BIP 39: ACK'd @slush0 @prusnak @voisine @ebfull 
* BIP 45: ACK'd @maraoz @ryanxcharles @matiu 
* BIP 47: ACK'd @justusranvier 
* BIP 61:: @gavinandresen 
* BIP 65: ACK'd @petertodd 
* BIP 75: ACK'd @justinwnewton @techguy613 @voisine @jmacwhyte 
* BIP 80: ACK'd @justusranvier @jimmysong
* BIP 99: ACK'd @jtimon 
* BIP 103: ACK'd @sipa 
* BIP 106: ACK'd @UpalChakraborty 
* BIP 109: @gavinandresen
* BIP 140: ACK'd @cdecker 
* BIP 143: ACK'd @jl2012 @sipa
* BIP 150: @jonasschnelli

Please prepend ACKs with the BIP number(s) you are speaking for. I will update this comment with ACK status as things progress.
ACK BIP75


> On Aug 24, 2017, at 8:39 AM, Luke Dashjr <notifications@github.com> wrote:
> 
> BIP 9: @sipa <https://github.com/sipa> @petertodd <https://github.com/petertodd> @gmaxwell <https://github.com/gmaxwell> @rustyrussell <https://github.com/rustyrussell>
> BIP 10: @etotheipi <https://github.com/etotheipi>
> BIP 11: @gavinandresen <https://github.com/gavinandresen>
> BIP 14: @genjix <https://github.com/genjix> @phantomcircuit <https://github.com/phantomcircuit>
> BIP 15: @genjix <https://github.com/genjix>
> BIP 16: @gavinandresen <https://github.com/gavinandresen>
> BIP 19: @luke-jr <https://github.com/luke-jr> ACK
> BIP 32: @sipa <https://github.com/sipa>
> BIP 35: @jgarzik <https://github.com/jgarzik>
> BIP 39: @slush0 <https://github.com/slush0> @prusnak <https://github.com/prusnak> @voisine <https://github.com/voisine> @ebfull <https://github.com/ebfull>
> BIP 45: @maraoz <https://github.com/maraoz> @ryanxcharles <https://github.com/ryanxcharles> @matiu <https://github.com/matiu>
> BIP 47: @justusranvier <https://github.com/justusranvier>
> BIP 61:: @gavinandresen <https://github.com/gavinandresen>
> BIP 65: @petertodd <https://github.com/petertodd>
> BIP 75: @justinwnewton <https://github.com/justinwnewton> @techguy613 <https://github.com/techguy613> @voisine <https://github.com/voisine> @jmacwhyte <https://github.com/jmacwhyte>
> BIP 80: @justusranvier <https://github.com/justusranvier> @jimmysong <https://github.com/jimmysong>
> BIP 99: @jtimon <https://github.com/jtimon>
> BIP 103: @sipa <https://github.com/sipa>
> BIP 106: @UpalChakraborty <https://github.com/upalchakraborty>
> BIP 109: @gavinandresen <https://github.com/gavinandresen>
> BIP 140: @cdecker <https://github.com/cdecker>
> BIP 143: @jl2012 <https://github.com/jl2012> @sipa <https://github.com/sipa>
> BIP 150: @jonasschnelli <https://github.com/jonasschnelli>
> Please prepend ACKs with the BIP number(s) you are speaking for. I will update this comment with ACK status as things progress.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/bitcoin/bips/pull/579#issuecomment-324673391>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AGXoGJAK1OBU3UrZc7cYZ8PcRY81OLGmks5sbZksgaJpZM4PBR6W>.
> 

ACK BIP80ACK BIP47ACK BIP39ACK BIP45

On Thu, Aug 24, 2017, 17:54 Pavol Rusnak <notifications@github.com> wrote:

> ACK BIP39
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/bitcoin/bips/pull/579#issuecomment-324795530>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AARh1QCuz98fEcWE8OWr7utWz_Zebu5Mks5sbhs-gaJpZM4PBR6W>
> .
>
ACK BIP9, BIP32, BIP103ACK BIP9, BIP65ACK BIP140

>
ACK BIP106ack bip99ack bip143ACK BIP9Merged BIPs 9, 19, 32, 39, 45, 47, 65, 75, 80, 99, 103, 106, 140, 143

Still remaining: BIPs 10, 11, 14, 15, 16, 35, 61, 109, 150

* BIP 10: @etotheipi
* BIP 11: @gavinandresen
* BIP 14: @genjix @phantomcircuit
* BIP 15: @genjix
* BIP 16: @gavinandresen
* BIP 35: @jgarzik
* BIP 61:: @gavinandresen
* BIP 109: @gavinandresen
* BIP 150: @jonasschnelliACK BIP150Merged BIP150Please don't bother me with trivial issues like spelling corrections in the future, I don't care if they are corrected or not, the meaning is clear either way so it is a non-issue.
",
jonathancross,577,Proposed BIP modification,"BIP114: Fix spelling of ""Merkle""",closed,,"* ""Merkel root"" => ""Merkle root""
* ""Merkelized"" => ""Merklized"" (per https://github.com/bitcoin/bips/pull/552#issuecomment-317951710)

@jl2012",https://github.com/bitcoin/bips/pull/577,"['README.mediawiki', 'bip-0114.mediawiki']",,,"['hafiz420', 'jl2012']","I'm going to completely rewrite BIP114 so maybe I fix it there?@@jl2012 As you want.  Can fix here and in the new version, but it is your decision as the author of the  BIP.",
evoskuil,576,Proposed BIP modification,"BIP32: Add links to libbitcoin implementation, update style.",open,,,https://github.com/bitcoin/bips/pull/576,['bip-0032.mediawiki'],,,['luke-jr'],@sipa ,
greenaddress,575,Proposed BIP modification,add libwally as bip32 implementation,open,,,https://github.com/bitcoin/bips/pull/575,['bip-0032.mediawiki'],,,['luke-jr'],@sipa bump/ping,
greenaddress,574,Proposed BIP modification,add libwally as bip38 implementation,open,,,https://github.com/bitcoin/bips/pull/574,['bip-0038.mediawiki'],,,['luke-jr'],@voisine bump/ping,
ysangkok,569,,Note segwit BIP9 state change,closed,,"This was a future block when sending this PR, you can defer merging to after the block appears, if you like.",https://github.com/bitcoin/bips/pull/569,['bip-0009/assignments.mediawiki'],,,,,
dittaeva,564,duplicate,BIP32: shuffle lines in recent changes to be chronological,closed,,"I don't see this section in other BIPs, reversed chronological would be better.",https://github.com/bitcoin/bips/pull/564,['bip-0032.mediawiki'],,,['luke-jr'],Duplicate of #556,
evoskuil,563,Proposed BIP modification,BIP38: Add link to libbitcoin implementation.,open,,,https://github.com/bitcoin/bips/pull/563,['bip-0038.mediawiki'],,,['luke-jr'],@voisine,
mmgen,558,,P2SH-P2WPKH redeem script must begin with 0x00,closed,,"This fixes the current description of the P2SH-P2WPKH redeem script, which incorrectly prepends 0x16 to the script. This contradicts the correct description in the [ Segwit Wallet Development Guide](https://bitcoincore.org/en/segwit_wallet_dev/#creation-of-p2sh-p2wpkh-address):

> The P2SH redeemScript is always 22 bytes. It starts with a OP_0, followed by a canonical push of the keyhash (i.e. 0x0014{20-byte keyhash})

The prepended 0x16 also results in the script being a single data push: the witness mechanism is not triggered, the script evaluates to TRUE and the TX is accepted by the network with no signature, creating a potentially dangerous gotcha for wallet developers.",https://github.com/bitcoin/bips/pull/558,['bip-0141.mediawiki'],,,['dabura667'],"NACK

You are misunderstanding what a redeemscript is.

Perhaps it needs to be made clear in the parenthesis that ""Or, written as a raw hex scriptSig""

The writing is correct as-is. Though I do agree it might be a bit confusing and may cause someone to implement it wrong.

However, your fix is also just as misleading and just as easy to misunderstand. So your fix does not help.

Therefore NACK.@dabura667 The fix is correct. The as-is description is incorrect. There's no byte 0x16 at the beginning of a Segwit P2SH-P2WPKH redeem script, which MUST begin with byte 0x00 as described in the Development Guide linked above. Prepending byte 0x16 creates a non-Segwit P2SH script redeemable without a signature. I know. I've tried it. I encountered this problem while in the process of adding Segwit support to my wallet.

The fix is correctly formed and not misleading in any way. The removal of the angle brackets signifying a data push is equivalent to the removal of the 0x16 in the hex-encoded example that follows.0x16 is not part of the redeemscript, it's the pushbyte PUSHING the redeemscript on the stack in the scriptSig.

The part you changed is unclear at worst. Notice how they don't write ""redeemscript"" on the left, but instead ""scriptSig""...

that's because the script sig is as follows:

```
scriptSig:    <0 <20-byte-key-hash>>
              (0x160014{20-byte-key-hash})

1. 0x16 (Push 22 bytes on the stack)
2. 0x0014{20-byte-key-hash} (the 22 bytes to be pushed on the stack by step 1)
```

Usually when writing Script, people use <> to denote ""push this on the stack""

Which is why the scriptSig is just one piece of data pushed on the stack.

to make things less confusing how about saying:

```
      scriptSig:   <P2WPKH-script> (This data is the redeemscript in this case)
  P2WPKH-script:   0 <20-byte-key-hash>
scriptSig (hex):   0x16 0x0014{20-byte-key-hash}
```

I repeat. It is not incorrect. Just confusing.@dabura667 Thanks for the clarification. I like your suggestion. It prevents any confusion by making it absolutely clear that the push byte doesn't belong to the redeem script. How to go about submitting this as a patch? Close this pull request and open a new one?

My wallet uses bitcoind as a back end, so I didn't have to craft the scriptSig, only the redeem script. That's what got me into trouble. Who knows, there might be other front-end wallets out there whose devs could fall into the same trap.",
veleslavs,555,New BIP,BIP 136: Bech32 Encoded Transaction Position References,open,,"This proposed BIP was posted to the mailing list just under two months ago. As there has been no serious objections, (unfortunately no mailing list feedback at all), I wish to formally ask for a BIP number to be assigned to our proposal.

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014396.html",https://github.com/bitcoin/bips/pull/555,['bip-0136.mediawiki'],,,"['jtimon', 'jonasschnelli', 'ChristopherA', 'jonathancross', 'luke-jr', 'clarkmoody']","@jonasschnelli I think that you would like to subscribe to this pull request.@jonasschnelli @ChristopherA @shannona @kimdhamilton I've updated this draft specification to include a Litecoin Display Format.@luke-jr Can you please allocate a new block of BIP numbers to WoT / ID based proposals;  I think that this block should be about 20 numbers in width.@luke-jr wrote: ""Suggest just reusing SLIP 44 (or better yet 173), possibly with a bitshift or sub-namespace."" & ""Litecoin stuff is inappropriate for BIPs.""

I agree that this may be more appropriate for SLIP (though I have no experience with their process) but unfortunately both SLIP 44 and 173 don't work well as bech32 prefixes because of the limitations of that encoding.

I personally would like to see a SLIP that includes a number of prefixes, not only for blockchain types, but also reserve placeholders for private key, public public key, xprv, xpub, ecdsa signature, schnorr signature.I'm also hoping to see this BIP have tx1: rather than tx1- as that allows it to conform better with W3C URN/URL standards, as TX1: is a method, and the data after is the the encoding of that method. If someone really preferred to use base58 for transaction references, it would be TX58: and then its encodling, etc.> I agree that this may be more appropriate for SLIP (though I have no experience with their process) but unfortunately both SLIP 44 and 173 don't work well as bech32 prefixes because of the limitations of that encoding.

SLIP 173 is *specifically designed for* Bech32 prefixes...

> I personally would like to see a SLIP that includes a number of prefixes, not only for blockchain types, but also reserve placeholders for private key, public public key, xprv, xpub, ecdsa signature, schnorr signature.

That's more of a BIP thing, and could be part of this if appropriate.
@ChristopherA Thank you for the feedback of using the colon instead of the dash for the separating character after the Bech32 separator.  I am going to update this proposal adopting this change.

@jonasschnelli any comments / objections?@ChristopherA I have updated this bit to use the colon instead of the dash for the first visual breaker, as recommended.  @jonasschnelli  and  @shannona please take note that your code will need to be updated.@luke-jr I have moved the non-bitcoin related appendixes to https://github.com/satoshilabs/slips/pull/89

However I still haven't decided what to do with the magic values, In this case I don't think that https://github.com/satoshilabs/slips/blob/master/slip-0044.md suits our purposes; as there is a large priority having the codes very concise.I think the codes should be human-readable more than concise, so SLIP 173 is a good match. But that's up to you.@luke-jr I think that it is the job of the GUI to provide this information in a clear way to the user. Users should not be expected to understand the difference between x-coin and y-scam-coin. Implementers should take care to display this information in a clear way to the users.

However I think that the non-bitcoin related magic code listing should be moved to a SLIP.  I will leave Litecoin as an exception; as I've granted it a first-class 5-bit code, (maybe this should be reviewed and a 2nd class 10-byte magic code should be used for Litecoin). @jonasschnelli what do you think?I agree with @luke-jr that the human-readable part should inform the user that this is more than just ""some transaction reference."" For instance, as the user, I have to understand that `tx1:r...` is a Bitcoin transaction because of the `r` in the data part. 

Since the human-readable part is specifically for humans, why not use `bc-tx` or similar string for the HRP? The spec could read
```
use the SLIP-0173 coin prefix, followed by `-tx` as the human-readable part
```
For instance, I would read `bc-tx1:rqqq-qqqq-qmhu-qk` as ""bitcoin-transaction *blah*.""We should move the technical discussion to the mailing list where it belongs: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014396.html.Posted to mailing list. My comments will have no context, since the original BIP content was not sent to the list, only a GitHub link.@clarkmoody I have replied to your review comment on the mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014800.html

I'm sorry about the formatting when viewing it online, it seems like protonmail has a incapability to send plain-text emails. 👎 @clarkmoody 

On Specifying the The Network within the Human-Readable-Part:  I particularly do not support this idea. The core reason is that I don't expect users to memorise and use many different Human Readable Parts in real-life. -  I expect the Developers of the GUI to clearly display what network (or unknown network) the TxRef relates to.

Users should not be expected to understand this specification; hence, they will only see ""tx1:"" and then know they can copy-paste or click on it and the application will do everything for them.  (the application should say: ""hey this is a Bitcoin / Litecoin / Sidechain / Extension Block / etc Transaction Reference"".  Then direct the user to do an appropriate action.

In the future users will not install 10 different *coin wallets, they will instead install a block-explorer that support 10 different alt-coins and sidechains and all colours of different variants, and have that link to wallet apps they use.Consensus systems work by most users running a full node. Full nodes are inherently single-blockchain. It may be possible in the future there might be some abstraction where the nodes are all invisibly managed in the background, but that's not very near term.

Handling `tx1-bc:`, `tx1-tb:`, etc is no more work than translating an arbitrary number to a name...

Besides, these aren't URIs as-is. If you want URIs, then they should use the URI format, not Bech32...
`tx://bitcoin/<height>/<txnum>` or something.@luke-jr for example, I hope that the application that implements this format is something like a block-explorer type application that would make sense to support many different blockchains.  Such block-explorers can then call the appropriate wallet if the user desires such an action. - The resource requirements for users to run their own Full-Node-Block-Explorers is already quite prohibitive.  (I've updated my previous post to call the application a block-explorer instead of a wallet).

This proposal isn't a URI.  This is a Transaction Reference; that can reference transactions both in the Bitcoin blockchains, and other supported blockchains.Actually the #RebootingWebOfTrust community plans to use a bech32 transaction reference for part of a W3C standard for Decentralized Identifiers, which will be a a true URN and under the W3C international standards. In our case the urn will be did:method:transactionref. There are already ones being defined for ethereum and sovrin/hyperledger indy (a public but permissioned blockchain) and I want bitcoin to be included as well. As @veleslavs and @jonasschnelli are planning to use this for an identity enrollment proof system for satoshi-style blockchains, the in the W3C Credentials CG (of which I'm co-chair) are quite willing to help tx1 be an international standard properly registered URN as well. The only thing needing a change in their proposal is tx1- to tx1:

@luke-jr URI don't have to have :// — that is an artifact of web based URLs having an ""authority"", this this case the domain owner. See https://tools.ietf.org/html/rfc3986 `The authority component is preceded by a double slash (""//"")`— in this case, as transaction references are decentralized and there is no authority, there is no ://In our hackathon this week we already have one implementation in C that works with bitcoind to find the transaction data, the other one uses javascript with a bitcoin explorer API to get the transaction data, and a third (still in progress) uses python which can do both. So we are beginning to see implementation of this proposal now.@ChristopherA suggested change from `tx1-` to `tx1:` has been adopted, please see the latest revision of this document.@jonathancross Thank you for the proof-reading. I have adopted all of your suggestions: many thanks.Litecoin doesn't need a special place in this BIP, nor does any other altcoin, testchain or altchain (but 0x4 fits more Freicoin than Litecoin IMO if we have to discuss that); nor in any ""SLIP"".

When you introduce a BIPXXX txid on a litecoin program that supports it the only concern is making sure the transaction isn't referring to another chain.
But that program doesn't need to know about a centralized registry with all chains in the world: it only cares about the ""TxRef"" being created for litecoin's chain to not waste time with something that doesn't exist in litecoin's chain.
The right place IMO us thus bech32's checksum.

On one side litecoin TxRefs can be created hashing the genesis block hash (aka ""chain id"") when calculating the checksum, without it having to be part of the rest of the bech32 string.

Since the litecoin program expects a litecoin TxRef, it can checksum without receiving the genesis block hash every time (which can have as a constant in the program instead).
If we're talking about a program expecting TxRefs from various chains, we need more.

We could iterate for all supported chains and try if the txref is valid for all chains in an arbitrary order and pick the first valid one, like PaymentServer::ipcParseCommandLine does for addresses and registered chain names to support bip70 (which doesn't really scale to many supported chains in the same program).

Or perhaps the human readable part could be extended beyond ""tx..."" to ""txltc..."" or something.

I don't see how this BIP can be compatible with https://github.com/bitcoin/bitcoin/pull/8994 (not that it has to be) at this point.
@jtimon  Thank you for your review of the magic encodings in our proposal.

I would like to attempt to address your concerns.

On Litecoin or any other, altcoin, testchain or altchain being described in this BIP:

If this is a genuine concern, I will move the non-bitcoin magic code registration to a SLIP or other place that it doesn't disturb this BIP process. However, I think that the religious exclusion of the acknowledgement that crypto-finance is broader than just Bitcoin hurts the BIP process overall. (Personally, I think that the focus of a BIP should be Bitcoin, however not to the strict exclusion of any detail that isn't related to Bitcoin.)

I also seek clarification that you suggest that we should also remove all references to the test-network, this would very likely be used by the Bitcoin Testnet.

On using as salt for the Bech32 encoding:
I recommend that this should not be done for two reasons.

1.  This is a security risk, as this opens up the possibility that a single TxRef may reference more than one transaction. (A cryptographic hash of 160bit is sufficient for such salting.  However Bech32 is a non-cryptographic 30bit checksum).
2. This will break the Bech32 standard and cannot be considered Bech32 encoding.


On using the human-readable-part for designating the network:
My most recent reasoning why I recommend against this approach is in my comment above:
https://github.com/bitcoin/bips/pull/555#issuecomment-315512489

I will take the time to revise this BIP so that this comment can be included in the rationale.


On your testchains proposal:
I do not understand how this proposal is conceptually incompatible with the testchains proposal. Can you please provide more details?

Thank you again,
Your full careful review of this proposal would be most appreciated.@veleslavs I think you are completely missing my point: I want this to more easily support more chains, not less. A centralized registry is a barrier to that, whether it is here or in a SLIP. Moving it to the SLIP doesn't help in any way.
I'm not suggesting this BIP doesn't support testnet3 or any other testchain. Pretty much the contrary: I want support of them without having to list them all one by one here (or in a SLIP). But I agree with @clarkmoody that testnets shouldn't be grouped together.

> This is a security risk, as this opens up the possibility that a single TxRef may reference more than one transaction. (A cryptographic hash of 160bit is sufficient for such salting. However Bech32 is a non-cryptographic 30bit checksum).

Unless I'm missing something, identifying litecoin with the sha256d hash of its genesis block (256 bits) instead of with ""0x4"" doesn't make the possibility that a single txref references more than one tx more likely.

> This will break the Bech32 standard and cannot be considered Bech32 encoding.

That's strange, because it is my understanding that using the chain id (genesis block hash) for the checksums was considered for bech32 addresses too. In fact, I don't remember why it was decided against it. Perhaps @sipa can help adding some clarity here?

> On using the human-readable-part for designating the network:
> My most recent reasoning why I recommend against this approach is in my comment above:
> #555 (comment)

I think @luke-jr 's response is very good: https://github.com/bitcoin/bips/pull/555#issuecomment-315512761

> I do not understand how this proposal is conceptually incompatible with the testchains proposal. Can you please provide more details?

My proposal for testchains easily allows you to create ""infinite"" independent testchains. The existence of the centralized registry of ""known altchains"" limits the number of chains this BIP can support to 2^5, 2^10, 2^15, or 2^20 as the maximum number of chains that can be supported.

To reiterate: I'm not against supporting multiple chains but against the way it is done here via a centralized registry enumerating known chains.
@jtimon One of the key design goals of the TxRef was to keep it very short. If we include 256bit checksum then, of course that could support infinite chain-types.

Great effort has been taken to keep the number of bits to encode low (in the case for Bitcoin, 40bits are needed), while still extendable. (for a total 70bits with checksum).

I am unaware of any way to have the cake and eat it also:  Keep the number of bits low, and not have a central place to lookup Networks Magic Values.

I'm not against making a additional _by-hash-of-genisis_ display-format for the catch-all case.  However this would not be the case of a short TxRef anymore, It would be about 250bit long in total. (salted_hash(160) + block height (30) + tx_position (30) + checksum (30)).

I'm also unconvinced that Test Network TxRef need to be globally unique.  For test-networks you can just prefix the full 256bit genesis hash to the HRP, however, such TxRef's shouldn't be use outside of strict testing purposes. As Test Networks Should only be used within their Testing Scope.> One of the key design goals of the TxRef was to keep it very short. If we include 256bit checksum then, of course that could support infinite chain-types.

I don't mean including the genesis block in either the txref nor the checksum, only taking it into account when calculating the checksum. The chain id must be known to calculate the checksum. 
My understanding is that this is possible, but perhaps @sipa or someone else can correct me.

> However this would not be the case of a short TxRef anymore, It would be about 250bit long in total. (salted_hash(160) + block height (30) + tx_position (30) + checksum (30)).

I'm not sure where this numbers come from, but perhaps the specification could contain something like this?
Are these the dimensions you have in mind without my suggestion?

magic numbers(5) + block height (30) + tx_position (30) + checksum (30) = 95 bit ?
If so, with my suggestion the data part would not become bigger but smaller, since the magic numbers are removed and everything else remains the same.
@jtimon The checksum should not contain any salted data. Otherwise with 30bits of non-cryptographic checksum one can easily calculate a TxID that is valid for more than one Network.

The network data must be included in the data-part (or human readable) for security. Salting a 30bit checksum with a ChainID is not secure.

This is why I proposed a 160bit crypto-salted-checksum, because that would have the security properties where it would be infeasible to find a intersection.  Maybe 256bit would be needed in reality to protect against birthday attacks.@jtimon I propose the following non-standard display format:

HRP  chaintx1:

Data | Length | Value | Comment
------------ | ------|-----|--
Magic |  5bit | 0x0 | Letter: `q`
Version | 1bit | 0x0 | 
Block Height | 32bit
Transaction Position | 32bit
Short-ChainID  | 30bit | | There will be lots of intersections, however this isn't a concern for real-life use-cases. Use the first 30bits of the full 256bit hash.
Checksum | 30bit


Total Bech32 Length: 130bit or 26 characters.


Bitcoin can use it's own special optimised format, Other Networks that want an optimised format can use the SLIP process. However this can be the default for Non-Bitcoin alt-chains.
> The checksum should not contain any salted data. 

I'm not proposing that either. I feel like you are trying to ""fix my proposal on the fly"" without actually understanding it.

> The network data must be included in the data-part (or human readable) for security

I propose on the human readable part or nowhere.

> Salting a 30bit checksum with a ChainID is not secure.

Then don't do that, I'm not proposing that.
Please, please don't call anything that isn't a 256 bit hash of the genesis block a chainID or we will get more confused.
If it's not 256 bit long, it is not a chain ID by my definition. And you had no notion of chainID before. This is something new, please find another name to avoid confussion.

> This is why I proposed a 160bit crypto-salted-checksum, because that would have the security properties where it would be infeasible to find a intersection. Maybe 256bit would be needed in reality to protect against birthday attacks.

Please stop trying to ""fix"" my suggestion and focus on understanding it first. Yes, I'm proposing to use 256 bits for the chain ID, just not include it as part of the txref.

> @jtimon I propose the following non-standard display format:

My proposal is to remove the 5 bit magic part and the newly introduced 30 bit ""something that is not a chain ID"".
Thus with my proposal the txref is smaller, not bigger.

You may ask, if it's not inthe txref, where is the 256 bit chain ID?

Nowhere. Either the programs assume it, or they know which one to use (exclusively for the checksum) from the human readable part.

How is it involved in the checksum if it's not part of the data part of txref ? 

Before calculating the checksum, you append the extra 256 bits.

Forget for a moment it is a chain ID. We could append the same extra constant 256 bits before calculating the checksum, right?

> Bitcoin can use it's own special optimised format, Other Networks that want an optimised format can use the SLIP process

To reiterate: my point is that no special case is needed for any chain, not even the main chain. And the SLIP process is not needed here at all.
","If it doesn't comply with the standard, the standard can't tell it what to do... :pSeems to defeat the purpose of the human readable part.By specifying the removal, you actually prohibit correction...Litecoin stuff is inappropriate for BIPs.Suggest just reusing SLIP 44 (or better yet 173), possibly with a bitshift or sub-namespace.Why? Isn't the human readable ideal for detecting (on the human level) if this is a testnet, mainnet or – lets say – lightcoin txref?As definition, yeah maybe. But we already have Litecoin references in BIP44 and BIP122.Exactly, it should be ""tx"" + ""bc"" in some order or another, not just ""tx"". :)As examples of altcoins, not as specification.The 'specified' testnet display format is added for convenience only. It should not be considered part of the formal standard. This is why it was decided to put it in the appendix as a non-standard extension.The human readable part is to inform users that the string should conform to this particular BIP.  We have out own magic and versioning system so that we can upgrade and extend the format transparently for our users.I do not see how this is the case, can you please provide an example?If including a Litecoin display format as an appendix is a strong objection I will be happy to remove it. It was included, by request, as Litecoin is used by Bitcoin Developers as a legitimate and functional testing ground.Shouldn't ""phasers/phasing"" be ""parsers/parsing"" here and elsewhere?Why ""any test network""? This sort of ambiguity means that multiple transactions have identical reference strings.

You could use the 10-bit codes for testnets (or stick with the SLIP-0173 prefixes in the human-readable part).I can understand the desire to keep all reference strings to the nice 14-character version by keeping the data payload to these 40 bits, but it seems to place artificial limitations on the format (year 2048 & 8191 transactions). I also understand that this might be addressed with Version 1 encoding. But current blocks are not that far from having 8191 transactions.

You could go with a variable-length encoding similar to Bitcoin's variable ints and gain the benefit of having a format that will work for very large blocks and the very far future.

Also, the Bech32 reference libraries allow encoding from byte arrays into the base-5 arrays native to Bech32. It seems like bit-packing to these 40 bits might be overkill. As an alternative you could have one bit-packed byte to start:
```
# First two bits are the protocol version, supporting values 0-3
V = ((protocol version) & 0x03) << 6
# Next two bits are magic for the blockchain
# 0x00 = Bitcoin
# 0x01 = Testnet3
# 0x02 = Byte1 is another coin's magic code (gives 256 options)
# 0x03 = Byte1-2 is treated as the coin magic code (gives 65280 more options)
M = (magic & 0x03) << 4
# Next two bits are the byte length of the block reference
B = ((byte length of block reference) & 0x03) << 2
# Final two bits are the byte length of the transaction index
T = ((byte length of transaction index) & 0x03)
# Assemble into the first byte
Byte0 = V | M | B | T
```
This gives you up to 3 bytes for each block and transaction reference, which is 16.7 M blocks, or year 2336, and 16.7 M transaction slots.
```
Data part: [Byte0][optional magic bytes 1-2][block reference bytes][tx reference bytes]
```
So the shortest data part would have 3 bytes in it, with the reference version `0` genesis coinbase transaction having data part `0x050000`.

I know this is a departure from your vision, but it would be much more flexible for the long term (in my opinion).Different test-nets can use different magic values. The idea behind ""Any Test Network"" is probably to have a longer and clear visually different txref form for testnets (longer bech32 part, longer HRP).I do not want to assign different Magic values to different test networks; Test Networks are for testing purposes only. Developers should be aware about what network they are testing. (without needing a separate testing magic value).

For example, should testnet v4 and (future) testnet v5 be assigned different testing magic values? Such ideas quickly get ridiculous.""automaticity"" => ""automatically""""Bitcoin uses"" => ""Bitcoin users""""phasing,"" => ""parsing"" (change word and remove comma)""Special User Facing Projects"" => ""special user facing projects"".
This whole document has strange capitalization like that above, was there some intention behind that?""have a too-high overhead"" => ""minimize overhead""I suggest:
> If there is a hard-fork which expands the number of transactions per block beyond the current 8191 limit, we will simply define a new `Bitcoin Display Format 1`.> Considering the considerable

Would remove ""considerable"" as this is a bit awkward and unnecessary.So we need a reserved value for every altcoin and altchain?Some wallet interacting with two testnet chains, say for two altcoins, should be enough motivation to assign testnets separate Magic values. If not, the wallet will need to carry around metadata with each transaction reference, since all the references will be for ""Any Test Network."" There would also be extra code to check if it's a testnet or mainnet and switch around handling based on that.I believe the plan is to move altcoin values to a SLIP, similar to SLIP-0044 and SLIP-0173.Then the plan is to have centralized registration of a limited set of arbitrary numbers again to...coin name? a url? Nack that.
We should use genesis block hash for identifying chains.@jtimon each other chain will need to provide their own Display Format to describe their own particular unique properties, some may not even have the concept of a ""genesis block hash"", even then how many bits should we allocate for all these different chain ""genesis block hashes""?

For any such standard, unless we allocate 128bit of space for the hashes, we must have some centralised lookup table that is DoS proof.  (I can prettily quickly generate 64bit of ChainID's.).

Edit: This concern is only when the genesis block-hash is checked and a Network has deliberately chooses to 'mine' a ChainID the same as another network. In reflection real-life this is not a concern; I think.  However it should-not be included as a salt."
jkauffman1,552,Proposed BIP modification,BIP141: Fix typo,closed,,,https://github.com/bitcoin/bips/pull/552,['bip-0141.mediawiki'],,,"['sipa', 'luke-jr']","@CodeShark @jl2012 @sipa I don't know for sure how to verbify ""Merkle"", but ""Merkelize"" seems wrong. It's referring to Ralph Merkle, not Angela Merkel.",
luke-jr,551,,"BIP 8 revisions: use height, and last-ditch FAILING status",open,,Same as #550 but without the mandatory signalling parts that apparently need further discussion later,https://github.com/bitcoin/bips/pull/551,"['README.mediawiki', 'bip-0008.mediawiki', 'bip-0008/states.png', 'bip-0008/states.svg']",,,,,
luke-jr,550,Proposed BIP modification,"BIP 8 revisions: use height, secure locked-in signalling, and enable setting lockinontimeout later",open,,@shaolinfry ,https://github.com/bitcoin/bips/pull/550,"['README.mediawiki', 'bip-0008.mediawiki', 'bip-0008/states.png', 'bip-0008/states.svg']",,,"['rustyrussell', 'kek-coin', 'shaolinfry']","Would also appreciate input from others, especially BIP 9 authors @sipa @petertodd @gmaxwell and @rustyrussell ","No.  This requires instant changes upon LOCKED_IN, which was never the intent.  Miners with BIP9 didn't have to change anything for 2 weeks.I like the simplification, though we had this debate before with BIP9 and the conclusion went the other way.  Historically, we create blocks 6% faster than the idealized number here, but that doesn't greatly interfere with either calculation.Clever, but too clever.

I would prefer to eliminate the lockinontimeout, as if it were always true.  That avoids debate and horse-trading.lockinontimeout was always just an implementation detail, BIP8 is a separate specification but reusing BIP9 code for simplicity. I have written a height based version that doesnt require this implementation detail

https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip8-heightIn my understanding the LOCKED_IN phase is a grace period to allow for laggard miners to upgrade without immediately losing profits. This change is a regression in that regard."
jameshilliard,546,,BIP User Activated Soft Fork Split Protection,closed,,Mailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014508.html,https://github.com/bitcoin/bips/pull/546,['bip-splitprotection.mediawiki'],,,"['kek-coin', 'luke-jr', 'Vaesper']","The SPLITPROTECTION part of the reference implementation does not seem to match the described behaviour; is this still ""todo""?@kek-coin What part specifically does not match?I'm not seeing the 65% or the 504 block-interval anywhere, and it is not clear to me (from the text or the code) if this is supposed to be a rolling window or a quarter of a difficulty retarget. The code seems to refer to a regular BIP9 state machine, and only enforces mandatory signalling during the LOCKED_IN phase; not during the ACTIVE phase, unless I am misreading.[This](https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1#diff-d6954440f0346f8e42dcd669dd4aeafaR158) is the interval and [this](https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1#diff-d6954440f0346f8e42dcd669dd4aeafaR167) is the percentage.This is just a revision to BIP 91. Please update the correct file.@luke-jr this is intended to be separate since it uses BIP8 style activation logic instead of BIP9 as well as a different threshold and version bitMinor implementation details of a young draft. Just change the existing BIP.@luke-jr I disagree that these are minor details, there are different risks associated with the activation methods.@jameshilliard I suggest closing this.","Suggest replacing

```
VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) == THRESHOLD_LOCKED_IN &&
```

with

```
(VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) == THRESHOLD_LOCKED_IN ||
 VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) == THRESHOLD_STARTED ) &&
```"
joshuayabut,545,New BIP,Mandatory de-activation of forced segwit deployment,closed,,This BIP supercedes BIP148 and outlines the methods and actions necessary to prevent unwanted network segmentation and forced isolation caused by non-consensual BIP148 and Segregated Witness deployment.,https://github.com/bitcoin/bips/pull/545,"['README.mediawiki', 'bip-0091.mediawiki', 'bip-0135.mediawiki', 'bip-0200.mediawiki']",,,"['mecampbellsoup', 'dabura667', 'kek-coin', 'achow101', 'luke-jr']","First of all, the other commits which are unrelated to your BIP should be removed and not part of this pull request. They do not belong here.

Secondly, this BIP number does not seem to have been assigned by the BIP editor. You are not allowed to assign your own BIP number; they will be assigned by the BIP editor if it meets the BIP standard.This seems to just be trolling. In any case, the BIP process requires public discussion on the bitcoin-dev mailing list prior to submission here. It also requires a reasonable copyright licence, so BIPs can be shared without restrictions. If this is to become a serious proposal, the trolling should be removed, a proper license chosen, and it must be discussed on the mailing list first.

Additionally, as @achow101 pointed out, there is no BIP number assigned for this, nor will there be until the minimum criteria have been met.

See BIP 2 for details on the BIP process.Ok I will implement this without your approval instead of jumping through your hoops Mr. UASF man.So you wanted to sell [a 6 year old ""0day""](https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772) for 500 BTC? Well, can't blame you for trying.> Ok I will implement this without your approval instead of jumping through your hoops Mr. UASF man.

You knew how the BIP process worked before making this.

You are just trolling so you can link this issue on /r/btc and get that sweet sweet karma.

I hope you get all the karma you wanted. Looks like you put a ton of effort into this troll.

Why don't you try submitting as a BUIP to Bitcoin Unlimited?Please don't feed the troll.","I think you are completely mischaracterizing the SegWit debate here. 

How do you expect the network to reach consensus when the majority of hashing power opposes SegWit SF activation due to the fact that it removes their ability to utilize covert ASICBoost? Why do you think, after all this time, SegWit has still not been activated by miners (where ""miners"" means essentially the 2 or 3 largest in the business which control the majority of hashing power)? 

These miners have ""agreed"" to the so-called Barry Silbert Accords from Consensus 2017. But I would be very surprised if push came to shove and those miners actually activated SegWit SF as [that plan](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013921.html) calls for. They have been stalling for nearly 2 years now, dragging the core developers along with them. 

There is no reason to be opposed to SegWit at this point as it's already been activated on Litecoin and the technical FUD has been debunked. SegWit effectively gives us bigger blocks (i.e. more transactions per block), something the miners point to as the reason they have been clamoring for an increased 2MB blocksize limit. 

I'm amazed that @luke-jr and @achow101 took the time out of their respective days to even respond to this piece of sh*t trolling effort. "
juwhankim,544,Proposed BIP modification,Create korean.txt,closed,,"Wordlist for Korean language.

Generated by the following process.
1. Original copy of ""Most frequently used Korean words for education purposes"", published by national language institute(2003), http://www.korean.go.kr/front/etcData/etcDataView.do?mn_id=46&etc_seq=71
2. Removed homonyms.
3. Removed words with less than 2 characters(Most Korean words are 2~5 characters).
4. Removed word pairs(or groups) that share first 2 characters, .i.e., selected words with unique leading 2 characters.
5. Randomly(in a uniformly distributed way) picked 2048 samples.
",https://github.com/bitcoin/bips/pull/544,['bip-0039/korean.txt'],,,"['junderw', 'Annyonghaseyo', 'dabura667', 'luke-jr', 'gnujoow']","Hooray! I was trying to get my Korean friends to do this for a while.

Is each word unique to the first two symbols?

Most languages are unique to the first x symbols so that it is easier to create predictive software keyboards.

Also, is the wordlist normalized with NFKD unicode normalization?

I will check once I can get to a computer.Also, are these all nouns? Verbs? A mixture?

For any part that has conjugation (verbs I understand can be ~da, ~yo, ~bnida depending on politeness) are they all the same conjugation? (I saw kayo, but maybe that's a noun? Because I also see a lot of ~da so I am guessing those are verbs)Also, there's a lot of ~hada words, which I understand is similar to ~suru in Japanese. These words tend to be of a noun + suru = ""do the noun"" type verb, so maybe removing the hada and just using the noun might be good.

What are your thoughts?Hello,

Wow a lot of questions. 

Let me try to go over some justifications. 

First thing to note about korean language is that it is an agglutinative one. Which means that ~~hada is, even though there's an repetitive postfix, a complete lexem. The configuration is usually 2~3 symbols + a postfix to define its part of speech. That's for the case of verbs, adverbs, and adjectives mostly. 

On the other hand, nouns tend to be shorter because they do not  contain trailing affixes. They are short usually in 2~3 symbols range. 

If one confines the selection of words to nouns and word roots, variety of word length becomes rather limited. However, there are also cases where ~~hada and ~~ alone are both legitimate words. 

Hence I removed all the cases in the frequently used dictionary that are in multiple forms. For example if there are zzz+hada and zzz, I removed both of them to avoid confusion. 

When summarized:
1. To strengthen variety of word length, I opted for mixing verbs, nouns, adverbs, and adjectives. 
2. After all the filtering I ended up with, out of ~5000 words, ~3000 words. Which I believe is a proper set to randomly pick 2048 words from. 
3. Repetition of hada hani and etc is intrinsic to Korean language. Every verb in its basic form ends ~~hada basically. For your pun and information, the ~~hada becomes ~~haetda for past tense, ~~haeseo for because of doing ~~, et cetra and et cetra.
4. For typical length of words in korean language I decided to make to first 2 symbols distinct. Considering that the characters are already composition of multiple syllables. For example, 닭 which means chicken is a composition of ㄷ(d) ㅏ(a) ㄹ(r) ㄱ(g), and it reads as darg. Hence, entropy wise one composed character in korean language is roughly equivalent to 2~4 symbols in roman characters. Converting back, by taking 2 unique characters in korean language, I am taking on the average 4~6 unique symbols in roman alphabets. That should agree well with the standard published in bip 39. 

However, I concur with your concern that structured repetition of hada might have undesirable impact on randomizing the seed. From what I know little, it should not affect the quality of the final seed because the mnemonic goes through many rounds of hashing, and hashing is all about distributing bits here and there. But well, I might as well be very wrong at the same time. 



나의 iPhone에서 보냄

2017. 6. 1. 오전 9:00 Dabura667 <notifications@github.com> 작성:

> Also, there's a lot of ~hada words, which I understand is similar to ~suru in Japanese. These words tend to be of a noun + suru = ""do the noun"" type verb, so maybe removing the hada and just using the noun might be good.
> 
> What are your thoughts?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
@slush0 @prusnak @voisine @ebfull I was talking to @Annyonghaseyo at the Tokyo Bitcoin Meetup last night, and she showed me several words which she claims are misspelled and flat out incorrect.

She also echoed the concern that ~hada words should be avoided, as there are a lot of words that stand on their own without hada and having to remember whether or not the word was being used as a verb or noun is not user friendly.

She is currently translating wallet apps so that her parents can use Bitcoin in Korea.

I asked if she could help look over the list, or recommend a new one, and she said she would look into it.I reviewed the list briefly and i found all words are acceptable as Korean.
but it still has homonyms, synonyms, informal, pairs(or groups) that share first 2 character words.

I would do this if it needs to fix@gnujoow Not being Korean nor having a deep understanding of Korean language, I feel underqualified to make comments, but I have been living in Japan for a majority of my life and have a native understanding of the language.

Under that context, when discussing with @Annyonghaseyo about the word list, I was concerned with all the -hada words.

In Japanese, 99% of the time when we use the equivalent which is -suru as a verb, the word before -suru is actual a noun (The 1% are a gerund nouns which make no sense alone without -suru after it)

Seeing the large number of -hada words, and speaking with my korean friend @Annyonghaseyo about it, she looked at a few and said ""oh yeah, this word is used without -hada, so is this one, and this one too"", etc. etc

Some people may choose to memorize the words, and if they are remembering tons of words and some of them use hada and some don't it will be difficult... so as a rule, when me and a few others decided the Japanese wordlist one rule we came up with was ""No -suru verbs""

I would appreciate more insight into how -hada works, and whether all these words actually require -hada or not, and if not I would suggest not using them.@ problem is not whether or not the words are actually in the Korean dictionary, but it is more about sense.
The words in this list seem to lack common sense in the way they were chosen and words are conjugated in weird ways, etc.

Example:

1.검은색/검정색 These two words both mean ""black""
2.값싸다(low price) is just a combination of price + cheap '값+싸다' so this should be replaced with a word that is not a combination of two words but rather it's own word.
3.근데 is a colloquial shortening of '그런데' and should not be used.
4.Adding -hada to adjectives and nouns to turn them into verbs would be confusing to remember, as you would have to remember not only the word but whether the word list contained the verb-ified -hada word or the original adjective or noun. This should be decided to do all as one or the other, and not mix. Since many words can be used with -hada, I suggest making the rule to NOT use -hada verbs.

Using words that have meaning in Korean is not enough for this wordlist, the word selection should have some common sense applied for the use case.
This list currently needs a lot of work.
A lot of words are not appropriate for the recovery phrase.
I think the Japanese word list uses common sense rules that could be used in a similar way for Korean.Added alternative list @ #570 As the alternative was ACK'd, this seems no longer applicable? Ping me if I need to reopen.",
Dorson,543,Proposed BIP modification,Update bip-0173.mediawiki,closed,,"Added the discussion part, because there is no other way to make comments.

No changes to the original text in any way.",https://github.com/bitcoin/bips/pull/543,['bip-0173.mediawiki'],,,"['sipa', 'luke-jr']","Discussions take place on the bitcoin-dev mailing list: https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

With regard to the comments, note there is no such thing as a ""segregated layer"". Segwit is simply an improvement to Bitcoin's layer 1 (the blockchain).

@sipa I assume NACK?As for the comment itself, I understand the desire to make the address reflect the type of output created, but I don't think it is very important (the sender typically shouldn't care what address type the receiver uses, as long as their software supports it), and certainly less worthwhile to encode in a human-recognizable manner than the application or chain/currency type. The address type proposed has a number of unused values available (15 through 31) in the header byte which can be used for non-segwit purposes (or extensions to segwit) later.

But NACK, this is not the place to put that discussion.",
vbmithr,537,,BIP39: fix french word list,closed,,* Remove 4 spurious bytes at start,https://github.com/bitcoin/bips/pull/537,['bip-0039/french.txt'],,,['dabura667'],"NACK

That's the UTF8 BOM marker (3 bytes `EF BB BF`). You should not remove that, as it will disable automatic encoding recognition for some apps.https://en.wikipedia.org/wiki/UTF-8#Byte_order_markHmm, ok.",
jl2012,535,,Replace BIP142 with BIP173,closed,,,https://github.com/bitcoin/bips/pull/535,"['README.mediawiki', 'bip-0142.mediawiki']",,,['luke-jr'],"The `Replaced` status is for BIPs that were previously Final/Active. Just make it `Withdrawn`editedPlease change the README table row colour:

> |- style=""background-color: #ffcfcf""
",
comboy,528,Proposed BIP modification,BIP66 comment typo fix,closed,,"I've been triple checking it, since I'm surprised it would stay there for so long unnoticed, but I've become pretty convinced there's a typo in that comment.

(sorry about the separate PR, didn't notice it when I was fixing the dead link)",https://github.com/bitcoin/bips/pull/528,['bip-0066.mediawiki'],,,['sipa'],"@comboy No, this is incorrect. The S element has a length descriptor, which follows the R element. This line is checking that that length descriptor is not outside the data array.Ah, not the length of the S element itself but the length byte, right, sorry about that. ",
luke-jr,523,Proposed BIP modification,"BIP 43: Reserve purpose codes for SLIPs, and describe a scheme for altcoins",open,,"@slush0 @prusnak 

cc @Arachnid",https://github.com/bitcoin/bips/pull/523,['bip-0043.mediawiki'],,,"['prusnak', 'jprichardson', 'Arachnid']",":+1:I don't mind@prusnak is that an ACK, or should I wait for @slush0 ?NACK on deterministic scheme for alts. BIPs are for Bitcoin only and should not dictate a scheme for alts: https://github.com/bitcoin/bips/pull/76#issuecomment-48480728 Plus, the wallets have determined a scheme using BIP44.

ACK on purpose code allocation for SLIPs though.It doesn't dictate anything, merely reserves a path for altcoin *standards processes* to use. BIP 44 does not suffice for this purpose. For example, see https://github.com/ethereum/EIPs/pull/600> merely reserves a path for altcoin standards processes to use. 

They can already do this. They can use any purpose constant they want. 

> BIP 44 does not suffice for this purpose. For example, see ethereum/EIPs#600

It suffices just fine - 10 wallets use it: https://github.com/ethereum/EIPs/issues/84#issuecomment-292324521 There was discussion about this over a year ago: https://github.com/ethereum/EIPs/issues/84

BIP44/43 are sufficient as-is. The only thing this PR should be concerned about is the reservation of the purpose constants for SLIPs.> They can already do this. They can use any purpose constant they want.

Without coordination, however, the chance of more than one coin using the same constant is very high.

> It suffices just fine - 10 wallets use it

The link you provide illustrates exactly why it _doesn't_ work well: the BIP44 scheme is poorly suited to coins that don't use UTXO mechanisms, resulting in different wallets interpreting it differently and using incompatible derivation paths. The 10 wallets you mention are using 3 different mutually incompatible derivation paths.",
chfast,520,"Proposed BIP modification, duplicate",Fix headers style in bip-0039-wordlists.md,closed,,,https://github.com/bitcoin/bips/pull/520,['bip-0039/bip-0039-wordlists.md'],,,['luke-jr'],Duplicate of #518 ,
jeffersoncarpenter,517,Proposed BIP modification,Update bip-0148.mediawiki,closed,,There is no need to increase the block size.,https://github.com/bitcoin/bips/pull/517,['bip-0148.mediawiki'],,,"['luke-jr', 'afk11', 'MickSHunt', 'shaolinfry']","@shaolinfry 

@jeffersoncarpenter Note this doesn't say it's needed, just that Segwit does it - which is true.Segwit is a blocksize increase.shaolinfry. the fixes are only for those using segwit keys. 
where as everyone else is still stuck in the 1mb base block and still able to malleate/quadratic spam and do the other things.
many people wrongly think that just activating segwit fixes all the stuff instantly for everyone.
it needs clarification that its not the activation of the block structure that matters, but who is using segwit keys@MickSHunt BIP148 is an activation mechanism, it's not necessary to detail segwit's semantics here.but for people to know what they are flagging for. its best they know what they will get if it does activate@MickSHunt Segwit is a blocksize increase. @luke-jr please close this pull request.Okay, sounds good.  This is just how segwit is defined.","Segwit disarms transaction malleability only for those opting to use Segwit keypairs, allowing them to make scripting easier to upgrade as well as bringing many other [https://bitcoincore.org/en/2016/01/26/segwit-benefits/ benefits]."
da2ce7,516,Proposed BIP modification,Explain that BIP148 may not lead to the activation of SegWit.,open,,"I found this quite non obvious; so I have made a pull request to fix the wording.

Yes, my last pull request was ill-conceived, thank-you as-always for the review.",https://github.com/bitcoin/bips/pull/516,['bip-0148.mediawiki'],,,"['jonathancross', 'luke-jr']","@shaolinfry 

Suggest moving this outside Specification, and explaining that segwit can be re-proposed as a normal UASF in this circumstances.@jonathancross, thank-you for your wording suggestions, I have adopted them in this pull request.","""_**before the end of** midnight_"" can simply be written as ""_**before** midnight_""  (I know you didn't write this part, but would be nice to update if making changes to this line)If the hashrate drops below 14% for a sustained 3.5 month period, it is possible that segwit will not be locked-in before November 15th 2017."
da2ce7,515,Proposed BIP modification,"Simplify UASF Activation Logic, and update specification.",closed,,"This Pull Request Enforces That SegWit is activated, even if the hash-rate is very very slow.",https://github.com/bitcoin/bips/pull/515,['bip-0148.mediawiki'],,,"['dooglus', 'mkwia', 'luke-jr', 'shaolinfry']","I disagree with this change.It's unclear to me how BIP 141 nodes will react to a post-timeout activation.@luke-jr from my understanding they will not enforce SegWit.You cannot change the activation parameters of another BIP mid deployment. BIP148 is it's own soft fork.I don't think this is a good PR.@da2ce7 but they may reject blocks as invalid because they fetch the full block, and don't consider witness data valid in it...Closing due to NACK from @shaolinfry ","""retagat intivals""?What happens to Core nodes if UASF nodes activate SegWit after November 2017? Core nodes will only recognize SegWit lock-in until November 2017."
da2ce7,514,,"Simplify UASF Activation Logic, and update specification.",closed,,"Updated BIP 148 Activation Logic, as the timeout of this BIP is completely redundant.",https://github.com/bitcoin/bips/pull/514,['bip-0148.mediawiki'],,,"['dooglus', 'shaolinfry']","@shaolinfry please review.I'm going to withdraw this pull request, as dealing with the logic for a very slow hash-rate after the enforced period starts.In case you arent aware of the discussions, the reason the date was moved to Aug 1 was exactly to handle a ridiculous drop in hashrate, regardless of how unlikely.There's no point in having this UASF active after the SegWit activation period has timed out.

From Bitcoin's `src/chainparams.cpp`:

        // Deployment of SegWit (BIP141, BIP143, and BIP147)
        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;
        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.
        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.
",
ghost,511,,20160201 status updates d2f,closed,,,https://github.com/bitcoin/bips/pull/511,"['.travis.yml', 'README.mediawiki', 'bip-0001.mediawiki', 'bip-0002.mediawiki', 'bip-0009.mediawiki', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0034.mediawiki', 'bip-0035.mediawiki', 'bip-0037.mediawiki', 'bip-0038.mediawiki', 'bip-0039.mediawiki', 'bip-0039/bip-0039-wordlists.md', 'bip-0039/italian.txt', 'bip-0043.mediawiki', 'bip-0044.mediawiki', 'bip-0045.mediawiki', 'bip-0047.mediawiki', 'bip-0050.mediawiki', 'bip-0060.mediawiki', 'bip-0064.mediawiki', 'bip-0065.mediawiki']",,,,,
da2ce7,509,New BIP,BIP ??: Opt-in Anti-Replay via Coinbase Generated Outputs (OP_ANTI_REPLAY),closed,,"Design of soft-fork that provides opt-in consensus-based protection from anti-replay attacks.
Hard-forking alt-chains would have to be explicitly malicious to avoid these anti-replay protections.",https://github.com/bitcoin/bips/pull/509,['bip-OP_ANTI_REPLAY.mediawiki'],,,['luke-jr'],"I'm not convinced this meets the technical soundness requirement. [Let's discuss on the ML?](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013845.html)Thank you for your feedback on the mailing list. I will close the pull request until I have addressed all the comments.

Many Thanks.


Sent from my iPhone

> On 29 Mar 2017, at 12:17, Luke Dashjr <notifications@github.com> wrote:
> 
> I'm not convinced this meets the technical soundness requirement. Let's discuss on the ML?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",
shaolinfry,507,,Correct code sample,closed,,Update to correctly match the specification and make more readable,https://github.com/bitcoin/bips/pull/507,['bip-0148.mediawiki'],,,['kanzure'],This seems to be re: https://github.com/UASF/bitcoin/pull/1,
marzig76,504,Proposed BIP modification,BIP 103: Adjust to reflect a new start date,open,,"Since the original start date, January 1, 2017, has passed, this change updates it to exactly a year later.",https://github.com/bitcoin/bips/pull/504,['bip-0103.mediawiki'],,,['luke-jr'],"@sipa 

Might be better to make it a dummy timestamp?",
michaelcourcy,502,,Public parent to public child,closed,,"I'm really not sure as I'm starting in this field. 
But the last operation to get the public child key from parent public key is a point operation on an integer thus :  

point(parse<sub>256</sub>(I<sub>L</sub>) + K<sub>par</sub>) 

and not a point plus adding an interger :

point(parse<sub>256</sub>(I<sub>L</sub>)) + K<sub>par</sub>",https://github.com/bitcoin/bips/pull/502,['bip-0032.mediawiki'],,,,I'm sorry I forgot K<sub>par</sub> was also a point. I close this pull request.,
jgarzik,498,New BIP,"Add BIP 100, as currently implemented.",open,,Constrained-increment hard fork size adjustments.,https://github.com/bitcoin/bips/pull/498,"['README.mediawiki', 'bip-0100.mediawiki']",,,"['MarcoFalke', 'dgenr8', 'jameshilliard', 'TheBlueMatt', 'AllanDoensen', 'zander', 'ftrader', 'luke-jr', 'earonesty']","It seems a bit late to be adding something from two and a half years ago as a ""Draft"". Are you intending to re-propose this (ie should probably, at this point, go through another round of mailing list or other community discussions) or are you adding this for historical reasons (in which case status should likely be ""Withdrawn"")?Missing ""Layer: Consensus (hard fork)"". Other preamble headers are out of order; see [BIP 2](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#bip-header-preamble).

Needs ""Copyright"" section.

Also, what do you mean ""as currently implemented""? No implementation exists AFAIK...@BlueMatt See http://bitcoinstats.com/irc/bitcoin-dev/logs/2016/01/07#l1452194490.0
for the discussion about having it archived here. Though, the current
commit seems to differ from the ""original"" bip100.
@jgarzik  You really should use a different BIP number to avoid confusion, I've brought this issue up [previously](https://github.com/bitcoin/bitcoin/pull/6451#issuecomment-165699173).Updated, diffs [here](https://github.com/jgarzik/bip100/pull/21).Pushed @dgenr8 changes to branch.Now it's missing the Comments headers entirely...@MarcoFalke While this does differ somewhat from the original BIP 100, it does IMO seem to be essentially the same technical idea, and therefore logically a later draft of the same proposal.As this is the first BIP 100 that is to be merged into the bips repo, any comparison to earlier drafts is not useful IMOHO.Please count my vote for accepting this BIP into the repo.NAK on merging as BIP100, to avoid confusion this should be assigned a separate BIP as this is substantially different from the original BIP100 proposal.> NAK on merging as BIP100, to avoid confusion this should be assigned a separate BIP as this is substantially different from the original BIP100 proposal.

Where is the original BIP 100 proposal? Is it in this repo?> Where is the original BIP 100 proposal? Is it in this repo?

I believe it was [this version](https://github.com/jgarzik/bip100/blob/b2b6fe99b5934bc55588bfa1ce7588f5fef61286/discussion.md#a-concrete-proposal--bip-100) or perhaps a slightly earlier revision that was published when miners first started tagging BIP100 in their coinbase sigs.As the blocksize can only move by 5% up or down, I do not see the point of signalling an actual MB amount as a vote. Only an up/down/unchanged indication is needed for voting.  @AllanDoensen It will be very helpful for planning to see where the network is going.  It also gives a chance to lobby miners if you think they are going somewhere undesirable.BIPs are not voted into the repo or not. They simply need to meet the criteria for inclusion outlined in BIP 2.I tend to agree with @jameshilliard. This should probably either have a section describing why it is so different from the original BIP 100 proposal, or should begin life as a new BIP (new ML discussion/announcement, etc). Looks like virtually every parameter has changed significantly since BIP 100.@TheBlueMatt For the BIP number assigners to have ignored the original document for so long, only to demand an explanation of why it has changed in the interim, wouldn't leave much room for interpretation as to the reasons, other than that they don't agree with the content of the BIP.
The number assigners could argue that BIP number 100 was self-assigned by @jgarzik.  However the number assigners were unresponsive to the proposal in the past, and the current implementation is very well recognized by the BIP100 label, with 7% of blocks referencing it along with independent web sites.
I'm confused, when did the original authors do the work to write up a more formal spec and submit it as a PR to this repo? It isn't Luke's job to follow up with all of the folks who get BIP numbers to make sure they put in the work.

On May 7, 2017 1:08:13 PM EDT, Tom Harding <notifications@github.com> wrote:
>@TheBlueMatt For the BIP number assigners to have ignored the original
>document for so long, only to demand an explanation of why it has
>changed in the interim, wouldn't leave much room for interpretation as
>to the reasons, other than that they don't agree with the content of
>the BIP.
>The number assigners could argue that BIP number 100 was self-assigned
>by @jgarzik.  However the number assigners were unresponsive to the
>proposal in the past, and the current implementation is very well
>recognized by the BIP100 label, with 7% of blocks referencing it along
>with independent web sites.
@dgenr8 How did we ""ignore the original document""? It's the job of the author to properly format and submit it as a PR. @jgarzik dropped the ball on that, not us.

It is my opinion that this current draft is sufficiently equivalent to be the same BIP, but that is based on my technical reading of the two, *not* a post-hoc justification for any perceived neglect or whatever.

Also, on what basis do you say the popular BIP100 references are in fact referring to this version of the draft, rather than the original one? Seems to me it is more likely the latter, since these references began long before this draft existed...This is the first BIP-formal write-up and appropriately documents what eventually emerged in the field.@luke-jr My view that a new BIP number should be assigned for substantial changes to this proposal has nothing to do with how long it has been, [I brought this issue up](https://github.com/bitcoin/bitcoin/pull/6451#issuecomment-165699173) back in 2015 and the changes back then were much smaller than those being proposed here.@jameshilliard I agree in principle that substantial changes to a long-standing BIP should require a new BIP. However, I do not agree that the changes in this draft vs the earlier one are in fact substantial.I would consider the following to be substantial changes:
- The removal of the 32MB hard upper limit.
- The initial deployment method, the original indicated that users consent to deployment while this assumes itself to be already deployed without user consent.
- The original proposal text [indicated the importance](https://github.com/jgarzik/bip100/blob/b2b6fe99b5934bc55588bfa1ce7588f5fef61286/discussion.md#high-hurdle-risky-hard-fork-required-to-change-policy) that nodes run exactly the same consensus rules while this one indicates itself to be compatible with Emergent Consensus where individuals do not run the same rules.@luke-jr coin.dance and nodecounter.com added their BIP100 tracking only after blocks with the new coinbase string format began appearing.@dgenr8 the BIP100 tag I'm seeing is still the same ""/BIP100/"" tag used back in 2015, and is still tracked by blocktrail in the same way it was back then, by using the same tag and BIP number for a substantially different proposal there's no way to tell which BIP100 variant the pool supportsIf we're adding this for historical reference (which initial comments seemed to indicate), then we should be adding the original proposal. It sounds, however, now, like folks are moving to re-propose this as a consensus change which they believe should be implemented in the future. While the specific broad strokes of this proposal are similar to what they used to be, the actual constants proposed are so drastically different that I'm not sure why we are considering it to be ""the same BIP"". After all, consider all of the other BIP 10X proposals which have nearly the same broad strokes but also different selected constants.As jgarzik stated that this ""is the first BIP-formal write-up and appropriately documents what eventually emerged"" I think it can only be considered as the first formal BIP100 submission.

I support entering this as BIP100.If users don't have a ""vote"" ... then this proposal is kindof useless.   UTXO-tagging via OP_RETURN with capability bits could be used to divine what active nodes are capable of.   (This could lead to privacy loss if someone doesn't use a common combination of bits.)@ftrader That's not true, there was a formal write up [here](https://github.com/jgarzik/bip100/blob/b2b6fe99b5934bc55588bfa1ce7588f5fef61286/discussion.md#a-concrete-proposal--bip-100) way back in 2015, it just hadn't been submitted to the BIP repo back then. It's quite clear that this altering of the original BIP100 proposal is an attempt to hijack the original support BIP100 had back in 2015 for a very different proposal. The BIP process is designed to document concrete proposals so that they can be vetted by the community, substantially changing the BIP halfway through this process makes it much more difficult to measure community support since it is no longer clear which proposal a company is supporting if they say they support ""BIP100"".","Might I suggest to avoid there to be a reference implementation?

Instead make the spec leading. The difference is that should two implementations disagree, we should follow the spec. With a reference implementation this is not the case, a reference implementation design means that the spec needs to be updated when the implementation changes.

See BIP 134 for example wording.How does one vote for sizes that aren't a round number of MB? For example, 0.5 MB blocks? (The original BIP 100 draft supported this by specifying the size vote in bytes.)This byte sequence is small enough that it may appear in random data. Why not just ignore EB and expect miners to set BIP100 if they want it?To clarify: The sigop limit is no longer fixed for all blocks [within the adjustment period], but varies from block to block based on its actual size?

This would seem to excessively complicate miner optimisation for no apparent gain...?Does this include or exclude witness data?Is this required by BIP 100? (Are blocks without this data invalid? Note that if so, you will be rejecting any blocks that signal a different EB size...) Or merely a recommendation?Note: This is a past block.

Why does the BIP only activate on increase, rather than equally so on a decrease?Using megabyte resolution for votes, with special meaning of ""no change"" for a 0 vote, means there is no way for hardLimit to go below 1MB.That's a pretty crappy and on-sided change compared to the original BIP 100! The rest of the BIP currently still assumes sub-MB resolution also.This is a recommendation, since BIP100 nodes don't rely on reading EB from each other and the published value is current limit (never a change from current limit).Clarify it in the BIP text, not simply reply to the review.. :pThis BIP does not build on segregated witness.  In conjunction with segwit, it seems clear that BIP100 would apply to the ex-witness limit, which is otherwise fixed at 1MB.  In that case we could expect the limit to grow more slowly.We take this risk after examining the blockchain for near-misses and not finding any.The reason is to allow miners to check the sigops limit without calculating the BIP100 limit.  Miners have begun to set their block size limit individually.Votes denominated in megabytes, and no other resolution, are specified.

This BIP offers a more deterministic path to miners who otherwise might rely on non-algorithmic coordination which is by nature size-unlimited.   Max growth is about 256%/year (not 1164%).

Next push will include README.mediawiki modification.The actual limit is byte-valued, votes are in megabytes.

A limit below 1MB is something virtually nobody wants.  But aside from that, raising and lowering are handled symmetrically.  Even though raise is checked first, there's no way for a raise and lower to win simultaneously.I agree, having one digit behind the decimal place would be useful.it already says ""example"", but the word ""complete"" may indicate it is spec. Replace 'complete' with 'elaborate' may clarify.Plenty of people want a limit below 1 MB today. Alienating us is not going to help you achieve consensus for a hardfork.1. It doesn't need to build on segwit, to clearly define how it interacts with segwit.
2. There is no ""ex-witness limit"" in segwit. The only limit is the weight limit at 4M units. Size is not limited directly at all.You mean nodes? Miners don't check the sigop limit, they conform to it, and having it based on the actual size (which is unknown at the time of block generation) greatly complicates that.(And if you mean nodes, then either they're light clients or full nodes. Light clients can't verify sigops at all either way, and full nodes need to verify the size limit regardless so can certainly calculate a sigop limit based on that.)I meant nodes.  There is a class of nodes out there that already implements this rule, but not BIP100.  The change to miner sigop check is simple, see miner.cpp line [204](https://github.com/bitcoinxt/bitcoinxt/pull/188/files#diff-4a59b408ad3778278c3aeffa7da33c3cR204). Proceeding MB-by-MB could handle high-sigop cases better.Uh, that logic looks very broken. Pretty sure I could craft a transaction that closes your block template after only <1k...You would be wrong luke, seems you misread the bip line you commented on.

I concur with dgenr8, your complaint is not an issue in practice.Removing the 1M lower limit would be a good idea as IMHO:
    1) It would lower the complexity of the code.
    2) If there is consensus to move the block size below 1M then it would allow that.
    3) It removes restrictions and artificial constraints on emergent consensus with respect to block size.  How the segwit 'weight' will scale should be defined in the segwit BIP.    @zander Thanks, heading changed to Implementations in next push.This is moved to a Recommendations section in next push.There wasn't a lower limit in the original BIP100 proposal, that's another reason this should be done as a separate BIP."
azuchi,496,Proposed BIP modification,BIP 143: Unify coin unit,open,,"In the example of BIP 143, the unit of coin output only 'No FindAndDelete' is described with satoshi. so  changed it to the value of BTC unit according to other examples.

```
scriptPubKey : 00209e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19, value: 200000
```

change to

```
scriptPubKey : 00209e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19, value: 0.00200000
```",https://github.com/bitcoin/bips/pull/496,['bip-0143.mediawiki'],,,"['jonathancross', 'luke-jr']","@jl2012 @sipa 

(IMO it should be the other way around, since we're dealing with low-level stuff here)I agree with @luke-jr – using values denominated in satoshi would make more sense in this context.",
ysangkok,495,Proposed BIP modification,"BIP 123: change ""Accepted"" to ""Proposed"" in initial classification table",open,,according to BIP 2,https://github.com/bitcoin/bips/pull/495,['bip-0123.mediawiki'],,,['luke-jr'],"@CodeShark Not sure if you want to update this or leave it for historical reasons.Why is this historical? It says ""Status: Active"".>  ==Classification of existing BIPs==		",
tenakakhan,494,,Create bip-tkhan-CCVS.mediawiki,open,,,https://github.com/bitcoin/bips/pull/494,['bip-tkhan-CCVS.mediawiki'],,,"['btcdrak', 'luke-jr']","P.S. I discourage even submitting this, as it has already been rejected, and as such it is a waste of everyone's time.This proposal has been soundly rejected on the basis of being unworkable, so it really doesnt make sense to publish it.@tenakakhan Please either address the issues or close this.","This header is invalid until the Process BIP is accepted.bitcoincore.org is a private website outside the purview of the BIP process.Proposing voting on hardforks is in itself a hardfork, so this wouldn't be exclusively a Process BIP. Acceptance of this BIP would require approval from the entire Bitcoin community.""Process"" is not a layer. This needs to be ""Consensus (hard fork)"""
zizelevak,493,Proposed BIP modification,Czech wordlist for BIP0039,open,,Consensus set of words after discussion in czech comunity in facebook group,https://github.com/bitcoin/bips/pull/493,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/czech.txt']",,,"['xHire', 'slush0', 'luke-jr', 'paveljanik']","@slush0 @prusnak @voisine @ebfull Wordlist passed our unit test in python-mnemonic. I especially like that words don't use diacritic. ACK for me.Is ""nynfa"" Czech word? orchest? peleton?@paveljanik thanx, you found two mistakes. Correct forms are ""nymfa"" and ""orchestr"". I fixed both mistakes. Peleton is OK, according Institute of the Czech Language http://ssjc.ujc.cas.cz/@zizelevak Check http://prirucka.ujc.cas.cz@paveljanik We both use databases from Institute of the Czech Language. You use only handbook, I use Dictionary of written languages, my database is more complex. Meaning of peleton: The peloton (from French, originally meaning 'platoon') is the main group or pack of riders in a road bicycle race. 
Edit: I explain peleton (older version of this post was explaining nymfa)@zizelevak More complex may not be always correct, see yourself: http://prirucka.ujc.cas.cz/?slovo=peloton – even referenced SSJČ states that ""peleton"" is incorrect form. By the way, Prirucka is currently the best normative reference available.@xHire @paveljanik Peleton was removed, Piksla was addedbariera: http://prirucka.ujc.cas.cz/?slovo=barierach after c?What about limitace -> limit?mincovna -> mince?motivace -> motiv, motorka -> motor?moudrost -> moudronikl? [nykl]: not found ;-) Is this a good word?normativ -> normanovotvar -> novota?odolnost -> odolatokovy -> okovotrhanec -> otrhatpopisek -> popisrobotika -> robot (Remember Karel Čapek's word ;-)
spornost -> sportankista -> tank?@paveljanik

changed bariera --> smaragd

ch after c? - worldlist is sorted by english alphabet, not by czech alphabet. Its simpler for implementation this wordlist in wallet software.

Limit - it is not possible use, its included in english worldlist
mince - it is not possible use, its included in french worldlist

""Motivace"" - I think its more suitable than ""motiv"" Both words have foreign orgin, but ""motivace"" has czech suffix -ace. 

motor - it is not possible use, its included in english worldlist

""moudro"" - I dont agree. ""Modrost"" is 50-times more frequent than ""moudro"" according czech corpus SYN2005

nikl - its OK its metal, chemical element with atomic number 28

norma - it is not possible use, its included in spain worldlist

changed Novotvar --> novota

""odolat"" - it is not possible, its simular to other word in wordlist ""odvolat""

""okov"" - Its part of well, ""Okovy"" it is shackles, I prefer Okovy, I think its more common

changed otrhanec --> otrhat

""popis"" - it is not possible, its simular to other word in wordlist ""dopis""
""robot"" - it is not possible use, its included in english worldlist
""tank"" - it is not possible use, its included in english worldlist@zizelevak Thanks for updates! Can you now please squash?

I'm fine with the list now. Great work, BTW! 👍 Ah, thanks for reminder (via notification), I also had some comments/questions, will post them later today (probably in the evening)! :c)I divide my comment into several groups to make it easier to work with. One thing to write first: while I make comments about some words, at the end I also provide a buffer of alternatives just in case it is unclear with what words potentially replace some of those problematic ones. (By the way, comments at the beginning of each section are mostly for non-Czech speaking followers.)

* Lhota (spelled as a name)

### Infrequently used/known words
In this list I include *also* (not only) words that I have never heard of. :c) It doesn’t mean I can’t just look them up, but I suppose they are so rare that they might not be so good to be in this dictionary.

* falzum
* gondola
* karfiol
* luneta
* nefrit
* nestor
* normativ
* opuka
* pagoda
* ponton
* rytec
* sahel
* sutana

### Words with different diacritics
There are some words in Czech that have dual spelling—one time without diacritics, other time with diacritics. Those I list below sound to me quite forced.

* chlor
* chrom
* folklor
* globus
* kasino
* kastrol
* lahev
* mixer → mixovat
* naftalen → nafta (but it’s probably already taken in another dictionary I suppose)
* ozon
* tampon
* vitamin → vitalita

### Plural forms
As stated in README, words should be in their base forms which means they should be in singular.

* holinky → holinka
* lenilky → lentilka
* piliny → pilina

### Words with (optional) spacing
So called „příslovečné spřežky“—words which are allowed to have their preposition transformed into prefix. Below are those I suppose are not so much more common in a single word form or might be confusing or don’t sound so well to me.

* nadlouho
* nadrobno
* natrvalo
* natvrdo
* navenek
* zdaleka

### Miner modification proposals
So as to make some words sound more natural or clearer.

* dominant → dominanta
* hltan → hltat
* kmit → kmitat
* logicky → logika
* mulat → mula
* muzika → muzikant
* naposled → naposledy
* pasivum → pasivita
* roup → roupice
* vespod → vespodu

### Forced forms of words
Technically correct, but (mostly) uncommon word forms (forced into these just to make them lose their diacritics).

* drtivost
* kalnost
* (kluzkost)
* (ladnost)
* levnost
* mokrost → mokro
* movitost
* suknice → sukno (suknice is really *so old* ;c))

### More like informal forms and/or not sounding neutral
(I know some are (probably) correct, they just don’t sound ideal to me.)

* fabrika
* fanda
* fara → farnost
* fiflena
* fixa → fixace
* glejt
* hafan
* hezoun
* kafe
* machr
* marodka
* mejdan
* nimrod
* piksla
* smola
* spratek
* (tatarka)
* vatra
* vloni → vloha
* (zrzek)

### Words I simply don’t like here ;c)
(Or I couldn’t decide in which other group to put them.)

* euro (not a Czech word and might also become deprecated soon)
* flirt → flamendr
* lepra
* (limitace)
* minibar → miniatura/minimalista (just wow, why to choose the word ""minibar"" among all those words prefixed with mini- :-D)
* (mocensky)
* nahota → nahodile/nahoru
* nevina
* (oktet)
* onkolog
* podle (more often is a preposition IMO)
* sekvoje (because it’s commonly spelled a tiny bit differently)
* sklivec
* tankista → tanker (if not already used elsewhere)
* tavenina → tavidlo
* tenor → teror/terorista
* tunika
* varan


## Alternatives
I counted 64 words without a suggestion in the upper lists. The words below are already checked not to collide on prefix level and many also on a single letter difference level. I have 58 of them which is 6 words short… So I put 6 or so words above into parentheses to indicate their lower priority. ;c) 

* borka
* celistvost
* deflace
* destilace
* dioda
* displej
* epopej
* firma
* fukar
* holokaust
* horda
* kabriolet
* kapybara
* klima/klimatizace
* kosmonaut
* kotoul
* kotrmelec
* kropit/tropit
* lamela
* litr
* lodivod
* lokomotiva
* loterie
* mela/melasa
* mydlinky
* nanometr
* nektarinka
* nora
* nutrie
* orangutan
* parabola
* peloton
* periskop
* pikolitr
* ponynka
* prahora (prahory? in this case, I’m tending to call it a plurale tantum, although it’s (strictly speaking) not the case)
* pranostika
* pruh/prut
* rakovina
* relevance
* rotoped
* rydlo
* seschnout
* sinusoida
* spokojenost
* stranou
* surikata
* tempo
* tiskopis
* titrace
* tranzistor
* traverza
* trend
* utiskovat
* vodivost
* vyrvat
* ziskovost
* zkontrolovat/zkonfiskovat
* zmutovat


I’m looking forward to hear your opinion! :c)@xHire 
Lhota - removed

falzum - removed
gondola - removed
karfiol - removed
luneta - removed
nefrit - removed
nestor - removed
normativ - removed
opuka - removed
pagoda - removed
ponton - removed
rytec - removed
sahel - removed
sutana - removed

chlor - removed
chrom - removed
folklor - removed
globus - removed
kasino - removed
kastrol - removed
lahev - removed
mixer → mixovat - OK, changed
naftalen → nafta - removed
ozon - removed
tampon - removed
vitamin → vitalita - OK changed

holinky → holinka - OK changed
lenilky → lentilka - OK changed
piliny → pilina - OK changed

nadlouho - removed
nadrobno - removed
natrvalo - removed
natvrdo - removed
navenek - keep it
zdaleka - keep it

dominant → dominanta (no, dominanta is too long)
hltan → hltat - OK changed
kmit → kmitat - OK changed
logicky → logika - OK changed
mulat → mula (no, mula is in spain worldlist)
muzika → muzikant - OK changed
naposled → naposledy (no, naposledy is too long)
pasivum → pasivita - OK changed
roup → roupice (no, I dont find roupice in dictionary and I never heard it)
vespod → vespodu - OK changed

drtivost - removed drtivost, zdrtit, added drtit
kalnost - removed
(kluzkost) - keep it
(ladnost) - keep it
levnost - removed
mokrost → mokro - OK changed
movitost - removed
suknice → sukno - OK changed

fabrika - removed
fanda - removed
fara → farnost  - removed (farnost have colision with marnost)
fiflena - removed
fixa → fixace - OK changed
glejt - keep it, its older word, no informal
hafan - removed
hezoun - removed
kafe - removed
machr - removed
marodka - removed
mejdan - removed
nimrod - removed
piksla - removed
smola - removed
spratek - removed
(tatarka) - removed
vatra - removed
vloni → vloha - removed
(zrzek) - changed to zrzavost

euro - removed
flirt → flamendr - keep it, flamender is 6-times less frequent
lepra- removed
(limitace) - removed
minibar → miniatura/minimalista - keep it, your words are too long
(mocensky) - removed
nahota → nahodile/nahoru - changed
nevina - keep it
(oktet)- removed
onkolog - removed
podle - removed
sekvoje (because it’s commonly spelled a tiny bit differently)
sklivec - removed
tankista → tanker - changed
tavenina → tavidlo - keep it, I never heard ""tavidlo""
tenor → teror/terorista - keep it, I try avoid words with terorism
tunika - removed
varan - keep it



borka - its very uncommon
celistvost - no, too many letters, 8 is max limit
deflace - OK added
destilace - no, too many letters, 8 is max limit
dioda - OK added
displej - OK added
epopej - OK added
firma - no, in spain wordlist
fukar - OK added
holokaust - no, too many letters, 8 is max limit
horda - OK added
kabriolet - no, too many letters, 8 is max limit
kapybara - OK, added
klima - OK, added
kosmonaut - no, too many letters, 8 is max limit
kotoul - OK, added
kotrmelec - no, too many letters, 8 is max limit
kropit - OK, added
lamela - OK, added
litr - no, simular to ""lotr""
lodivod - OK, added
lokomotiva - no, too many letters, 8 is max limit
loterie - no, in french wordlist
melasa - OK, added
mydlinky - no, its plural, and singular ""midlinka"" is uncommon
nanometr - OK, added
nektarinka - no, too many letters, 8 is max limit
nora - OK, added
nutrie - OK, added
orangutan - no, too many letters, 8 is max limit
parabola - no, in italian wordlist
peloton - OK, added
periskop - OK, added
pikolitr - no, its very uncommon
ponynka - no, I never heard this word and not found in dictionary
prahory - OK, added. plural is OK, its name of geological epoch
pranostika - no, too many letters, 8 is max limit
prut - OK, added
rakovina - OK, added
relevance - no, too many letters, 8 is max limit
rotoped - OK, added
rydlo - OK, added
seschnout - no, too many letters, 8 is max limit
sinusoida - no, too many letters, 8 is max limit
spokojenost - no, too many letters, 8 is max limit
stranou - no, first 4 letters same as ""strach""
surikata - OK, added
tempo - no, in italian wordlist
tiskopis - OK, added
titrace - no, its very uncommon
tranzistor - no, too many letters, 8 is max limit
traverza - OK, added
trend - no, in english wordlist
utiskovat - no, too many letters, 8 is max limit
vodivost - OK, added
vyrvat - OK, added
ziskovost - no, too many letters, 8 is max limit
zkontrolovat/zkonfiskovat - no, too many letters, 8 is max limit
zmutovat - OK, added

Added my new Words
dynamit
reflex
arogance
abdikace
linoleum
zhatit
svodidlo
hematom
manko
lomcovat
termoska
glazura
amputace
anulovat
hluchota
aspirace
sediment
rarita
skafandr
reputace
unavit
sponzor
mahagon
rubrika
veranda
koaliceWhat's the status of this?",
rodasmith,490,,remove duplicated paragraph,closed,,The first paragraph under Motivation was duplicated. This trivial edit removes the redundant text to leave a single instance.,https://github.com/bitcoin/bips/pull/490,['bip-0069.mediawiki'],,,,Closing. Fixed by @azuchi in #492.,
Christewart,487,,Specify which 1 byte push op codes are valid,open,,"This adds documentation to BIP141 about which 1 byte push op codes are valid for segwit. This is needed because `OP_1NEGATE` is a 1 byte push op code, but is NOT a valid 1 byte push op code for segwit. See the implementation here for why `OP_1NEGATE` is not valid: https://github.com/bitcoin/bitcoin/blob/14d01309bed59afb08651f2b701ff90371b15b20/src/script/script.cpp#L228",https://github.com/bitcoin/bips/pull/487,['bip-0141.mediawiki'],,,"['afk11', 'evoskuil', 'jonathancross', 'luke-jr', 'jl2012']","@CodeShark @jl2012 @sipa 

(Although I actually think it is clearer before this change...)'valid' was probably enough for this, or mention that only OP_1NEGATE is disallowed?@afk11 Reason ""valid"" was not enough, is that `OP_1NEGATE` is valid but not recognised as a witness script.maybe making a footnote to say OP_1NEGATE is not included?@luke-jr By your definition of 'valid' isn't any 1 byte value 'valid'? No, if it causes the script to fail, it is invalid.@luke-jr I've added a test case to inside of script_tests.cpp to test this, and the test case fails when we use `OP_1NEGATE`. Can you elaborate further on what you mean? 

https://github.com/Christewart/bitcoin/blob/segwit_invalid_op1negate/src/test/script_tests.cpp#L1446-L1452
```
$ ./test_bitcoin --run_test=script_tests/op1_negate
Running 1 test case...
Failed witness program of invalid program version
test/script_tests.cpp(1451): error: in ""script_tests/op1_negate"": check s.IsWitnessProgram(version,witProgram) has failed

*** 1 failure is detected in the test module ""Bitcoin Test Suite""
```
OP_1NEGATE does not cause a script to fail, it only causes the input spending it to be disallowed to include witness data.What is the status of this PR?
@luke-jr Are there specific changes you are requesting here?@luke-jr It does not allow a witness script to be spent properly, which is what the context of this BIP is no? You cannot have OP_1NEGATE as a valid witness version which is all I am trying to say. Having recently implemented this I agree that this section is poorly worded. IMO the issue isn't really that it is ambiguous with `OP_1NEGATE` but it is definitely not clear. I was going to bug this myself at the time. I've added my comments inline. There is no reason to refer to the script version as a byte, especially because it is not.

@luke-jr wrote:

> No, if it causes the script to fail, it is invalid.

The objection is that the BIP implies that it *is* valid, because it is a ""1-byte push opcode""...

@Christewart

The BIP actually says ""1-byte push opcode (for 0 to 16)"". Since -1 is not in the logical range 0..16 the BIP is technically correct, though it does require a reader to infer what is meant by ""for 0 to 16"". The numeric value of the opcode `OP_1NEGATE` *is* between the opcodes for 0 and 1..16, so that can add some confusion.

It is always better to be explicit, especially in a technical specification.","> consists of a select subset of opcodes (<code>OP_0,OP_1,OP_2,...,OP_16</code>)

This is incorrect as it implies *any subset* of 17 opcodes. The specification is *any member* of that set. It's also not clear what is meant by ""select subset"".

> The value of the first push is called the ""version byte"".

It is unclear what is the value of `OP_0`, since it's push/stack value is `[]` (not `0`), which isn't a byte and therefore cannot be a ""version byte"".

I suggest:

> A <code>scriptPubKey</code> (or <code>redeemScript</code> as defined in BIP16/P2SH) that consists of one opcode from (<code>OP_0, OP_1, OP_2, ..., OP_16</code>) followed by a data push of between 2 and 40 bytes gets a new meaning. The logical value of the first push (i.e. [0..16]) is called the ""script version"". The stack value of the second push (of [2..40] bytes) is called the ""witness program""
I think that explanation is pretty good. A nit is `script version` -> `witness version`. "
afk11,471,Proposed BIP modification,BIP39: mention hard limit of 1024 bytes,closed,,"By using SHA256 as a checksum and requiring a 32 to 1 ratio of entropy to checksum, we bound ENT to 8192 bits (1024 bytes), because CS has reached a maximum of 256 bits. Although it seems unrealistic, it is a hard limit, and not preventing it could lead to mnemonics that can't be decoded or other implementations can't verify. 

Libraries that expose encoding/decoding a BIP39 mnemonic should check:
  - whilst encoding, that the entropy size does not exceed 8192 bits, and that `entropyBits % 32 == 0`
  - whilst decoding, that the length of the encoded bit-string does not exceed 8448 bits

Context: https://github.com/bitcoinjs/bip39/pull/37 @dcousens @rubensayshi @voisine @prusnak",https://github.com/bitcoin/bips/pull/471,['bip-0039.mediawiki'],,,"['rubensayshi', 'prusnak', 'btcdrak', 'dabura667', 'luke-jr', 'dcousens']","Not necessary. Anyone making phrases that long are already breaking the BIP, anyways.

-1
-1 as well. BIP39 specifies valid sizes of 128, 160, 192, 224 and 256
bits. Anything else is not BIP39.
The BIP makes recommendations (feel free to correct me) Not being clear on this point is perhaps the reason for this PR in the first place?
No, it does not make recommendations. If the wording is not strong
enough, please change it.

I don't want to have several BIP39 wallets floating around which are not
compatible.
> The recommended size of ENT is 128-256 bits. 

I know if this is to be taken as written, wallets are already not compatible. (haskoin, greenaddress..) I guess when provided the formula and not told a max, people are going to experiment and see what they're comfortable with. Although there aren't many wallets with 768 word mnemonics (the max), I can't see why it's a problem?

https://github.com/greenaddress/GreenBits/blob/8d3057fd202ba61af9cab9a8bb7b0d27395a286c/app/libwally-core/src/bip39.c#L87
https://github.com/haskoin/haskoin/blob/6b66396eb18329727525577b56a58a8b13741dca/haskoin-core/tests/Network/Haskoin/Crypto/Mnemonic/Tests.hs#L33
Then they are not BIP39 compatible.

Loosing restrictions in BIP39 does not make the situation better (2
wallets which are not BIP39 compatible vs making all BIP39 wallets
incompatible).
> The recommended size of ENT is 128-256 bits.

@prusnak this is definitely not clear. 
It implies a recommendation,  not a rule.

There is no indication that sizes outside of that range are not BIP39 compatible.

**edit:** I don't care either way,  but as is,  it is not clear what implementations should be doing.
iirc most implementations that I have seen do not limit the size at all because the BIP only recommends certain sizes, it's never mentioned the BIP is limited to those sizes.

now properly defining that this BIP is restricted to 128, 160, 192, 224 and 256 would make it a BC break when libraries implement this limitation.

considering this has been ""out in the wild"" in this state for so long already and there's people using non ""recommended"" sizes it seem more sane to only limit the BIP to 1024 bytes, the point where things start to break horribly.
I don't know how to put it any more cleaner. If there are some broken
implementations of BIP39, that is their problem.

Let's rephrase the BIP if it is not crystal clear to everybody.

Anyone is free to start their own BIP if BIP39 is not enough for
their usage.

End of discussion. Please close this request. Thanks!
@prusnak @luke-jr what the ... 

the BIP until now has not being clear AT ALL on what the limits were, only the recommended size, not a single word about that being the LIMIT.

as a result there are implementations and usage in the wild that have gone over the recommended sizes and I think you should man up to the result of the poorly specified limits and adjust the BIP to match what has happened as a result of that instead of suddenly making a whole bunch of ""BIP39 compatible wallets""  become no longer BIP39 compatible because you are fixing the BIP to match what was in your head!

_disclaimer:_ Blocktrail is not BIP39 compatible, I don't have any incentive for this to go down either way except that I feel this is clearly WRONG
I tend to agree with @rubensayshi - the written specification is the specification, you can't declare the specification is whatever you _intended_ but didn't write down. Does the reference implementation test for these supposed limits?
I'm inclined to agree that existing implementations shouldn't be retroactively made incompatible with the BIP, _especially_ if Haskoin is one of such violations to this recommendation yet was accepted as an ""other implementation"". But the author has the final word on what changes to include in the BIP, so the only recourse would be to submit a competing BIP.
Reference Implementation
http://github.com/trezor/python-mnemonic
- no check for max length at all

Other Implementations
https://github.com/nybex/NYMnemonic
- no check

https://github.com/haskoin/haskoin
- max 64 bytes

https://github.com/Thashiznets/BIP39.NET
- max 1024 bytes

https://github.com/NicolasDorier/NBitcoin

https://github.com/bitpay/bitcore-mnemonic
- no check

https://github.com/bitcoinjs/bip39 
- no check

https://github.com/sreekanthgs/bip_mnemonic
- no check

Other Other Implementations
BitcoinJ
- no check
even the reference implementation itself does not limit itself to the recommended sizes.
> disclaimer: Blocktrail is not BIP39 compatible, I don't have any incentive for this to go down either way except that I feel this is clearly WRONG

@rubensayshi However you phrase it, the reality is - if you don't use 128-256 bits, but something out of this range, most of the BIP39 wallets won't be able to import this mnemonic you generated. I don't know what _your_ incentive is, but if you are generating mnemonics out of this range, it is clear that your incentive is not interoperability for your users.

And my point is that easier way to fix this ""mess"" (if there is any, TBH, I don't know how many users Blocktrail or hascoin has, but I doubt these are significant numbers when compared to other BIP39 wallets using the 128-256 bit range ...), is to make the standard more tight/specific (=interoperability) not more loose (=another meaningless standard which does not guarantee anything).
@prusnak I think you have this backwards. Someone who wants to implement a BIP will read the text look at the reference implementation and test vectors in order to ensure they faithfully reproduce the specification. In this case certain limits are not specified, not in text, not in reference implementation and not in test vectors. As such, I dont understand how you can claim compatibility based on intent. The specification and even reference implementation clearly allows higher limits.
@btcdrak Test vectors never included lengths different than mentioned in the BIP. Fixing of the BIP is in #472, I am pushing check to python-mnemonic now.

@rubensayshi if you want to be useful (and you already did by collecting implementations and their limits), please open issues/pull requests to implementations asking them to set limit between 128-256 bits

My rationale about why I am being so strict about this: If you are forcing user to write down more than 256 bits of entropy (24 words), then something is really wrong with your application design (hell, users often have problem writing 24 words down correctly ...). I won't change my mind unless someone comes up with a really solid argument, why storing more than 256 bits of entropy is needed. So far there was none.
",
iancoleman,468,Proposed BIP modification,Italian words may be up to 9 characters long,open,,"There are 151 words in the Italian wordlist that violate the maximum length of 8.

181: avvolgere - 9 letters
262: brillante - 9 letters
313: cartolina - 9 letters
330: cellulare - 9 letters
333: centesimo - 9 letters
359: cittadino - 9 letters
375: coltivato - 9 letters
386: congelare - 9 letters
389: conoscere - 9 letters
396: copricapo - 9 letters
467: descritto - 9 letters
469: desiderio - 9 letters
471: detersivo - 9 letters
540: elaborato - 9 letters
683: forchetta - 9 letters
696: freccetta - 9 letters
847: inoltrare - 9 letters
858: inumidire - 9 letters
879: labirinto - 9 letters
908: letterale - 9 letters
959: malinteso - 9 letters
967: manifesto - 9 letters
982: materasso - 9 letters
983: matricola - 9 letters
988: meccanico - 9 letters
1009: miagolare - 9 letters
1033: mnemonico - 9 letters
1041: monastero - 9 letters
1044: monetario - 9 letters
1052: morsicato - 9 letters
1058: movimento - 9 letters
1066: mulinello - 9 letters
1079: nanometro - 9 letters
1100: nevrotico - 9 letters
1111: norvegese - 9 letters
1131: occasione - 9 letters
1133: occidente - 9 letters
1134: occorrere - 9 letters
1135: occultare - 9 letters
1142: offuscato - 9 letters
1150: ologramma - 9 letters
1156: omissione - 9 letters
1161: onorevole - 9 letters
1169: orecchino - 9 letters
1174: orizzonte - 9 letters
1207: pacchetto - 9 letters
1215: palazzina - 9 letters
1238: patologia - 9 letters
1257: perdonato - 9 letters
1258: perforare - 9 letters
1259: pergamena - 9 letters
1263: perplesso - 9 letters
1270: pestifero - 9 letters
1273: petulante - 9 letters
1315: polmonite - 9 letters
1332: postulato - 9 letters
1344: prenotare - 9 letters
1345: preparato - 9 letters
1385: raddoppio - 9 letters
1396: rantolare - 9 letters
1401: raschiato - 9 letters
1404: rastrello - 9 letters
1406: ravveduto - 9 letters
1411: recondito - 9 letters
1419: relazione - 9 letters
1424: reprimere - 9 letters
1427: residente - 9 letters
1433: rettifica - 9 letters
1435: riassunto - 9 letters
1442: riciclato - 9 letters
1444: ricreduto - 9 letters
1452: rigettato - 9 letters
1454: rilassato - 9 letters
1459: rimorchio - 9 letters
1460: rinascita - 9 letters
1465: rinsavito - 9 letters
1468: rinvenire - 9 letters
1472: riportare - 9 letters
1482: risultato - 9 letters
1491: rivincita - 9 letters
1504: romantico - 9 letters
1528: saldatura - 9 letters
1543: satellite - 9 letters
1550: sbadiglio - 9 letters
1557: sbirciare - 9 letters
1558: sbloccato - 9 letters
1559: sbocciato - 9 letters
1561: sbruffone - 9 letters
1566: scambiare - 9 letters
1570: scatenare - 9 letters
1586: scomparto - 9 letters
1587: sconforto - 9 letters
1593: scrollare - 9 letters
1594: scrutinio - 9 letters
1600: sdebitare - 9 letters
1601: sdoganare - 9 letters
1602: seccatura - 9 letters
1606: segnalato - 9 letters
1607: segregato - 9 letters
1610: selettivo - 9 letters
1612: selvaggio - 9 letters
1627: serraglio - 9 letters
1631: settimana - 9 letters
1636: sfaticato - 9 letters
1642: sfoderare - 9 letters
1647: sfruttato - 9 letters
1653: sgonfiare - 9 letters
1655: sgrassato - 9 letters
1665: simpatico - 9 letters
1672: sinusoide - 9 letters
1678: slogatura - 9 letters
1681: smemorato - 9 letters
1709: sonnifero - 9 letters
1717: sorteggio - 9 letters
1718: sorvolato - 9 letters
1731: spelatura - 9 letters
1734: spettrale - 9 letters
1737: spigoloso - 9 letters
1741: splendido - 9 letters
1750: sradicare - 9 letters
1751: srotolato - 9 letters
1774: strozzare - 9 letters
1782: suggerito - 9 letters
1788: surgelato - 9 letters
1789: surrogato - 9 letters
1806: taciturno - 9 letters
1808: talismano - 9 letters
1816: tartaruga - 9 letters
1825: temerario - 9 letters
1831: tentacolo - 9 letters
1837: tesserato - 9 letters
1846: tipografo - 9 letters
1851: titubante - 9 letters
1855: tollerare - 9 letters
1862: topologia - 9 letters
1870: tostatura - 9 letters
1889: trifoglio - 9 letters
1893: tristezza - 9 letters
1894: triturato - 9 letters
1924: uncinetto - 9 letters
1926: ungherese - 9 letters
1928: unificato - 9 letters
1946: vaccinato - 9 letters
1947: vagabondo - 9 letters
1960: vantaggio - 9 letters
1977: vendemmia - 9 letters
1985: verticale - 9 letters
1992: viandante - 9 letters
1996: vicinanza - 9 letters
2004: vincitore - 9 letters
2009: virulento - 9 letters
",https://github.com/bitcoin/bips/pull/468,['bip-0039/bip-0039-wordlists.md'],,,['luke-jr'],"@slush0 @prusnak @voisine @ebfull 
",
jnewbery,461,Proposed BIP modification,[WIP] clarify BIP152 sendcmpct message exchange,closed,,"@TheBlueMatt - as discussed, this PR slightly clarifies the BIP 152 text:
- version must always be set to 1 (whether mode is set to 0 or 1)
- sendcmpct is reciprocal
",https://github.com/bitcoin/bips/pull/461,['bip-0152.mediawiki'],,,"['TheBlueMatt', 'luke-jr']","https://github.com/bitcoin/bips/pull/423 is a PR to update BIP 152 to include version 2 compact blocks (compact blocks with segwit).

Marking this PR as WIP for now. I may add suggested changes to https://github.com/bitcoin/bips/pull/423 .
What's the status here?","This seems to imply, to me, that a node should wait for a sendcmpct message before sending its announce, which it should not.
This seems to imply, to me, that you have to send a sendcmpct message with a 1 in order to announce using cmpctblocks, which isnt true, you only need to receive one.
"
achow101,455,Proposed BIP modification,Define the values for witness inv types,closed,,"Actually give the values for the witness inv types so people don't have to dig them out of protocol.h.
",https://github.com/bitcoin/bips/pull/455,['bip-0144.mediawiki'],,,['luke-jr'],"Why not just define them as numbers instead of trying to paste code that is missing references (MSG_BLOCK is undefined).
@CodeShark @sipa 
Closing in favor of #457 
",
MarcoFalke,453,Proposed BIP modification,BIP1: Update copyright requirements,closed,,"Please see discussion in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013164.html and #446:

Neither PD, nor OPL are acceptable open source ""licenses"". This pull changes BIP1 such that CC0 can be chosen as a legally valid alternative to PD and CC-BY-SA-4.0 as an alternative to OPL. Additionally, the BSD 2-clause license is added to the list of acceptable licenses, such that BIPs which are currently dual-licensed under OPL and BSD 2-clause can stay in the repo.
",https://github.com/bitcoin/bips/pull/453,['bip-0001.mediawiki'],,,"['kanzure', 'super3', 'btcdrak', 'petertodd', 'luke-jr', 'laanwj']","ACK https://github.com/bitcoin/bips/pull/453/commits/8310d7e89340e7b533e5af8dc18f26d6998669d5
ACK 8310d7e
@genjix 
~~NACK as @genjix is MIA, and will likely not give input. Would propose more work done on BIP 2, which replaces BIP 1, to fix #453 and #412.~~
@super3 Merging this does not delay BIP2 in any way, so I don't understand the NACK.

However, merging this sooner than later would help to fix the licensing issue which existed since day 1. I don't consider any input by @genjix is necessary prior to merging this, as pointed out in chat: https://botbot.me/freenode/bitcoin-core-dev/2016-10-01/?msg=74047486&page=2. But the final call is on @luke-jr for this one.

Don't get me wrong here. I am in favor of BIP2, but it is not clear how long it will take to get it out of the 'Draft' status...
@MarcoFalke Yes, I believe @genjix's input is not necessary to be merged, but I believe someone may have to take over as owner of BIP 1 if we are following the guidelines. That would be up to @luke-jr to decide. From [#412](https://github.com/bitcoin/bips/pull/412#issuecomment-250891565), it seems he would rather have BIP 2 accepted, than make improvements to BIP 1. 

Upon further research, I discovered that this was taken verbatim from the PEP 1, and considering #412 probably unintentionally so. I believe licensing choices should be made by the original author, but I can't find anything in @genjix's history to indicate any support of licensing and not just a copy/paste from PEP 1. 

If we are modifying BIP 1, than I suggest that the entire license block from BIP 2 should be used as a full fix. 
ACK https://github.com/bitcoin/bips/pull/453/commits/8310d7e89340e7b533e5af8dc18f26d6998669d5

If we're concerned about putting words in @genjix's mouth, I'd suggest we change the Author line to be ""Author: Originally Amir Taaki genjix@riseup.net, with subsequent modifications by others.""
ACK 8310d7e. Can find no evidence that OPL was intended by the author.
ACK 8310d7e89340e7b533e5af8dc18f26d6998669d5. Previously: https://github.com/bitcoin/bips/pull/446#issuecomment-249340245

A few more thoughts:

We should not recommend ""public domain"" without also mentioning (or perhaps linking to something about) not all jurisdictions working the same way. In the link that @btcdrak gave in https://github.com/bitcoin/bips/pull/446#issuecomment-249352029 the Creative Commons people mention that CC0 seems to work in most jurisdictions for public domain contributions ( https://wiki.creativecommons.org/wiki/Public_domain ), although we should probably just encourage people to think carefully about these issues instead of providing legal advice for all possible jurisdictions.

Also, while I personally prefer OSI-approved licenses, we should probably be wary of future OSI license changes which might inadvertently shifting the landscape out from under BIP1. Specifically when BIP1 says ""OSI-approved"" we should probably say something about ""conforming to xyz-date OSI principles/values"" or something. OTOH, perhaps nobody will ever get confused about why OSI is mentioned at all and this is a moot, nitpicking point.

OK with updating author line per @petertodd suggestion ( https://github.com/bitcoin/bips/pull/453#issuecomment-250940410 ).

OK with hearing proposals to change BIP1 maintainership as suggested in https://github.com/bitcoin/bips/pull/453#issuecomment-250934928

Not sure whether it's true that @luke-jr ""has the final call"" as mentioned in https://github.com/bitcoin/bips/pull/453#issuecomment-250929331 -- I know it was just a way of simplifying the discussion of course, that's fine.

As for this one:

> If we are modifying BIP 1, than I suggest that the entire license block from BIP 2 should be used as a full fix.

Uhh maybe; I looked and found another section that uses OPL to license BIP2-- and then later in the same doc it recommends against OPL.

> This BIP is dual-licensed under the Open Publication License and BSD 2-clause license.

I agree that bip1 should continue to be updated and clarified. I don't know what to do with bip2.
BIP 1 has been Replaced by BIP 2.",
jnewbery,452,Proposed BIP modification,Clarify BIP 112 language and fix typo,closed,,"Clarifies some language (eg replaces ""the relative lock-time type is not the same"" with ""the transaction input relative lock-time type (1 << 22) is not the same as the top stack item lock-time type (1 << 22)"") and fixes a typo ""the the""
",https://github.com/bitcoin/bips/pull/452,['bip-0112.mediawiki'],,,"['maaku', 'luke-jr', 'jl2012']","@btcdrak @maaku @CodeShark 
there is no transaction input version
Off-topic, but the nVersion field is stored in the UTXO database, so ""transaction input version"" could be interpreted to mean something. Off-topic because that's _not_ what is being checked by the code:

https://github.com/bitcoin/bitcoin/blob/49c5910372899a365fd6b57b9e227518e24541fa/src/script/interpreter.cpp#L1302

It is checking if the spending transaction, the one which contains the input, has an nVersion greater than 2.

Upon further review lines 30 and 31 probably deserve to be clarified, but I'm not sure the new text is better. Maybe @jnewbery can explain the confusion he had and was trying to correct?

The changes to lines 35 and 36 are deserving and look good.
@jl2012 , @maaku - thanks for your comments.
- line 28 - yes you're correct, there's no such thing as transaction input version. Sorry, probably overzealous search/replace on my part.
- line 30 - used to say `the relative lock-time type is not the same`, which begs the question: Not the same as what? It's not specified. I think it's clearer to say on one line which two values are being compared.
- line 31 - again, I think it's best to clearly specify which two values are being compared. The old text said 'transaction sequence' instead of 'transaction input sequence', and the `(when masked according to the BIP68)` is ambiguous language (the masking could apply to the sequence number, the top stack item, or both.
@maaku - did my comment answer your question? If so, are you happy to ACK this change?@maaku any update here?@maaku ping@luke-jr anything I can do to get these typo fixes/clarifications merged?Closing. BIP process seems broken if typo fixes can't be merged.",
dangershony,450,Proposed BIP modification,Adding a C# implementation (dotblock),open,,"dotblock is the C# library used by CoinVault to generate HD keys.
It's open source and available for anyone.
",https://github.com/bitcoin/bips/pull/450,['bip-0032.mediawiki'],,,['luke-jr'],"@sipa
",
gmaxwell,446,Proposed BIP modification,Remove OPL licensing option.,closed,,"The OPL enables the author to both prohibit modifications
 without their explicit approval, as well as enabling them
 to prohibit distribution in print form.

This is antithetical to the goals of having transparent,
 public, collaborative, community standards for interoperability
 and I don't believe it was anyone's intention here.
",https://github.com/bitcoin/bips/pull/446,['bip-0001.mediawiki'],,,"['kanzure', 'super3', 'MarcoFalke', 'btcdrak', 'luke-jr', 'laanwj']","I think a change like this really needs a new BIP.
ACK 3548ea23b624d0bd62f36b5bcd9cd08effca367c
@luke-jr As of a week ago it would have pretty much been a total no-op.

Tricky here, so what we have a BIP-1 saying you can do X but then a BIP-N that says you can't? not exactly the best documentation. I suppose what we'd need to do is create a BIP-N that supersedes BIP1.  ... I suppose it's good that BIP1 isn't an unmodifiable OPL document. :P
ACK 3548ea23b624d0bd62f36b5bcd9cd08effca367c. My contributions to BIP1 should be considered part of the public domain.

I think there are some jurisdictions where authors cannot place works into the public domain directly. Perhaps some alternative recommendation should be made for those cases. Maybe the Creative Commons people figured out what to do about issues like this.

By the way, it would seem that we keep running into weird text found in BIP1. We should really encourage more people to read BIP1. I made BIP1 edits within the past year for some basic formatting issues such as fixing how entire new sections which were appended at the end of a line that nobody had noticed for years. This particular error had even been copied into other projects such as EIPs......

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013164.html
Creative Commons wrote about PD copyright here https://wiki.creativecommons.org/wiki/Public_domain

I also think we should avoid BIPs turning into a mirror for how legislation works where you need to scour several documents to find out the law. I think BIP1 should be amended, even if it's entirely replaced. BIP1 is clearly different to the other BIPs since it is the document that describes and defined the BIP process. It is already hard enough to get people to actually _read_ BIP1 without them having to read and merge several references.
I think this makes sense. This was never the intention, just another result of copy-pasting carelessly from Python.
ACK
Concept ACK and I also agree with @btcdrak. BIP1 should always represent the current state of the BIP process/guidelines. I think it makes sense to incrementally improve BIP1 such that it converges to BIP2 over time. Otherwise we may run into the risk of not going anywhere, when it turns out that some people object specific changes of BIP2 and thus block any improvement that BIP2 tries to achieve.
@MarcoFalke Has there been any objections to BIP 2 in its current form? I can't find any. 
No, I am not aware of any objections, which does not mean that no objections will come up.
BIP 1 has been Replaced by BIP 2, which no longer allows OPL. Considering this fixed.","This sentence no longer makes sense.

I'd suggest the following:

``` mediawiki
* Copyright -- Each BIP must be explicitly labeled as placed in the public domain or licensed under at least one of the following licenses:
** BSD-2-Clause: [https://opensource.org/licenses/BSD-2-Clause OSI-approved BSD 2-clause license]
** CC0-1.0: [https://creativecommons.org/publicdomain/zero/1.0/ Creative Commons CC0 1.0 Universal]
** CC-BY-SA-4.0: [https://creativecommons.org/licenses/by-sa/4.0/ Creative Commons Attribution-ShareAlike 4.0 International]
```

This would allow us to keep all the BIPs that are currently not placed in the public domain instead of having to delete them.
A quick grep shows that the only BIPs with alternative licenses are:
- bip-0002:  dual-licensed under the Open Publication License and BSD 2-clause license
- bip-0145: dual-licensed under the Open Publication License and BSD 2-clause license

We should just try to get these re-licensed. I don't see anything under CC-BY-SA or CC0. Or I may have missed something?

BTW BIP1 **itself** also needs a copyright heading.
@laanwj Currently the copyright suggestions by BIP1 are a complete mess. I think we agree that OPL should be removed and at least BSD 2-clause be added, so we don't have to delete BIPs.

However, as we are touching this line anyway, we might want to provide an alternative for the public domain rule as well. As pointed out earlier, placing a work into the public domain is not possible (or even prohibited) in some countries. (c.f. http://opensource.stackexchange.com/a/1372)
Thus, choosing a license such as CC0, WTFPL, UNLINCENSE or similar is the legally ""proper"" way of placing a work in the public domain. To the best of my knowledge, CC0 seems to be the preferred way of placing something in the public domain.

Right now, adding CC0 to the acceptable licenses by BIP1 is a noop, but it would solve the issue in the future where a BIP author just wants to place the BIP into public domain and thus has to dual-license as BSD 2-clause and CC0, because just CC0 is not accepted by BIP1.

(I understand that my suggestion to add CC-BY-SA may be controversial, and I don't care too much, so we could just leave this for ""later"")
Would be helpful to put this effort into reviewing and finalising BIP 2...
@MarcoFalke I agree.

@luke-jr Heh yes, this is typical scope creep. @gmaxwell 's point here is to get rid of a license that is clearly not a good idea for this kind of thing. Enumerating which licenses **are** a good match for the BIP process is important, but maybe for another time.
@laanwj We did the latter several months ago, but it got held up by arguments over what wiki to use for the (unrelated) BIP Comments. Might as well just finish it...
Though, I don't see what advantage there is to create another BIP to supersede BIP1, when it is possible to just amend BIP1. This will save a lot of confusion and time.
"
rebroad,443,Proposed BIP modification,Remove filterclear,open,,"This message (filterclear) isn't included in the reasons for moving bloom services into a opt-out service.

Also, filterclear is a useful way for nodes to start with TX relay off and to request TX relay later. (e.g. during IBD).

Discussed in https://github.com/bitcoin/bitcoin/pull/8709
",https://github.com/bitcoin/bips/pull/443,['bip-0111.mediawiki'],,,"['petertodd', 'TheBlueMatt', 'luke-jr']","@TheBlueMatt @petertodd 

I think it's too late to change this, though...?
The context is https://github.com/bitcoin/bitcoin/pull/8709
I support the idea, but the text needs to note that some versiond do ban for filterclear, but it is very strongly recommended (maybe MUST) that new versions do not do so.
Given the low consequences for connecting to a peer without this change - getting disconnected - I think it's reasonable to change this behavior and just phase it in over time. Also as @pstratem notes, reconnecting after IBD is sufficient for now: https://github.com/bitcoin/bitcoin/pull/8709#issuecomment-248200651 (which retry logic in your implementation may very well do anyway!)
So is that an ack, or does it need changes? (What's the status here?)This needs some text to note that some nodes on the network will additionally disconnect for filterclear, but new implementations MUST NOT do so.@rebroad Please either finish or close this...",
Bohdat,442,Proposed BIP modification,BIP39: Added ukrainian wordlist,open,,,https://github.com/bitcoin/bips/pull/442,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/ukrainian.txt']",,,"['nym-zone', 'slush0', 'greenaddress', 'voisine', 'zerko', 'luke-jr']","@slush0 @prusnak @voisine @ebfull 
this needs to be NFKD normalized, which you can do with the following perl script:

```
#!/usr/bin/perl

use Unicode::Normalize;
use strict;
use warnings;
use open qw(:std :utf8);

while (<>) {
    print NFKD(""$_"");
}
```
Looks good to me, but I'd like a second ukranian speaker to go over the list and verify it meets the word list criteria before ACKing
we reviewed the words (ukranian speaker) and they look OK - however the list doesn't seem sorted (run sort on it, export LANG=C first if you don't have it set).

If sorted it allows faster processing (binary search) and we think it is worthwhile doing it.
Doesn't look like words are identifiable by first four letters.
Script for validating all BIP39 defined rules (like uniqueness of first four letters) is here:
https://github.com/trezor/python-mnemonic/blob/master/test_mnemonic.py

Maybe it will need fixes for UTF-8 (eventually slight rewrite for python3 which handle UTF much better), but passing such tests is needed for adding into BIP.
Okay, I run test_mnemonic.py (with Python3 - with no problems) and it gave me such list of duplicates: http://pastebin.com/ztBqDT9q

There were some other minor errors, but this need some work.
At nym-zone/easyseed@08a05b4, I have created a [bugfixed `ukrainian.txt`](https://github.com/nym-zone/easyseed/blob/08a05b40e794ab8a8937947b2620db3d9dcdd6db/wordlist/ukrainian.txt) which is NFKD-normalized and binary-sorted, and fixes one technical bug.

The `ukrainian.txt` from Bohdat/bips@152fc59 contains a trailing space (`0x20`) then tab (`0x09`, `'\t'`) after the word at original index 1393 (1-based line number 1394), before the newline `'\n'`.  The problem was first identified by failure of [easyseed](https://github.com/nym-zone/easyseed)’s extensive internal self-tests, followed by examination with `cmp(1)` and hex dumps to diagnose the difference between the wordlist in my source tree, and the wordlist printed on stdout by `easyseed -W -P -l uk`.

The following commands pinpoint the problem:

```
$ grep -E '[[:space:]]$' ukrainian.txt | hd
00000000  d0 bf d1 96 d1 81 d0 bd  d1 8f 20 09 0a           |.......... ..|
0000000d
$ echo ""\""`grep -En '[[:space:]]$' ukrainian.txt`\""""
""1394:пісня 	""
```

(@dabura667, perhaps you may want to add that to your punch-list of technical checks.)

It is fixed with the following command:

```
$ sed -E -e 's/[[:space:]]+$//' < ukrainian.txt > ukfix1/uk_fixed0.txt
```

After verification that this command made no other changes, the list is normalized and sorted:

```
$ ls -l ukrainian.txt ukfix1/uk_fixed0.txt
-rw-r--r-- 1 user user 24550 Jan  7 21:26 ukfix1/uk_fixed0.txt
-rw-r--r-- 1 user user 24552 Jan  7 20:31 ukrainian.txt
$ diff -u3 ukrainian.txt ukfix1/uk_fixed0.txt
[...showing only the desired line changed...]
$ uconv -f utf-8 -t utf-8 -x '::nfkd;' < uk_fixed0.txt | \
	LC_ALL=C LANG=C sort -s > uk_fixed1.txt
$ mv -i uk_fixed1.txt ../../easyseed/wordlist/ukrainian.txt
mv: overwrite '../../easyseed/wordlist/ukrainian.txt'? y
```

SHA-256 hash for the resulting `ukrainian.txt`:
```
612ee29e1fa13dc38c9e1b31c7ef980db8f3c8dd30f1c9377170d1b10e895dc9
```",
jl2012,438,Proposed BIP modification,Clarify BIP66 examples,closed,,"""returning false"" and ""fails"" are different. In the former case, the script evaluation will continue and the overall result could be a true value.
",https://github.com/bitcoin/bips/pull/438,['bip-0066.mediawiki'],,,"['sipa', 'luke-jr']","@sipa
@jl2012 This is in the 'examples' section, and the code snippets are full scripts. You're right that there is a distinction between fails and returns false, but only for individual opcodes. For the whole script, the outcome is just true or false.

Perhaps some clarification is useful, but I think this change is just adding confusion.",
greglaun,437,Proposed BIP modification,Spelling: resistance -> resistant,open,,"I believe it means to say that the Lamport signature is ""quantum computing resistant"".
",https://github.com/bitcoin/bips/pull/437,['bip-0141.mediawiki'],,,"['CodeShark', 'luke-jr']","@CodeShark @sipa @jl2012 
small nit: ""systems"", ""Lamport signatures"", and ""witnesses"" should be plural, so the sentence should read:

""Examples of new script systems include Schnorr signatures which reduce the size of multisig transactions dramatically, Lamport signatures which are quantum computing resistant, and Merklized abstract syntax trees which allow very compact witnesses for conditional scripts with extreme complexity.""
@CodeShark I agree. I was trying not to be too fussy. I added new commits that make the pluralization uniform. Let me know if you prefer it without the semicolons.
",
bijeebuss,436,Proposed BIP modification,BIP45 modification or new BIP: Multiple Multisig Accounts,open,,"Add an account_index to the address derivation tree, following the standard in BIP44. This way multiple multisig accounts can be created under the same master key allowing users to restore multiple multisig wallets with one mnemonic phrase.
",https://github.com/bitcoin/bips/pull/436,['bip-0045.mediawiki'],,,"['maraoz', 'jonathancross', 'btcdrak', 'luke-jr']","@maraoz @matiu 
@bijeebuss I suspect this is too late, but pinging the authors for the decision.
@luke-jr if its too late perhaps this could be a new BIP with a different purpose index
@bijeebuss We specifically left out the `account_index` from BIP45, which is based on BIP43 only (not BIP44). 

@matiu is the main maintainer of copay though, which spawned the creation of this BIP, so I'd defer to his judgement.  
@matiu is not available for a few week afaik. He also was talking about documenting BIP48 on his return.
Ping @matiu",
farazdagi,432,Proposed BIP modification,BIP39: Adds Russian word list,open,,"I've tried to follow guidelines defined in other languages.
",https://github.com/bitcoin/bips/pull/432,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/russian.txt']",,,"['nym-zone', 'greenaddress', 'dabura667', 'jonathancross', 'ZilvinasKucinskas', 'ValleZ', 'Bohdat', 'voisine', 'Sjors', 'UdjinM6', 'luke-jr']","Also

итак
когда
кроме
кстати
куда
либо
ловко
между
наверх
назад
налево
нигде
никак
нынче
однажды
около
откуда
отнюдь
отсюда
оттого
оттуда
плохо
полтора
помимо
поперек
почему
против
путем
пятеро
пяток
пять
ранее
сбоку
сверху
сегодня
сейчас
сзади
слегка
смело
снизу
снова
совсем
сорок
сразу
также
твой
теперь
тогда
тоже
точно
триста
туго
туда
уйма
целиком
четыре
явно
якобы
ярко
ясно

All of these above do not fit noun/verb/adj criteria - should be removed or mentioned in criteria imo. There also are some ""numeric-like"" words like ""первый"", ""тысяча"" etc which I'm not sure about too but probably they are ok.
@UdjinM6 Thanks for comments, will go through them today, and push updated list to this PR.
I've spend considerable amount of time manually going through word list and:
- applying all suggestions made above (thanks again @UdjinM6)
- making sure that only nouns/verbs/adjectives are used (mostly nouns)
- making sure that words are distinct enough from each other (improved Levenshtein distance)

Please review and let me know if there are any issues left.
Very nice! IMO the list looks much better now 👍 

PS. And btw, thanks for submitting this PR!
@slush0 @prusnak @voisine @ebfull 
Here is some very familiar words I have found:
арка арфа
банк танк
бард барс
батон бутон
бинт бунт
бочка точка
брак брат
букет буфет
вахта шахта
весть честь
взвод вывод
взор узор
влияние слияние
волк воля
волк толк
вход уход
глава слава
гном гром
губа гуща
губа шуба
дата хата
день тень
диск риск
дума душа
душа суша
жара фара
задор затор
замок зарок
игла игра
имение умение
кабель кафель
кабель табель
капля цапля
катер шатер
козел котел
койка кошка
конверт концерт
корнет корсет
кубок кусок
куча туча
лента рента
лечение течение
магия мафия
метр мэтр
модель модуль
мост рост
народ наряд
нация рация
нейлон нейрон
нива ниша
нить шить
нога нота
норма форма
нота рота
олень осень
оплата уплата
ответ отчет
паек парк
пакт факт
пальто сальто
певец перец
пена цена
петь путь
петь сеть
пила пища
пила сила
план плац
плита элита
повар товар
пруд труд
пугать ругать
путь суть
река рука
сбруя струя
сеть суть
слон стон
смена стена
сосед сосуд
удав удар
хобот хохот
цинк цирк
чадо чудо
челнок чеснок
штаб штат
this needs to be NFKD normalized, which you can do with the following perl script:

```
#!/usr/bin/perl

use Unicode::Normalize;
use strict;
use warnings;
use open qw(:std :utf8);

while (<>) {
    print NFKD(""$_"");
}
```
reviewed the words - looked OK. The list of words is also sorted so that's great.
NFKD normalization needed.

Be sure to resort after normalization.

Japanese forgot to do so, :-( (oops!)
Ping @farazdagi – Seems this still needs to be normalized?A general observation about adding more languages to BIP 39 is that English now has broad wallet support. If a new language is only supported by a small number of wallets, this could lead to (unintended) vendor-lockin.

If someone writes down their mnemonic and puts in a vault, they should be able to take it out 50 years later and have a reasonable chance of finding software that can still import it.

Perhaps getting BIP 39 (or something similar) recognized as an ISO standard would be a good step towards durability, before adding more languages.@Sjors BIP39 states

> The conversion of the mnemonic sentence to a binary seed is completely independent from generating the sentence. This results in rather simple code; there are no constraints on sentence structure and clients are free to implement their own wordlists

And

> software must compute a checksum for the mnemonic sentence using a wordlist and issue a warning if it is invalid.

Which means ""If you can't detect (or don't know the wordlist) the checksum, show a warning, but ALLOW THE SEED TO BE GENERATED""

But almost every single wallet used their ""developer common sense"" which states ""if there exists a checksum. Always check it, and always fail loudly and stop everything""... which makes sense.

It is the fault of BIP39 which was made to contradict developer common sense that is at fault.

But to be honest. Electrum supports all BIP39 wordlists, because it actually follows the BIP, and if it doesn't recognize the wordlist, it shows a warning but generates the wallet anyways. I have recovered many wallets using Electrum.

Ironically, Electrum's developer pointed out this contradiction, the authors ignored it, Thomas asked to have his name removed because of this and other problems, and now Electrum is the only wallet that implements BIP39 correctly in this aspect.
  At nym-zone/easyseed@234c66c, I have created a [Unicode NFKD-normalized and binary-sorted `russian.txt`](https://github.com/nym-zone/easyseed/blob/234c66cd5d3b878ee4df2138fdc5c179e65dc612/wordlist/russian.txt) from farazdagi/bips@a59cc3e as modified by approximately the following command:

```
uconv -f utf-8 -t utf-8 -x '::nfkd;' < russian.txt | \
	sort -s > normalized/russian.txt
```

(I originally forgot to force the `""C""` locale for `sort(1)`; but I later checked, and found it did not make a difference for this list in my environment.  It did make a difference for the proposed Ukrainian and Czech lists.)

The *result* has been confirmed to not have a leading BOM, and to have a final line terminated with '\n' (#622).  I did not yet examine the source for these issues.

SHA-256 hash for the resulting `russian.txt`:
a8d7b9d8bdd3816eddd2aeb98718ad586d8e7dd8c364a944c072cdf3cd6bcb05@Sjors:

>A general observation about adding more languages to BIP 39 is that English now has broad wallet support. If a new language is only supported by a small number of wallets, this could lead to (unintended) vendor-lockin.
>
>If someone writes down their mnemonic and puts in a vault, they should be able to take it out 50 years later and have a reasonable chance of finding software that can still import it.

The answer to vendor lock-in is independent implementations.  BIP 39’s simplicity facilitates that.  In ten days of occasional side-work, I have written a [BIP 39 implementation](https://github.com/nym-zone/easyseed) with extensive self-tests which generates mnemonics in any language for which a wordlist is available in the BIP repository.  It can output a BIP 32 `xprv` extended master private key for wallet restoration (although this feature is not yet documented in the [manpage](https://raw.githubusercontent.com/nym-zone/easyseed/master/easyseed.1.txt)).  Restoration to `xprv` from a user-input mnemonic in any language will be added in the near future.  This is written in standard C/mostly standard POSIX.  Anybody with technical competence who urgently needed to restore a wallet could whip up a barebones/no-tests/no-checksum-check/no-manpage mnemonic-to-`xprv` tool as a little afternoon project.

I have C code on my disk with copyright dates from almost 40 years ago—actually, if memory serves, the oldest date I have seen in my platform’s source tree is exactly 1978.  Likewise, I expect that my freely available C11 code will compile with minimal changes for decades to come.

When such tools are available and easy to produce *ab initio*, where is the vendor lock-in?  Wallets don’t need multi-language support to restore from an `xprv`.

I am glad to see new languages being proposed and added.  The important part is to get the wordlist right before it’s carved into the standard, baked into implementations, and used for wallets containing actual people’s actual money.  *That* is important.So is it ok to implement this Russian wordlist in the wallet?

What are the rules of accepting language to BIP39 by the community?You can implement any wordlist you want, and Electrum will properly recover it. (Though it will not detect checksum errors)

Other wallets are poorly implemented.","""бывать"" and ""быть"" are too similar imo and I would exclude both of them tbh 
""ветвь"" and ""ветка"" are very close synonyms, should probably pick only one?
""дошлый"" is rare/little-used word, probably not a good candidate
""жрать"" is kind of vulgar form of ""eat"", I would remove it
""книга"" and ""книжка"" are too close imo, I would remove ""книжка""
""лондон"" is the name of the city (London), should be removed imo
""москвич"" is either the name of Russian automobile brand or it means ""the one who is living in Moscow"". In either way it's not a good candidate imo.
""париж"" is the name of the city ""Paris"", should be removed imo
""решать"" and ""решить"" are too close imo
""рожа"" is a vulgar form of ""face"", could be removed probably
""россия"" is the name of the country ""Russia"", not sure if it's a good candidate here
""сибирь"" is the name of the region in Russia - ""Siberia"", probably not a good candidate
""украина"" is the name of the country - ""Ukraine"", probably not a good candidate
""ум"" is too short
""франция"" is the name of the country - ""France"", probably not a good candidate
""целое"" and ""целый"" are probably too close
""эстония"" is the name of the country - ""Estonia"", probably not a good candidate
""япония"" is the name of the country - Japan, probably not a good candidate
адажио is a quite rare word, is it okay to use it here?"
jonasschnelli,422,Pending acceptance,"Promote Draft->Final BIPs: 68, 112, 113",closed,,,https://github.com/bitcoin/bips/pull/422,"['README.mediawiki', 'bip-0068.mediawiki', 'bip-0112.mediawiki', 'bip-0113.mediawiki']",,,"['btcdrak', 'luke-jr']","Could you please add a section ==Activation== which details the height at which activation occurred?

Something like ""This BIP was activated on mainnet at height #xxxxxxx""
@btcdrak That belongs in a separate PR, which is to be ACK'd by the authors only.
Merged as c98859fe20617df141da0dd08d399921c7097be9
",
dcousens,413,,Promote BIP9 to accepted,closed,,,https://github.com/bitcoin/bips/pull/413,"['README.mediawiki', 'bip-0009.mediawiki']",,,"['rustyrussell', 'petertodd', 'luke-jr', 'laanwj']","You need to update the index table as well.

Was this status change discussed on the mailing list?
> Was this status change discussed on the mailing list?

Unaware,  as I have don't track the mailing list.
I was simply probing the discussion given its status.

Feel free to close if it needs to do that first.

PS. Added d77d3aa, updating the README.
This status change only requires the Authors to ACK it at this point. (Transitioning to Final is another matter.)

One thing that may deserve consideration, however, is whether this BIP belongs to the Accepted/Final status realm at all, or instead to the Active status.

@sipa @petertodd @gmaxwell @rustyrussell 
> One thing that may deserve consideration, however, is whether this BIP belongs to the Accepted/Final status realm at all, or instead to the Active status.

As it is ""Informational"" and not ""Standards-Track"" that's a good point
Luke-Jr notifications@github.com writes:

> This status change only requires the Authors to ACK it at this point. (Transitioning to Final is another matter.)

Acked by me.  I've leave the track/status question to you, however.

Thanks!
Rusty.
ACK
This has been taken care of
",
super3,412,Proposed BIP modification,Fix Reference to Non-Existent BIPs,closed,,"This document was derived from PEP-0001. This line makes reference to BIPs 8 and 7, which don't exist. These are leftover refrences to Python PEPs which establish guidelines for code styles.
",https://github.com/bitcoin/bips/pull/412,['bip-0001.mediawiki'],,,"['jonathancross', 'laanwj', 'luke-jr', 'MarcoFalke']","Thanks for actually reading BIP 1 :) As I've complained before, it's probably the least read 'important' document in bitcoin history.

Shameful ACK

TBH I think you can remove ""code style"" completely there, BIPs hardly contain code, and if they do (as BIP66 does) there's no code style guideline.
ACK 291e670
@laanwj Good point. Updated the pull request to reflect that. 

I maintain that Bitcoin documentation is a bit disjointed. All my pulls into core have been around trying to make stuff more readable. If more people need to read it, needs to be more visible.
@genjix 
@luke-jr @genjix Anything missing from my end, or are we just waiting for more ACKs?
@super3 Just waiting for @genjix since he is the sole Author at this point... :/
Unfortunately @genjix has been MIA for more than a year. Seems we might want to have a backup plan for authors that are not responsive / have abandoned their BIP?

Same applies to https://github.com/bitcoin/bips/pull/453
BIP 1 allows me to reassign BIPs if authors go missing. However, I consider BIP 1 set in stone, and instead would prefer if people make the effort to review BIP 2 as a replacement, which I will be proposing to the mailing list shortly, if there are no further review comments.
@luke-jr @genjix Is clearly MIA, so #412 and #453 are in limbo. So to be clear you don't plan on reassigning BIP 1 to another author, but instead plan on trying to get BIP 2 accepted? If so #412 and #453 can probably be closed if/when BIP 2 is accepted.

Is there a current discussion area for BIP 2? I'd like to make some comments.
> Is there a current discussion area for BIP 2? I'd like to make some comments.

Right now you could send your comment to https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013165.html
BIP 1 has been Replaced by BIP 2.",
n1bor,407,Proposed BIP modification,Add link to chart of progress,closed,,,https://github.com/bitcoin/bips/pull/407,['bip-0009/assignments.mediawiki'],,,"['sipa', 'luke-jr']","@sipa @petertodd @gmaxwell @rustyrussell 
I'm not sure that graph will remain there forever. It also feels weird to have a permanent document refer to a dynamically updated graph.
",
jl2012,402,,BIP143: Corrections and more examples,closed,,,https://github.com/bitcoin/bips/pull/402,['bip-0143.mediawiki'],,,,"closed for now to include more examples
",
chriswheeler,396,Proposed BIP modification,Add BIP109 to BIP9 Deployments,closed,,,https://github.com/bitcoin/bips/pull/396,['bip-0009/assignments.mediawiki'],,,"['gmaxwell', 'luke-jr']","This is incorrect. BIP109 prescribes its own activation mechanism which is different from BIP9-- it uses the old IsSuperMajority rolling test. 
The implementation is based on an earlier version of BIP9 - but still I think it would be useful to show somewhere since its using one of the available bits, and is being actively mined on main net.

Could we add a note, or column to the table to convey this? Or a separate table for deployments which are not fully compatible with the current BIP9?
BIP9 has never been about more than softforks, and BIP 109 is not that.

Another table with potential conflicts might be useful, but nothing more IMO.
Interpreting @gmaxwell 's comment and lack of revisions here as a NACK; closing. Ping me if someone wants it reopened.
",
DeftNerd,394,Proposed BIP modification,Add implementation to bip-0069.mediawiki,open,,"Added the BitWasp BIP0069 implementation to the list of implementations
",https://github.com/bitcoin/bips/pull/394,['bip-0069.mediawiki'],,,"['jonathancross', 'kristovatlas', 'afk11', 'luke-jr']","@kristovatlas 
@luke-jr: is it inappropriate to ACK this without first verifying that the implementation works correctly?
IMO probably, but I'm not sure the trend agrees with me.
It passes tests taken from bitcoin-js, and a couple of others too. 
Friendly ping @kristovatlas",
Christewart,390,Proposed BIP modification,Define retarget period in BIP9,closed,,"Define the retarget period
",https://github.com/bitcoin/bips/pull/390,['bip-0009.mediawiki'],,,"['sipa', 'rustyrussell', 'petertodd', 'luke-jr']","@sipa @petertodd @gmaxwell @rustyrussell 
""Currently"" seems confusing, as the retarget interval is not something that is easy to change. The interval for BIP9 however IS easy to change.
@sipa What do you mean by the 'interval for BIP9'? Is this the amount of blocks that is needed for a proposed soft fork to go from 'DEFINED' to 'ACTIVE'/'FAILED'? 
The sampling interval. BIP9 specifies to sample at every retarget, which is
every 2016 blocks. However, the sampling interval van be changes to
something else, the retarget interval can't. So saying that the retarget
interval is 'currently' 2016 is confusing.
Interesting, perhaps we should add language around that in the BIP as well. It doesn't seem like that is said explicitly in the BIP right now. I'll write something up wrt to that later. I'll also remove the word 'currently'. 
Never mind, i'm not going to add language around the sampling interval. Assuming everyone is ok with my last change I'm not going to add any more commits.
Luke-Jr notifications@github.com writes:

> @sipa @petertodd @gmaxwell @rustyrussell

Surprised retarget period needs definition.  If you want to, I'd say
just change:

 These are tallied each retarget period. 

To:

 These are tallied each retarget period (2016 blocks).

Cheers,
Rusty.
@rustyrussell's suggestion looks fine
@luke-jr @sipa i've changed it to what @rustyrussell suggested and rebased. Should be good to merge 
Weak NACK - this isn't really detailed enough to be an implementable spec by itself, as there's other details about retarget periods that you'd need to know to actually implement this. So with that in mind I'd rather just keep calling it a ""retarget period"" in the spirit of ""the code is the spec; bips just describe intent""
",
priestc,387,Proposed BIP modification,added multiexplorer wallet link,closed,,,https://github.com/bitcoin/bips/pull/387,['bip-0044.mediawiki'],,,"['prusnak', 'bgok', 'luke-jr']","@prusnak @slush0 
Whats the hold up? Merge this already!
Neither author has ACK'd it. Email them directly if you like, but don't nag please.
Nack. The code is not very useful to serve as an example for other developers.
","This link is broken. Connection refused. Looking at the commit history, it looks like a bad merge. Crypzo changed to coinvault.
"
WriteCodeEveryday,383,New BIP,Selection Process when disclosing Yourself or Another Person as Satoshi Nakamoto,closed,,"Outlines the rules for selecting and confirming a candidate for “Satoshi Nakamoto”

Open to initial edits by all interested parties.
",https://github.com/bitcoin/bips/pull/383,['bip-0146.mediawiki'],,,"['sipa', 'luke-jr']","Did you request a BIP number?

I can't stop you from publishing this, but I have not seen any discussion
around it, and it seems utterly pointless.

If Bitcoin's creator were to reappear, he is welcome to participate in the
development process. In fact, it doesn't even matter what his history is; the same holds for every other person. If he does not wish to participate in development, I don't think it has any relevance.
Withdrawn until a BIP is assigned to it.
See BIP 1 for the process.
",
instagibbs,379,Proposed BIP modification,"Sigops are in witnessScript, not witness program",closed,,,https://github.com/bitcoin/bips/pull/379,['bip-0141.mediawiki'],,,"['sipa', 'CodeShark', 'luke-jr', 'jl2012']","thanks. But that's tricky as there is no witnessScript for P2WPKH. Any idea?
Hmm, yes you're right. Perhaps just say 

""while the cost of a sigop triggered during witness evaluation is 1""
oh, this conflicts with #365 
@CodeShark @jl2012 @sipa 
ACK
I'm actually not clear on how to merge this... :|
@jl2012 Is this still relevant after #365 ?
This is fixed with #416 
@instagibbs @luke-jr This should be closed as fixed with #416 
",
jesion,356,Proposed BIP modification,Proposed an update on BIP32 mediawiki file - a new Java implementatio…,closed,,"Proposed inclusion of my project on the list of Java implementations of the BIP32 specification.
",https://github.com/bitcoin/bips/pull/356,['bip-0032.mediawiki'],,,['luke-jr'],,"Don't add a BOM.
"
CryptoDJ,352,,Superfluous Leading & Trailing Forwards Slashes,closed,,"The user-agent string example begins and ends with delimiters (the forward slash or /) that have no use to humans or computers and therefore should be eliminated. Eliminating these superfluous delimiters will slightly decreased the data size transmitted to peers, stored when consuming API messages and make the UI look better.

So far, no one has been able to explain the benefit of the leading and trailing forwards slashes except that it is specified in this BIP.  Please see this pull request:  [https://github.com/bitcoin/bitcoin/pull/7640]
",https://github.com/bitcoin/bips/pull/352,['bip-0014.mediawiki'],,,['luke-jr'],"This BIP is Final, not to mention widely implemented and deployed. It cannot be modified.
",
luke-jr,350,Pending acceptance,BIP 2: Promote to Active Status,closed,,"This requires rough consensus from the bitcoin-dev mailing list to proceed.
",https://github.com/bitcoin/bips/pull/350,"['README.mediawiki', 'bip-0001.mediawiki', 'bip-0002.mediawiki', 'bip-0009.mediawiki', 'bip-0010.mediawiki', 'bip-0011.mediawiki', 'bip-0012.mediawiki', 'bip-0013.mediawiki', 'bip-0014.mediawiki', 'bip-0015.mediawiki', 'bip-0016.mediawiki', 'bip-0017.mediawiki', 'bip-0018.mediawiki', 'bip-0019.mediawiki', 'bip-0020.mediawiki', 'bip-0021.mediawiki', 'bip-0022.mediawiki', 'bip-0023.mediawiki', 'bip-0030.mediawiki', 'bip-0031.mediawiki', 'bip-0032.mediawiki', 'bip-0033.mediawiki', 'bip-0034.mediawiki', 'bip-0035.mediawiki', 'bip-0036.mediawiki', 'bip-0037.mediawiki', 'bip-0038.mediawiki', 'bip-0039.mediawiki', 'bip-0042.mediawiki', 'bip-0043.mediawiki']",,,"['btcdrak', 'MarcoFalke', 'laanwj']","So this would _forbid_ to multi-license where one of the ""licenses"" is PD?
PD contradicts licensing, so it doesn't make sense to ""dual-license"" with it.
Fine with me, just wanted to make sure this is intended.
ACK
NACK on links to bitcoin.it wiki, BIPs should be self contained (e.g. use this Github repo's wiki).
@btcdrak The wiki links are for comments only. The BIP itself remains self-contained. (and &lt;insert rant about not having brought this up on the ML, preferably back in early February>)
Please [read the BIP](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki) and discuss on ML...
> NACK on links to bitcoin.it wiki,

What about only adding them when the accompanying wiki page exists? As I read BIP2, adding those is not mandatory:

> Each BIP should, in its preamble, link to a Bitcoin Wiki page
As this is a process BIP, we're not going to change the status to `Active' like BIP1? 'Final' means it's never meant to change again (just asking to be sure).

> Some Informational and Process BIPs may also have a status of ""Active"" if they are never meant to be completed. E.g. BIP 1 (this BIP).
@laanwj You're right, my bad. This should be ->Active.
Superceded by #360 since there is irreconcilable disagreement.
","What is the providence of this license?

Edit: I see, you changing the license of your own BIPs.
"
jameshilliard,340,New BIP,RFC: Multi-Stage Merge-Mine Headers Hard-Fork,closed,,,https://github.com/bitcoin/bips/pull/340,['bip-msmmhhf.mediawiki'],,,['luke-jr'],"No discussion on the mailing list, closing.
",
luke-jr,339,"Pending acceptance, question",Promote Draft->Final BIPs: 60 and 64,open,,"Follow-up from #315

The following BIPs appear to meet the criteria for Final status, but have not been promoted to Accepted by their author yet, so theoretically need ACKs from the authors. Since @genjix is MIA, and @mikehearn ignores Bitcoin, we need to discuss how to handle such actions when BIP champions disappear - BIP 1 allows for me to assign an additional champion to take over, but I'm not sure anyone would necessarily want to do so in these cases.

BIP 60: BIP 37 was apparently not clear on whether the new ""relay transactions"" flag was mandatory or optional. BIP 60 sought to explicitly make it mandatory. In parallel, Jeff Garzik interpreted BIP 37's field as mandatory in bitcoin/bitcoin#2534 and Pieter Wuille implemented the changes required for that (and BIP 60) in bitcoin/bitcoin#2763 . Numerous forks of Bitcoin Core since then have also picked up this change.

BIP 64: The getutxo message was implemented for use between (pre-contentious hardforks) Bitcoin XT and Lighthouse. Both of these are unmaintained now, but this does not seem relevant.
",https://github.com/bitcoin/bips/pull/339,"['README.mediawiki', 'bip-0060.mediawiki', 'bip-0064.mediawiki']",,,"['jonathancross', 'evoskuil']","It's worth noting that the change to version.relay behavior in the satoshi client spanned release and protocol versions. And as you say, this difference was also picked up by forks. From libbitcoin comments:
```
    // The /Satoshi:0.8.x/ node (70001) reads (but does not send) relay byte.
    // The /Satoshi:0.9.x/ node (70002) sends (and reads) the relay byte.
```
In order to not fail a high number of connections it's necessary to allow peers reporting 70001 to not set the byte. Failing connections above 70001 results in a very small number of dropped connections, such as the following:
```cpp
// ""/Satoshi:1.1.1/"" (70006) no relay
//     anarchistprime: bitcointalk.org/index.php?topic=1001407
//     This node is identifiable by a different genesis block.
// ""/Cornell-Falcon-Network:0.1.0/"" (70014) no relay
// ""/therealbitcoin.org:0.9.99.99/"" (99999) no relay
```
So it seems that the BIP60 treatment of relay as optional in 70001 and mandatory in 70002 is reasonably consistent on the network. Variations are likely forks of version 70001 or prior that failed to track protocol changes.@evoskuil is this ACK / NACK or did you want to see something changed?

Also, needs to be rebased.",
Sjors,338,,BIP 32: add BitcoinJS implementation and blockchain.info usage,closed,,,https://github.com/bitcoin/bips/pull/338,['bip-0032.mediawiki'],,,['dcousens'],"@Sjors could you maybe PR this to the branch I already PR'd here: https://github.com/bitcoin/bips/pull/310
Ok
",
jl2012,320,"Needs number assignment, New BIP",Request for comments: Hard fork opt-in mechanism for SPV nodes,closed,,,https://github.com/bitcoin/bips/pull/320,['spvoptinhf.mediawiki'],,,"['luke-jr', 'dcousens']","Please stop opening PRs for undiscussed BIP drafts...
Would this be an extension to BIP37?
Close the PR for now, but not withdrawn. Wait for further discussion
",
jl2012,317,"Needs number assignment, New BIP",Request for comments: Hardfork bit BIP,closed,,,https://github.com/bitcoin/bips/pull/317,['hardforkbit.mediawiki'],,,"['jtimon', 'luke-jr', 'MarcoFalke']","@jl2012 Ping me if you decide you want to move forward with this, or let me know if I should close it.
Please, I would like a number for this BIP draft because I plan to refer it from bitcoin/#7566 and BIP99.
Maybe it's better to use something like `jl2012-hardforkbit` for now and refer to the actual bip number after merge?
@jtimon after reading soft-hardfork proposalss like http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012457.html and http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012377.html , I'm not sure if this is a good idea
@MarcoFalke what's the cost of giving it a number before merging? I don't think we're merging any bips without a number anyway.

@jl2012 those ideas are interesting but I don't think they make this one less of a good idea (even if the others are incompatible and better). Remember that not all BIPs need to be adopted. But if you don't want to continue persuing this, I understand. I can just talk about the hardfork bip in bip99 as originally planned instead of referring to this BIP.
If that is the case, I guess we should close this PR though.
@jtimon I think you may still refer to this with the like to this PR. I'm closing this for now until someone really implement this
> @jtimon I think you may still refer to this with the like to this PR. I'm closing this for now until someone really implement this

Here's an implementation (on top of my BIP9 implementation): https://github.com/jtimon/bitcoin/commit/990dda87b258c1e8d4d35b1fcbae4106303664f0 

As you can see, the amount of code can be really small.
",
jl2012,316,Proposed BIP modification,BIP141: New commitment structure,closed,,"@sipa 

Draft based on http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012313.html
",https://github.com/bitcoin/bips/pull/316,['bip-0141.mediawiki'],,,"['sipa', 'NicolasDorier', 'luke-jr']","What's the status of this? Ready for merging?
It's an idea, and I'm waiting for more opinions first.
","Item 0 mean top of the stack or bottom of the stack ? I assume bottom, but maybe it can be clarified.
Yes, 0 means bottom in the source code
typo ""Theorectically""...
"
luke-jr,315,,"Promote Draft->Final BIPs: 50, 60, 64, 66, and 73",closed,,"The following BIPs appear to meet the criteria for Final status, but have not been promoted to Accepted by their author yet, so need ACKs from the authors. Since at least @genjix is MIA, we probably also need to discuss how to handle such actions when BIP champions disappear - BIP 1 allows for me to assign an additional champion to take over, but I'm not sure anyone would necessarily _want_ to do so in this case.

BIP 50: Proposed action items, including the hardfork, are completed. @gavinandresen

BIP 60: BIP 37 was apparently not clear on whether the new ""relay transactions"" flag was mandatory or optional. BIP 60 sought to explicitly make it mandatory. In parallel, Jeff Garzik interpreted BIP 37's field as mandatory in https://github.com/bitcoin/bitcoin/issues/2534 and Pieter Wuille implemented the changes required for that (and BIP 60) in https://github.com/bitcoin/bitcoin/pull/2763 . Numerous forks of Bitcoin Core since then have also picked up this change. @genjix

BIP 64: The getutxo message was implemented for use between (pre-contentious hardforks) Bitcoin XT and Lighthouse. Both of these are unmaintained now, but this does not seem relevant. @mikehearn

BIP 66: Softfork accepted by a supermajority of miners. @sipa

BIP 73: Implemented by at least Bitcoin Core and BitPay. @gasteve
",https://github.com/bitcoin/bips/pull/315,"['README.mediawiki', 'bip-0050.mediawiki', 'bip-0060.mediawiki', 'bip-0064.mediawiki', 'bip-0073.mediawiki']",,,"['sipa', 'gavinandresen', 'gasteve']","ACK BIP 73
ACK BIP 66
ACK BIP 50
Merged 50 & 73 via a74ea14bc66d6be699f3e3d5aae2fa308ad7adad
",
dcousens,310,Proposed BIP modification,Add BIP32 bitcoinjs implementation,closed,,"Also formats the list for readability
",https://github.com/bitcoin/bips/pull/310,['bip-0032.mediawiki'],,,"['sipa', 'afk11']","ping @sipa,  thoughts?
Per https://bitcoincore.org/en/meetings/2016/05/12/ please link to actual implementation code for BIP32, and not just applications that support it.
@sipa not sure what you mean?  The link added was implementation code for BIP32?

This was the link added: https://github.com/bitcoinjs/bitcoinjs-lib/blob/v2.1.4/src/hdnode.js
Perhaps I'll rebase and isolate the formatting commit from the addition.

> Jcorgan proposes to link to an URL and commit hash, to make sure the linked code reflects the implementation.

Is the commit hash preferred over the tagged version used above? If so,  I'll change it.
I haven't seen commit hashes included much before, just a link to the implementation's file or repo. 

Re sipa's comment, probably refers to mentioning blockchain.info's use of the bitcoin-js implementation; that information is not typically included in BIP documents. https://github.com/bitcoin/bips/pull/310/commits/681c160239fcd7b9cdfb3dc391a39d78b9029529

There is also another PR (#293) which reformats the BIP32 implementation list, perhaps coordinate so there's only one large update?
> Re sipa's comment, probably refers to mentioning blockchain.info's use of the bitcoin-js implementation; that information is not typically included in BIP documents. 681c160

Right! I totally forgot that those commits were included into this.
I'll re-submit a new PR that performs the implementation reference.

If #293 is just a formatting PR,  perfect.  Otherwise, I'll submit that independently.
",
paoloaga,305,,Added Italian mnemonics set,closed,,"Here you can find the proposed Italian wordlist for BIP0039.

Words have been chosen using the following rules:
1. Simple and common italian words.
2. Length between 4 and 8 characters.
3. First 4 letters must be unique between all words.
4. No accents or special characters.
5. No complex verb forms.
6. No plural words.
7. No words that remind negative/sad/bad things.
8. If both female/male words are available, choose male version.
9. No words with double vocals (like: lineetta)
10. No words already used in other language mnemonic sets.
11. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there must be at least other 3 different letters.
12. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there not must be the same sequence of 3 or more letters.

Rules 11 and 12 prevent the selection words that are not different enough. This makes each word more recognizable among others and less error prone. For example: the wordlist contains ""atono"", then ""atomo"" is rejected, but ""atomico"" is good.

All the words have been manually selected and automatically checked against the rules.

Words have been checked automatically against an italian dictionary and spell-checker and reviewed one by one.
",https://github.com/bitcoin/bips/pull/305,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/italian.txt']",,,,"I accidentally closed the pull request while doing a rebase on the branch. Pull request #306 is final.
",
paoloaga,304,,Bip0039 italian,closed,,"Here you can find the proposed Italian wordlist for BIP0039.

Words have been chosen using the following rules:
1. Simple and common italian words.
2. Length between 4 and 8 characters.
3. First 4 letters must be unique between all words.
4. No accents or special characters.
5. No complex verb forms.
6. No plural words.
7. If both female/male words are available, choose male version.
8. No words with double vocals (like: lineetta)
9. No words already used in other language mnemonic sets.
10. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there must be at least other 3 different letters.
11. If 3 of the first 4 letters are already used in the same sequence in another mnemonic word, there not must be the same sequence of 3 or more letters.

Rules 11 and 12 prevent the selection words that are not different enough. This makes each word more recognizable among others and less error prone. For example: the wordlist contains ""atono"", then ""atomo"" is rejected, but ""atomico"" is good.

All the words have been manually selected and automatically checked against the rules.
## Words have been checked automatically against an italian dictionary and spell-checker and reviewed one by one.
",https://github.com/bitcoin/bips/pull/304,"['bip-0039/bip-0039-wordlists.md', 'bip-0039/italian.txt']",,,['FelixWeis'],"Thanks, can you squash into 1 commit?
I accidentally closed the pull request while doing a rebase on the branch. Pull request #306 is final.
",
jonathancross,299,Proposed BIP modification,BIP-131 Removing extra 'a' from sentence.,closed,,,https://github.com/bitcoin/bips/pull/299,['bip-0131.mediawiki'],,,"['kanzure', 'luke-jr']","@priestc 
ACK cb91ffc8b0319933f5979475335ab33df8fbd469
Ping @priestc 
FYI: I don't believe we will be hearing from @priestc  -- I even wrote him an email about a month ago and no response.  Something we can do via BIP-2?
Giving up.",
jgeewax,293,Proposed BIP modification,Update the implementations section of BIP0032.,open,,"Mostly cosmetic changes, added bip32-utils (Javascript).
",https://github.com/bitcoin/bips/pull/293,['bip-0032.mediawiki'],,,"['afk11', 'jonasschnelli', 'fanatid', 'jonathancross', 'dcousens', 'schildbach', 'sipa', 'luke-jr']","Would you mind adding libbtc (C library)?
https://github.com/libbtc/libbtc
Updated (and also realized the languages were in random order, so I sorted them).
ACK
Could you perhaps add [bitcoinj](http://bitcoinj.github.io/), one of the earliest implementors of BIP32?
Done.
@dcousens : Thanks for the heads up. I actually discovered that today (bip32-utils wasn't actually necessary, just a HD node and `.derive()`)

I'll update accordingly -- thanks for the heads up :+1: 
@jgeewax no worries :),  sorry I accidentally removed my comment.  `TL;DR` for others was that the listed library was actually just a convenience wrapper for `bitcoinjs-lib` (which is what is now listed).
Since you're at it... Could you update bitcoin-lib-php to bitcoin-php? Same organization, just the repository and link name please!
@afk11 : Done :)
@sipa
How is this related to #310?
@sipa they're independent, but both re-format the entire list and carry their own additions :/
@jgeewax This needs to be rebased / conflicts resolved.@jonathancross Fixed (some of it was duplicated info, merged in the new content)Hey @jgeewax! 

From the history it looks like some of the changes were dropped from the PR! Maybe have a look for others - and could you reapply the change from bitcoin-lib-php -> bitcoin-php?Gotcha - added a new line for bitcoin-php. Let me know if you notice anything else missing.... Sorry about that.","s/nNde.js/node.js/
Sorry about that. Fixed. 
"
gubatron,280,,Update bip-0107.mediawiki,closed,,"typo
",https://github.com/bitcoin/bips/pull/280,['bip-0107.mediawiki'],,,['luke-jr'],"Fixed by #278
",
gubatron,279,,Update bip-0107.mediawiki,closed,,"typo
",https://github.com/bitcoin/bips/pull/279,['bip-0107.mediawiki'],,,['luke-jr'],"Fixed by #278
",
afk11,275,,Fix BIP142: Example script needs PUSH length byte,closed,,"Following the segwit BIP 141 #265, a version 0 program: OP_0 <a push of the script>

BIP142: #267 mentions the following script: 

```
  <0x0076A914{20-byte-hash-value}88AC>
```

which would be: OP_0 DUP HASH160 [hash] EQUALVERIFY CHECKSIG

Notice the witness program isn't _pushed_ like pay-to-script-hash. The push is missing the length marker, 0x19. I think it should be:

```
 OP_0 PUSHDATA|length [hash]
 script: OP_0 76a914010966776006953d5567439e5e39f86a0d273bee88ac
 scriptPubKey: 001976a914010966776006953d5567439e5e39f86a0d273bee88ac
 Address: BGMZdnvTr2wXTjkSs5TmrCGRN33MWpzdoK 
```
",https://github.com/bitcoin/bips/pull/275,['bip-0142.mediawiki'],,,"['luke-jr', 'jl2012']","I have fixed together with other updates: https://github.com/bitcoin/bips/pull/277
#277 is merged. Let me know if this needs to be reopened.
","The address B4YZZ3nMBETWVF9ZSfotSwTxVnqhdkTi7r is correct. Please double check
Thanks. I forgot to change this when the spec of BIP141 changed
Further nit: ""The scriptPubKey is a single push of version-0 witness program in this form""

Why does it say the scriptPubKey is a single push? It's two pushes?
That was the old BIP141 spec that I forgot to change
Duly noted, I used the wrong hash to derive this. 
"
NicolasDorier,274,Proposed BIP modification,Replace raw byte in pushed script by op name,closed,,"This BIP has been difficult to understand for me because I misinterpreted byte's meaning.
I think using actual op name make this proposal clearer.
",https://github.com/bitcoin/bips/pull/274,['bip-0141.mediawiki'],,,"['afk11', 'luke-jr', 'jl2012']","I fixed inconsistencies as well: Sometimes using OP_0 and sometimes 0
@jl2012 @codeshark @sipa 
I just opened #275, the confusion this time being around using brackets for pushes. I'd prefer serialized scripts, or at worst, a standard notation for human readable scripts.
already fixed. Please close
",
jl2012,266,,Segwit address,closed,,,https://github.com/bitcoin/bips/pull/266,['bip-segwitaddress.mediawiki'],,,,,
jgarzik,263,New BIP,BIP 108: Block size increase to 2MB + small steps (BIP 102 variant w/ small steps),closed,,"A request for BIP 102 was ""a variant that does not require revisiting"", so a small step was included per the current thinking on small-step small-shock.

_NOTE_: Creates new ""drafts"" directory to illustrate different proposal technique.
",https://github.com/bitcoin/bips/pull/263,['drafts/draft-jg-small-bump-incr.mediawiki'],,,"['gmaxwell', 'afk11', 'MarcoFalke', 'btcdrak', 'dabura667', 'luke-jr']","Just for the record: @gmaxwell Did you assign this BIP number?
He didn't - proper number assignment appreciated

The index was intentionally not updated, for this reason.
Updated to illustrate a BIP-number-neutral, IETF-like technique, parallel process.  Proposed process:
1. BIP author creates PR to store unnumbered BIP in drafts/    Naming convention similar to IETF draft:  draft-AUTHOR-SUMMARY.
2. BIP editors review drafts/\* periodically for minimum standards, as per existing process.
3. BIP editor assigns a number, moves into main directory, updates index.
4. If a draft does not move after _6_ months, it is deleted.

This enables a parallel process, where authors can upload to drafts/ without having to wait for anyone.
@jgarzik fwiw, draft naming is also recommended by BIP-0001 in the form `bip-jgarzik-2mb-small-steps`.
Needs Copyright section.
Closing request.  No near term horizon for this proposal.
It's not clear if I should de-allocate BIP 108 for reuse, or leave it assigned...
BIPs should not be reused for clarity purposes imo.
It should probably remain in the repo. It's status is only draft, so was never fully 'accepted'.
Withdrawn makes sense IMO, but @jgarzik never completed the submission. :/

@jgarzik Can you license the BIP so it can be included as Withdrawn at least?
meh. just turn it into an empty document with the header and withdrawn in order to kill the number. You're making things too complex. :)
",
matiu,253,Proposed BIP modification,Adds multisig support,closed,,"- defines 48' a purpose for multisig wallets
- adds p2sh address generate procedure
- adds Copay to 'compatible wallets'
",https://github.com/bitcoin/bips/pull/253,['bip-0044.mediawiki'],,,"['andre-amorim', 'afk11', 'prusnak', 'amacneil', 'luke-jr']","BIP's aren't usually amended after the fact, it might be an issue to introducing this a year and a half in.
Given that the multisig extension uses a new purpose number, I dont think there could be an issue.
 This was done in coordination with the BIP author.

Note that there are some BIP are received conceptually similar extensions like:
https://github.com/bitcoin/bips/commit/2e6e5cf9589778ea55c7e71aa27e2b9ff122b737
It's still Draft status, so this just needs an ACK from @slush0 or @prusnak
NACK. This should go into BIP 48 according to BIP 43 specification.
Also you should clearly state in BIP 45 that this BIP is obsoleted by BIP 48.
Time Stamp ?

On 11 December 2015 at 09:44, Pavol Rusnak notifications@github.com wrote:

> NACK. This should go into BIP 48 according to BIP 43 specification.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/253#issuecomment-163890365.
OK, closing this one then. I will submit a new proposal.

This do not completely obsoletes BIP45, since with BIP45 it is possible to create wallet addresses without parties synchronization.
","typo/grammar

> a different purpose constant ~~is~~ must be used
nit: line length not consistent with rest of file
"
jl2012,247,,Correction related to nVersion,closed,,,https://github.com/bitcoin/bips/pull/247,['bip-0112.mediawiki'],,,['btcdrak'],"I think this is incorporated in #248 
",
dionyziz,239,"Proposed BIP modification, invalid",Remove support for SHA-1 from BIP0070,closed,,"SHA-1 has long been considered an insecure hashing algorithm. While
there have not been any collisions found yet, there are indications that
actual collisions are imminent.

Since 2011, we have known about the hash collision attack by Marc
Stevens [0] which brings down the complexity to approximately 2^65.

However, the recent attack by Stevens, Karpman, Peyrin on October 8th,
2015 which allowed them to construct and publish a freestart collision
attack on SHA-1's compression function (termed the ""SHAppening"") with
only 2^57 evaluations [1] is even more worrysome.

Under these circumstances, PKI CAs are already discussing the sunsetting
of SHA1 as a hash function, as it is considered cryptographically
insecure. These discussions have led to decisions to stop using SHA-1 in
PKI certificates. Specifically [2]
1. SHA-1 certificates will no longer be issued after the end of 2015.
2. SHA-1 certificates issued earlier will no longer be accepted after
   the end of 2016.

As the CA discussions indicate, it is not sufficient to pull SHA-1
support from CAs. As MD5 has shown, hash functions will have to be
pulled from applications (such as the browser or BIP0070 for bitcoin)
for the hashes to be discontinued. Therefore, it is not enough for us to
rely on CAs following the deadlines.

As BIP0070 concerns the security of payments, we should discontinue the
acceptance or recommendation of SHA-1 as a hash method for our protocol
sooner than later.

This patch removes SHA-1 support for X.509 certificates from BIP0070.

[0]
https://marc-stevens.nl/research/papers/PhD%20Thesis%20Marc%20Stevens%20-%20Attacks%20on%20Hash%20Functions%20and%20Applications.pdf
[1] https://sites.google.com/site/itstheshappening/
[2] https://cabforum.org/pipermail/public/2015-November/006280.html
",https://github.com/bitcoin/bips/pull/239,['bip-0070.mediawiki'],,,"['hoffmabc', 'afk11', 'luke-jr']","BIP's normally don't change after they're accepted. I notice the payment_details_version is not captured by the signature, so bumping the version isn't a safe way to indicate dropping SHA1. A new field in PaymentDetails might work though. 

Still, NACK for simply deleting support for SHA1, the protocol has been implemented many times by now.
What is the recommended method for marking something obsolete?
What exactly does ""been implemented many times by now"" mean? There needs to be a plan to deprecate SHA-1 at a minimum I would think. Even US government agencies have had plenty of time to migrate to SHA-2 by now.
@hoffmabc
I'm referring to BIP70. Since there are several libraries, wallets, and payment processors with support for this and the change breaks compatibility, the proposal needs to address actually upgrading the protocol. 

@dionyziz
Not sure, probably a new field on the `PaymentDetails` message. Maybe ask IRC / the mailing list.
Right, BIP 70 cannot be changed at this point. You'll need a new BIP proposing a change to the payment protocol.
",
jwilkins,235,New BIP,"Adding Pieter's BIP as 103, which it's been referred to for ages.",closed,,,https://github.com/bitcoin/bips/pull/235,"['README.mediawiki', 'bip-0103/blocksize.mediawiki']",,,"['btcdrak', 'luke-jr', 'MarcoFalke']","@sipa Is this OPL or public domain?
I think you need to amend the empty commit messages.

Also the filename needs to be `bip-0103.mediawiki`
Superceded by #238
","This should be fixed.
"
infertux,232,,Fix typo,closed,,,https://github.com/bitcoin/bips/pull/232,['README.mediawiki'],,,['luke-jr'],"Already merged via #236 
",
btcdrak,223,Proposed BIP modification,Update deployment of BIP113,closed,,,https://github.com/bitcoin/bips/pull/223,['bip-0113.mediawiki'],,,['luke-jr'],"@maaku
@luke-jr This was discussed at the last [IRC meeting](http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/15#l1444938803.0).
@btcdrak That's fine, it still needs an ACK from the BIP champion.
Closing for now because we're releasing this as a mempool only first. softfork will come later. 
",
priestc,222,,"New BIP: Creation of ""ScaleNet""",closed,,,https://github.com/bitcoin/bips/pull/222,['bip-0122.mediawiki'],,,"['btcdrak', 'fanquake', 'gmaxwell']","Was this BIP number assigned by @gmaxwell ?
It certainly was not.  As an aside, I'd prefer to not have prescriptive _testnet_ documents going in as BIPs.
@gmaxwell Can I suggest editing the BIP subject line so Google doesnt index this.
How can I reformat this pull request so that it doesn't get deleted?

Do either of you have anything to say about the actual contents of the BIP?
@priestc Start by reading through https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki#bip-work-flow
@priestc Your BIP should be named `bip-priestc-scalenet` until it is assigned a BIP number. You cannot self assign numbers, I see you have continued to use your self assignment and published elsewhere. Please change it.
",
MarcoFalke,203,,BIP-0069: [trivial] Move copyright section,closed,,"The section about the copyright should be either first or last.
",https://github.com/bitcoin/bips/pull/203,['bip-0069.mediawiki'],,,"['kristovatlas', 'luke-jr']","No, see [BIP 1](https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki#what-belongs-in-a-successful-bip).
BIP1 does not impose the order. In fact, there is no other BIP with the copyright section between abstract and motivation. 

Section in the end:
[37](https://github.com/bitcoin/bips/blob/4553242d53719dcaaeb2bfe12e0acafcf03736a0/bip-0037.mediawiki#Copyright)
[42](https://github.com/bitcoin/bips/blob/1647c7e6d3e3866454b803fd874df2d0c4991f4a/bip-0042.mediawiki#Copyright)
[60](https://github.com/bitcoin/bips/blob/1647c7e6d3e3866454b803fd874df2d0c4991f4a/bip-0060.mediawiki#Copyright)
[65](https://github.com/bitcoin/bips/blob/5d0d854cdd5a69fa7d8b7ab6f557da4189cc5799/bip-0065.mediawiki#Copyright)
[105](https://github.com/bitcoin/bips/blob/f749070a23b62fd603c1341c36142b7d1c7f0f94/bip-0105.mediawiki#copyright)
[111](https://github.com/bitcoin/bips/blob/a110a5692fa25724f2ec6beffae5905a2c553564/bip-0111.mediawiki#copyright)
[112](https://github.com/bitcoin/bips/blob/6902f790f174c8af934869dcc5f10f94f816f65d/bip-0112.mediawiki#Copyright)
[113](https://github.com/bitcoin/bips/blob/d4c9a236ecb947866c61aefb868b284498489c2b/bip-0113.mediawiki#Copyright)

Section after motivation:
[38](https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki#Copyright)
The final call is up to @kristovatlas , but considering it uses BIP 1's order, I don't see how it can be an error.
Let's not call it an error but UX improvement: After reading the abstract, I was ""ripped out"" of the reading-flow.

So what about ""fixing"" BIP 1? ;-)
I don't care at all
",
MarcoFalke,197,,BIP-0037: typo,closed,,"Looks like a typo to me?
",https://github.com/bitcoin/bips/pull/197,['bip-0037.mediawiki'],,,['luke-jr'],"No, it was correct _before_ your change, not after.
Sorry, you are right. `are sent` is not only proper English but also correct content-wise.
",
MarcoFalke,196,,BIP-0014: MAX_SUBVERSION_LENGTH,closed,,"I don't know if this should be mentioned in the bip because it may change at some point in the future... Yet, changing it may cause a fork of the network (extremely unlikely but possible).
",https://github.com/bitcoin/bips/pull/196,['bip-0014.mediawiki'],,,"['pstratem', 'luke-jr']","This shouldn't cause a fork of the network...
Imagine I released bitcoin-xxl with twice the `MAX_SUBVERSION_LENGTH == 512`.  The UA string keeps growing over time and reaches maybe 300 bytes some time. Now it's impossible to connect bitcoin-xxl nodes with bitcoin-core 0.11 nodes, potentially splitting the network?
Your XXL node will talk to old/non-spammy XXL nodes which will talk to Core nodes, so no big deal.
Maybe it's better to just ""recommend"" the implementation bitcoin-core does/did and link to the PRs...

Also, ping @luke-jr Could you please enable the GitHub issue tracker for this repo? 
@MarcoFalke Discussion of BIPs should be on the bitcoin-dev mailing list, not GitHub.

@genjix @phantomcircuit May I close this unmerged?
@luke-jr yes
","length*
"
UpalChakraborty,188,,Dynamically Controlled Bitcoin Block Size Max Cap,closed,,"<pre>
  BIP: 1xx
  Title: Dynamically Controlled Bitcoin Block Size Max Cap
  Author: Upal Chakraborty <bitcoin@upalc.com>
  Status: Draft
  Type: Standards Track
  Created: 2015-08-24
</pre>


==Abstract==

This BIP proposes replacing the fixed one megabyte maximum block size with a dynamically controlled maximum block size that may increase or decrease with difficulty change depending on various network factors. I have two proposals regarding this...

i. Depending only on previous block size calculation.

ii. Depending on previous block size calculation and previous Tx fee collected by miners.

==Motivation==

With increased adoption, transaction volume on bitcoin network is bound to grow. If the one megabyte max cap is not changed to a flexible one which changes itself with changing network demand, then adoption will hamper and bitcoin's growth may choke up. Following graph shows the change in average block size since inception...

https://blockchain.info/charts/avg-block-size?timespan=all&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=

==Specification==

===Proposal 1 : Depending only on previous block size calculation===

  If more than 50% of block's size, found in the first 2000 of the last difficulty period, is more than 90% MaxBlockSize
      Double MaxBlockSize
  Else if more than 90% of block's size, found in the first 2000 of the last difficulty period, is less than 50% MaxBlockSize
      Half MaxBlockSize
  Else
      Keep the same MaxBlockSize

===Proposal 2 : Depending on previous block size calculation and previous Tx fee collected by miners===

  TotalBlockSizeInLastButOneDifficulty = Sum of all Block size of first 2008 blocks in last 2 difficulty period
  TotalBlockSizeInLastDifficulty = Sum of all Block size of second 2008 blocks in last 2 difficulty period (This actually includes 8 blocks from last but one difficulty)

  TotalTxFeeInLastButOneDifficulty = Sum of all Tx fees of first 2008 blocks in last 2 difficulty period
  TotalTxFeeInLastDifficulty = Sum of all Tx fees of second 2008 blocks in last 2 difficulty period (This actually includes 8 blocks from last but one difficulty)

  If ( ( (Sum of first 4016 block size in last 2 difficulty period)/4016 > 50% MaxBlockSize) AND (TotalTxFeeInLastDifficulty > TotalTxFeeInLastButOneDifficulty) AND (TotalBlockSizeInLastDifficulty > TotalBlockSizeInLastButOneDifficulty) )
      MaxBlockSize = TotalBlockSizeInLastDifficulty \* MaxBlockSize / TotalBlockSizeInLastButOneDifficulty
  Else If ( ( (Sum of first 4016 block size in last 2 difficulty period)/4016 < 50% MaxBlockSize) AND (TotalTxFeeInLastDifficulty < TotalTxFeeInLastButOneDifficulty) AND (TotalBlockSizeInLastDifficulty < TotalBlockSizeInLastButOneDifficulty) )
      MaxBlockSize = TotalBlockSizeInLastDifficulty \* MaxBlockSize / TotalBlockSizeInLastButOneDifficulty
  Else
      Keep the same MaxBlockSize

==Rationale==

These two proposals have been derived after discussion on [https://bitcointalk.org/index.php?topic=1154536.0 BitcoinTalk] and [http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010285.html bitcoin-dev mailing list]. The original idea and its evolution in the light of various arguements can be found [http://upalc.com/maxblocksize.php here].

===Proposal 1 : Depending only on previous block size calculation===

This solution is derived directly from the indication of the problem. If transaction volume increases, then we will naturally see bigger blocks. On the contrary, if there are not enough transaction volume, but maximum block size is high, then only few blocks may sweep the mempool. Hence, if block size is itself taken into consideration, then maximum block size can most rationally be derived. Moreover, this solution not only increases, but also decreases the maximum block size, just like difficulty.

===Proposal 2 : Depending on previous block size calculation and previous Tx fee collected by miners===

This solution takes care of stable mining subsidy. It will not increase maximum block size, if Tx fee collection is not increasing and thereby creating a Tx fee pressure on the market. On the other hand, though the block size max cap is dynamically controlled, it is very difficult to game by any party because the increase or decrease of block size max cap will take place in the same ratio of average block size increase or decrease.

==Compatibility==

This is a hard-forking change to the Bitcoin protocol; anybody running code that fully validates blocks must upgrade before the activation time or they will risk rejecting a chain containing larger-than-one-megabyte blocks.

==Other solutions considered==

[http://gtf.org/garzik/bitcoin/BIP100-blocksizechangeproposal.pdf Making Decentralized Economic Policy] - by Jeff Garzik

[https://bitcointalk.org/index.php?topic=1078521.0 Elastic block cap with rollover penalties] - by Meni Rosenfeld

[https://github.com/bitcoin/bips/blob/master/bip-0101.mediawiki Increase maximum block size] - by Gavin Andresen

[https://gist.github.com/sipa/c65665fc360ca7a176a6 Block size following technological growth] - by Pieter Wuille

[https://lightning.network/lightning-network-paper.pdf The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments] - by Joseph Poon & Thaddeus Dryja

==Deployment==

If consensus is achieved, deployment can be made at a future block number at which difficulty will change.
",https://github.com/bitcoin/bips/pull/188,"['BIP-DynamicMaxBlockSize.mediawiki', 'bip-0101.mediawiki', 'maxblocksize']",,,"['btcdrak', 'luke-jr']","Can you squash this? Have you requested a BIP number from @gmaxwell yet?
This PR needs to be closed and reopened using a topic branch.
@luke-jr BIP number will be assigned on new PR
@luke-jr Seems I'm messing up something, while copying raw text from https://github.com/UpalChakraborty/bips/blob/master/BIP-DynamicMaxBlockSize.mediawiki.
@UpalChakraborty You dont need to paste the BIP text into comments. Comments to not parse mediawiki. We read the PR from the files tab, using the [view] button. 
![screenshot-github com 2015-09-04 01-20-37](https://cloud.githubusercontent.com/assets/7275704/9674021/3b3d2904-52a3-11e5-9ff3-d35e579cf557.png)

In any case PR needs to be closed and a new one opened. You need to use a GIT topic branch for your changes.
Fresh pull request https://github.com/bitcoin/bips/pull/191 has been created. Closing this one.
",
andychase,186,,Organize bips by status,closed,,"Separate BIPS into sections: [Accepted ones, Draft ones, Rejects]. BIPs are sorted into sections and then by number. This makes it still very easy to find BIPs by number but it makes it crystal clear what their status is.

The idea here is to further guide readers towards the concept that a BIP can be a draft or rejected.

![screen shot 2015-08-27 at 7 44 30 pm](https://cloud.githubusercontent.com/assets/2470152/9537975/4d92cf32-4cf4-11e5-923b-20d038bb7e0c.png)
",https://github.com/bitcoin/bips/pull/186,['README.mediawiki'],,,,,
jollysean,185,,Create AML-KYC,closed,,"The proposal to create a regulator module in Bitcoin protocol.
",https://github.com/bitcoin/bips/pull/185,['AML-KYC'],,,"['gmaxwell', 'Thashiznets', 'ToTheMoonGuy', 'dabura667', 'laanwj']","You have not been assigned 185. You may not use 185. Please follow the process in BIP1.
Hi,

I am proposing to allow regulation in consensus of Bitcoin Protocol for ALLOW and BLOCK of user accounts and this should start a sanitation process on Bitcoin  
Do you have the proper authorization from the Internet trolling central planning commission?
OMG hahahaha! This has to be a joke no?
KYPK Know Your Public Key
ABL Anti-Bitcoin Laundering
OIBC Office of Internet Bitcoin Control

I'm sorry, I can't keep a straight face here...
(°.°)
@jollysean Yes, I understood, but you still need to follow process. :)  Just make your proposal there, discuss it, and you can have a BIP number assigned if you still want one.
",
andychase,184,Proposed BIP modification,"BIP-0001 Should be labeled as ""Process"" Type",closed,,"Previously BIP-0001 listed in its header preamble that is was a ""Standards Track""
type proposal. This conflicts with both its own definition of ""Standards Track""
proposal as well as the type listed in PEP-0001 of which BIP-0001 is based on.

Defitions of each type of proposal:

A Standards Track BIP describes any change that affects most or all Bitcoin implementations.

An Informational BIP describes a Bitcoin design issue, or provides general guidelines or information to the Bitcoin community, but does not propose a new feature.

A Process BIP describes a process surrounding Bitcoin, or proposes a change to (or an event in) a process.
Specifically: ""Any meta-BIP is also considered a Process BIP.""

Based on these definitions BIP-0001 should have always been labeled as a ""Process"" BIP and this patch corrects this.
",https://github.com/bitcoin/bips/pull/184,"['README.mediawiki', 'bip-0001.mediawiki']",,,"['kanzure', 'luke-jr', 'laanwj']","Can at least one of @genjix or @gmaxwell ACK this? It sounds reasonable to me.
ACK, looks correct to me.
Makes sense to me.
Yeah looks good.
This is correct, but I forgot about it, needs rebase.
Have to close this one to fix as the repository its from no longer exists
",
maraoz,172,,proposed BIP68 title change,closed,,"I think this makes it easier to people looking for this BIP. 
",https://github.com/bitcoin/bips/pull/172,['bip-0068.mediawiki'],,,"['btcdrak', 'maaku', 'luke-jr']","@maaku ping
ACK ping @maaku
#206 includes this fix.
Merged via #206 
",
justusranvier,171,New BIP,HD derivation of Bitmessage addresses,open,,"This specification is an application of BIP-32 and BIP-43 which allows a multiple-identity Bitmessage client to derive all needed keypairs from a single seed, which may be the same seed used to derive Bitcoin keypairs without the possibility of collision, greatly simplifying backup requirements and improving the user experience.
",https://github.com/bitcoin/bips/pull/171,['bip-0082.mediawiki'],,,"['gmaxwell', 'bgok', 'prusnak', 'jonathancross', 'luke-jr']","Bitmessage is not Bitcoin. Did the editor really assign this BIP 82?
I did assign 82 here. Can you take discussion to the list?
Quoting from BIP-43:

""We encourage different schemes to apply for assigning a separate BIP number and use the same number for purpose field, so addresses won't be generated from overlapping BIP32 spaces.""

""Because this scheme can be used to generate nodes for more cryptocurrencies at once, or even something totally unrelated to cryptocurrencies...""

The BIP process is currently the only defined way to use the BIP-43 scheme for deterministic keypair derivation while achieving its stated goal of preventing namespace collisions.
@justusranvier Please let me know when you've decided to take this proposal to SLIP, or if you want me to merge it as a BIP. Either way, it also needs a Copyright section.
@luke-jr I have a few other proposals regarding BIP32 hierarchy. Not all are specifically bitcoin. Should I submit them here?
@bgok Only ones specifically for Bitcoin ought to be submitted as BIPs, to the Bitcoin-dev mailing list (pull requests here are only for things _after_ they have been discussed on the ML).
See SatoshiLabs Improvement Proposals for altcoin-related things: https://doc.satoshilabs.com/slips/
@luke-jr Yeah, unfortunately that's not a vendor neutral repository. I work for a competitor. It sounds like we need a 'BIP32 Wallet Hierarchy Proposal' repository. I've already floated the idea with a couple of other vendors, I'll also put it out there on the dev list. Thanks.
I have not submitted anything to SLIP, and I'm not particular eager to do so.

The problem I think is conflicting views of what the BIP repository should be.

I think informational BIPs, as opposed to standard track BIPS, should be broadly defined as ""anything which may be useful for the developer of a Bitcoin application"".

Having a central, vendor-neutral, repository for useful standards is far more beneficial to BIP users than being required to cross reference against other repositories for no reason other than to keep this one pure. 

It would make this repository more useful to developers to reserve strict relevancy checks to standard track BIPs, and be more lenient with the informational BIPs.
@justusranvier I do not see how this is in any way relevant or useful to the developer of a Bitcoin application (that is not a Bitmessage application). Can you explain? Maybe I am missing something.
I share @justusranvier's frustration.

Also, BIP43 creates a dependency on the BIP process for any use of the BIP32 Hierarchy, bitcoin related or not.

@justusranvier, would you be interested in championing a Wallet Hierarchy Proposal repository with me?
BIP-43 is a method for deriving secp256k1 keys from a single seed, and secp256k1 keys are used for more things than just Bitcoin addresses.

Requiring users to back up just one seed vs several is virtually always desirable.

For applications to use BIP-43 effectively, they need namespace management to make sure keys used for different purposes do not collide (purpose code).

It's entirely possible that a Bitcoin wallet might have added functionality like transferring out of band data via Bitmessage. It might also use secp256k1 keys derived from the same master seed to encrypt its on-disk storage, or for transport layer encryption, or for virtually anything else that requires encryption or signing.

BIP-43 is a fantastic way to manage all these keys and make sure they can be deterministically re-generated from the seed.

As originally specified, BIP-43 purpose codes were BIP numbers, so which made it even more convenient.  If a wallet developer is implementing BIP-44 accounts, they know to use purpose code 44 in the derivation path, and similarly BIP-47 addresses are derived using purpose code 47. It makes life easier for everyone.
Perhaps something like [SLIP-44](https://doc.satoshilabs.com/slips/slip-0044.html) should be used to subdivide the purpose codes between independent projects (Bitcoin, Bitmessage, altcoins, etc)? If SLIP is too vender-biased, maybe SLIP-44 can be moved to a vendor-neutral location.
@bgok So using our source code is OK, but contributing to our improvement proposals is not? You seem pretty inconsistent, to put it mildly. I am perfectly fine to accept any pull request that make sense. Coincidentally, I just extracted SLIPs to a separate repo, so one does not have to fork whole our documentation: https://github.com/satoshilabs/slips

That said, I share the view of @justusranvier. The whole reason of SLIPs existence is that is that we were unable to push informational proposals to BIPs because they were not strictly about Bitcoin.
@prusnak No inconsistancies, really. It's like if the RFP process were controlled entirely by Cisco. It would not be considered a vendor neutral process. 

I appreciate that you moved SLIPS into a separate repository. I'll check with my management today to see how they feel about contributing a couple of standards we are working on. 
So where does this stand? Shall I merge it as BIP 82, or hold off?
Hi All, It's been 20 months since this was last updated, would be nice to merge, update or close.
Clearly there are bigger issues regarding how to handle BIP-43 purpose field proposals and how ""bitcoin-focused"" they must be.  However it does not seem this is going to be solved anytime soon.

1. @gmaxwell Does your assignment of a BIP number mean that you believe this should be merged?
2. @justusranvier Would you be willing to submit this as a SLIP?  It does resemble [SLIP-48](https://github.com/satoshilabs/slips/blob/master/slip-0048.md) in that it defines a new `purpose` field per BIP-43.
",
dcousens,169,,Check that the R element is an integer sooner,closed,,"I'm not sure why this was delayed to later in the check,  but it seems obvious that you could check this much earlier in the computation.

This probably serves no (or at least a very limited) performance implication,  however,  it does read more lexicographically in terms of the format,  therefore I felt it was a worthwhile change.
",https://github.com/bitcoin/bips/pull/169,['bip-0066.mediawiki'],,,"['sipa', 'laanwj']","This shouldn't change the semantics of the code at all,  but it does provide a more consistent, lexicographical ordering in relation to the format it self.
It's too late to change this, now that BIP66 already went into effect. Must be careful not to introduce differences between the document and the consensus code in actual use.

Good point on the status, it should be changed to Final.
@laanwj if the two versions are semantically equivalent,  then shouldn't it be acceptable to change both?
If they aren't,  then perhaps we should find out why as it may be a bug.
ping @laanwj.

Lets close this if it isn't going to be merged.
Ok, closing then.
","We are checking that `0x30 [total-length] 0x02 [R-length] [R] 0x02` is still inside the signature, `5 + lenR`.
I therefore changed this to `Make sure the length of the R element is still inside the signature`
Is this really clearer? This makes the BIP text (slightly) further from the
used implementation.
This is true,  though I saw the `Status: draft` and thought it would be ok at least bring it up.

As you said, it is only slightly,  however it changes the order from:

```
  # STRICT BITCOIN FORMAT
// Minimum and maximum size constraints.

  # DER FORMAT/LENGTH
  # 0x02 INTEGERS ASSUMED
// A signature is of type 0x30 (compound).
// Make sure the length covers the entire signature.
// Extract the length of the R element.
// Make sure the length of the R element is still inside the signature.
// Extract the length of the S element.
// Verify that the length of the signature matches the sum of the length of the elements.

   # R DER FORMAT
// Check whether the R element is an integer.
// Zero-length integers are not allowed for R.

   # R STRICT BITCOIN FORMAT
// Negative numbers are not allowed for R.
// Null bytes at the start of R are not allowed, unless R would otherwise be interpreted as a negative number.

   # S DER FORMAT
// Check whether the S element is an integer.
// Zero-length integers are not allowed for S.

   # S STRICT BITCOIN FORMAT
// Negative numbers are not allowed for S.
// Null bytes at the start of S are not allowed, unless S would otherwise be interpreted as a negative number.
```

To

```
        # STRICT BITCOIN FORMAT
    // Minimum and maximum size constraints.

        # DER FORMAT
    // A signature is of type 0x30 (compound).
    // Make sure the length covers the entire signature.

            # R DER FORMAT
        // Check whether the R element is an integer.
        // Extract the length of the R element.
        // Zero-length integers are not allowed for R.
        // Make sure the length of the R element is still inside the signature.

            # S DER FORMAT
        // Check whether the S element is an integer.
        // Extract the length of the S element.
        // Zero-length integers are not allowed for S.

    // Verify that the length of the signature matches the sum of the length of the elements.

         # STRICT BITCOIN FORMAT
    // Negative numbers are not allowed for R.
    // Null bytes at the start of R are not allowed, unless R would otherwise be interpreted as a negative number.
    // Negative numbers are not allowed for S.
    // Null bytes at the start of S are not allowed, unless S would otherwise be interpreted as a negative number.
```

Namely, it removes an assumption that there is `0x02` DER integers by enforcing it earlier,  and it does most of the DER checking first,  with the stricter Bitcoin rules encapsulated to the bottom (and very top, respectively).
Though,  it might be debatable that the zero length checks are part of `STRICT BITCOIN FORMAT` section too,  but I 100% wasn't sure.

This doesn't actually change anything semantically, because we _only_ accept this format.  However, it is more representative of how it _could_ be parsed (strictly),  even if you used a ASN1 parsing library.
@sipa any further thoughts?
"
mruddy,168,,bip65: flexible expiration smart contract offer and acceptance,closed,,"bip65: flexible expiration smart contract offer and acceptance example usages

@petertodd Would you mind sanity checking this idea? I think it works and makes sense. Do you see anything wrong with it?

I put an example at
https://github.com/mruddy/bip65-demos/commit/305680e05f796d09d95ce80b6d11138633c709dc
",https://github.com/bitcoin/bips/pull/168,['bip-0065.mediawiki'],,,['petertodd'],"Hmm, I think this is big enough on it's own to be a stand-alone proposal, rather than just another BIP65 example. How about you publish this to the -dev list instead? While it's good to have examples, at some point they can make the BIP too long - this would be more appropriate as a link to a stand-alone proposal that's been peer-reviewed.
I'll work on getting that put together and onto the mailing list for review. Thanks!

I'll close this for now and maybe re-open it later to add a link to whatever comes out of that process.
",
ondra-novak,167,,Additional chains,closed,,"Additional chains are chains that can be exported as xpub and shared with a third party. Currently, user have to use new account, and coins sent there must be transferred to the main account which brings additional fees and consumes user 's expensive time.
",https://github.com/bitcoin/bips/pull/167,['bip-0044.mediawiki'],,,"['prusnak', 'dabura667', 'laanwj']","NACK.

BIP-0044 defines structure of the HD wallets and software wallets behavior. Your change modifies this behavior significantly and will introduce inconsistency among BIP-0044 compatible wallets. I suggest you create a brand new BIP with your own number.
BIP 44 is stil marked as ""Draft""

I disaggre that proposal is significant change. Wallets still don't need to allow additional chains to meet the BIP 44 requirements with my extension. Additional chains should be just an option ... but it need to be defined anyway.
The whole purpose of creating BIP44 was to create a standard that will guarantee interoperability among various implementations, because the label ""BIP32 compatible"" was meaningless as it offered lots of freedom. Your change wants to do exactly that.

""Just an option"" is not an option for this standard. :-)
No, i want to include the feature ""additional chains"" to all BIP 44 
compatible wallets. Yep, it means to update software of all existing wallets
including the Trezor. 

---------- Původní zpráva ----------

Od: Pavol Rusnak 

Datum: 1. 7. 2015 v 17:40:05

Předmět: Re: [bips] Additional chains (#167)

The whole purpose of creating BIP44 was to create a standard that will 
guarantee interoperability among various implementations, because the label 
""BIP32 compatible"" was meaningless as it offered lots of freedom. Your 
change wants to do exactly that.

—

Reply to this email directly or view it on GitHub
(https://github.com/bitcoin/bips/pull/167#issuecomment-117719479). 

# 
This will not happen. :-)

Could you describe a scenario where creating a new account does not work, while creating a new chain does?
NACK

This proposal makes no sense and is unclear.

Why would I give you my main account xpub m/44'/0'/0' just so you can generate addresses on the change layer?

Zero privacy, as you give away all transactions.
point is that you don't want to give anyone your external chain. You should 
be able to create new chain, for example 2, which has own xpub. However 
outputs in this chain are still considered as outputs belong to whole 
account. Transaction history is also merged with external and internal 
chain. This cannot be achieved with new account.

Goal is to generate xpubs for third parties instead addresses where address 
reuse is still unwanted.

---------- Původní zpráva ----------

Od: dabura667 

Datum: 1. 7. 2015 v 17:58:21

Předmět: Re: [bips] Additional chains (#167)

NACK

This proposal makes no sense and is unclear.

Why would I give you my main account xpub m/44'/0'/0' just so you can 
generate addresses on the change layer?

Zero privacy, as you give away all transactions.

—

Reply to this email directly or view it on GitHub
(https://github.com/bitcoin/bips/pull/167#issuecomment-117726250). 

# 
Sure, if I have m/44'/0'/0' xpub, I can generate m/44'/0'/0'/2 if I want to, but I can also generate 0 or 1 as well.

So you want to give everyone your xpub and tell them ""oh please don't look at 0 or 1. You can only look at 2""

Your current proposal sounds like that is what you are proposing.

Either way, your proposal is rejected, but if you ever decide to write it up and discuss it on the mailing list, you must be more specific and go into technical details.
m/44/0'/0' is your account

m/44/0'/0'/0 is account's external chain - to generate single addresses

m/44/0'/0'/1 is account's internal chain - to generate change addresses

m/44/0'/0'/2 is additional chain to share xpub

m/44/0'/0'/3 is additional chain to share xpub

...

etc.

user can generate address from the external chain or he can generate xpub as
additional chain. Both are presented as single payment address where xpub 
can be used for repeated payments. Mycelium wallet can also scan QR code 
with xpub and find next unused address to send bitcoins, so xpub can work as
well as address.

---------- Původní zpráva ----------

Od: dabura667 

Datum: 2. 7. 2015 v 02:12:18

Předmět: Re: [bips] Additional chains (#167)

Sure, if I have m/44'/0'/0' xpub, I can generate m/44'/0'/0'/2 if I want to,
but I can also generate 0 or 1 as well.

So you want to give everyone your xpub and tell them ""oh please don't look 
at 0 or 1. You can only look at 2""

Your current proposal sounds like that is what you are proposing.

Either way, your proposal is rejected, but if you ever decide to write it up
and discuss it on the mailing list, you must be more specific and go into 
technical details.

—

Reply to this email directly or view it on GitHub
(https://github.com/bitcoin/bips/pull/167#issuecomment-117858404). 

# 
Yes, I am aware of what you are trying to do, but your addition to the BIP44 when read in context does not make sense.

Try rewording the English.

But either way, this is rejected.
i don't care, if you picked the idea, you can extend it and/or apply it (i 
have no copyright for ideas), otherwise it isn't worth continuing in 
contribution for me, it would be waste of my time :)

---------- Původní zpráva ----------

Od: dabura667 

Datum: 2. 7. 2015 v 11:14:36

Předmět: Re: [bips] Additional chains (#167)

Yes, I am aware of what you are trying to do, but your addition to the BIP44
when read in context does not make sense.

Try rewording the English.

But either way, this is rejected.

—

Reply to this email directly or view it on GitHub
(https://github.com/bitcoin/bips/pull/167#issuecomment-117972280). 

# 
As said - this should be a new BIP. Retroactive support for new features cannot be added to old BIPs, as they are supposed to be a stable description.
@laanwj Could you please change ""Draft"" to ""Accepted"" or should I sent a pull request?
@prusnak BIP status changes should be discussed on the mailing list - after that you can submit a pull here that changes it in the index and the BIP itself.
Sorry, mailing list, on year 2015? Future technology.... and mailing list? 
These two are not compatible :D

Now I am understand why there are a lot of altcoins :D

Leaving discussion.

---------- Původní zpráva ----------

Od: Wladimir J. van der Laan notifications@github.com

Komu: bitcoin/bips bips@noreply.github.com

Datum: 3. 7. 2015 17:09:59

Předmět: Re: [bips] Additional chains (#167)

""

@prusnak(https://github.com/prusnak) BIP status changes should be discussed 
on the mailing list - after that you can submit a pull here that changes it 
in the index and the BIP itself.

—

Reply to this email directly or view it on GitHub
(https://github.com/bitcoin/bips/pull/167#issuecomment-118370950). 

""=
@laanwj Nah. Let's keep it draft then. I don't want any more discussions.
",
petertodd,165,,BIP Full-RBF deployment schedule,closed,,,https://github.com/bitcoin/bips/pull/165,['bip-full-rbf-deadline.mediawiki'],,,"['dabura667', 'luke-jr']","RBF is policy and is therefore n/a to the BIP process.
@luke-jr Not all BIP's are about consensus-critical things, e.g. your own [BIP19](https://github.com/bitcoin/bips/blob/master/bip-0019.mediawiki)
closing, no consensus
","Elaborate on how it is proven to be near-zero. This is an important point that deserves its own section imho, just just a reference to a mail (you sent, by the way) on the mailing list.

Even copy-pasting the contents of your mail + formatting would be much better.
I should do up a full writeup on this and post it to reddit...
"
petertodd,164,,BIP65: add deployment plan,closed,,"Direct copy of the BIP66 plan.
",https://github.com/bitcoin/bips/pull/164,['bip-0065.mediawiki'],,,['btcdrak'],"ACK
Deployment plan is going to have to change due to BIP101, closing.
",
tungpang2009,162,,"Revert ""Add C# implementation of BIP39 (NBitcoin)""",closed,,,https://github.com/bitcoin/bips/pull/162,['bip-0039.mediawiki'],,,['Thashiznets'],"@tungpang-2009 I think if you want that to happen you need to provide a rationale (reason) as to why you want the reversion?
",
tungpang2009,155,,"Revert ""Add C# implementation of BIP39 (NBitcoin)""",closed,,"Reverts bitcoin/bips#136
",https://github.com/bitcoin/bips/pull/155,['bip-0039.mediawiki'],,,"['Thashiznets', 'NicolasDorier', 'laanwj']","Reason for reverting?
these are two differents implementations, I think he thought it was the same lines, if that's the case, please close the PR.
Needs rationale.
",
petertodd,153,,Add type field to CHECKLOCKTIMEVERIFY (BIP65),closed,,"Allows for future upgrades, e.g. relative CLTV.
",https://github.com/bitcoin/bips/pull/153,['bip-0065.mediawiki'],,,,"Closing, seems we have rough consensus on https://github.com/bitcoin/bitcoin/pull/6124
",
nathanph,144,,Update bip-0039.mediawiki,closed,,,https://github.com/bitcoin/bips/pull/144,['bip-0039.mediawiki'],,,"['prusnak', 'NicolasDorier', 'voisine', 'laanwj']","Ping authors @voisine @prusnak
In theory this would be a good idea but reality tells otherwise.

While creating the original english wordlist I tried to use soundex & co. to detect similar words, but in the end I realized it removed a half of the list. This makes the process of creating wordlist much more difficult and leads to worse wordlist (because you introduce more and more obscure words).

Also the main purpose of bip39 is to create a mnemonic sentence to write on the paper, not to tell by the phone.
Agree with @prusnak 
You might don't care about my point for now, but BIP39 dictionaries will be used for other usage than BIP39.

I'm creating a bip, for remembering and transmitting over phone [any reference to the blockchain](https://github.com/NicolasDorier/BIP-MnemoReference/blob/master/bip-mnemo.mediawiki).

Eventually, people will use the dictionary to transmit information over the phone. The question is more whether you care about it or not.
The authors have made it clear that that is explicitly not the goal of BIP39 word lists. So for your BIP, you should use another scheme or list.
",
matiu,142,,adds bitcore to JS implementations.,closed,,,https://github.com/bitcoin/bips/pull/142,['bip-0032.mediawiki'],,,,"Closing this in favor of https://github.com/bitcoin/bips/pull/145
",
sipa,139,,Add max-integer size rule to BIP66,closed,,,https://github.com/bitcoin/bips/pull/139,['bip-0066.mediawiki'],,,,"Proposal retracted. See mailing list.
",
GeorgeKimionis,134,,BIP44: Added Coinomi to the list of supported wallets,closed,,,https://github.com/bitcoin/bips/pull/134,['bip-0044.mediawiki'],,,"['luke-jr', 'laanwj']","I wonder if maybe removing the ""Compatible wallets"" section might be a better idea. Lists like this don't seem to belong inside BIPs IMO.
@luke-jr I believe that these wallets serve as an excellent showcase for BIP44 which still is in `draft` status and not yet implemented by `Bitcoin Core`. If BIP44 was already part of the core implementation I would agree that the ""Compatible wallets"" section wouldn't really have a place inside this document as it would often be incomplete and difficult to maintain but also out of context. 
@GeorgeKimionis Bitcoin Core's wallet is not really anything special - if more than a few wallets have adopted this BIP, its status should probably be progressed beyond Draft.
I agree that a list of supported applications doesn't really belong in a standards document.
Having the list _somewhere_ makes sense though, for people that are looking to implement it and looking for an example implementation.
@luke-jr even if it's not it would still be easily accessible by anyone who would want to get their hands dirty with a `Multi-Account Hierarchy for Deterministic Wallets` approach for their own solutions in which case the core implementation would serve as a great example, so if it's not for this document let's keep the list somewhere else, as @laanwj proposed. 
As no one seems to be working on moving this anywhere else, I'm fine with merging this. Needs rebase, though.
Still needs rebase.
",
Thashiznets,126,,Update BIP39 Add reference to a .NET implementation,closed,,"Hello, I have added a reference to my .NET implementation of BIP39 into the specification documentation.

I am writing ""modules"" in .NET that can be maintained independently without having to do full blown upgrades etc. when one spec changes or whatever. So I have my BitcoinUtilities module which provides the BouncyCastle crypto stuff and then any other shared functionality between modules and I will be writing modules for BIPS as I have done for BIP39. I have wrote a module (KeyCore) which does the legacy style private keys where each key is formed from a crypto random 32 byte seed, Then can determine the WIF/WIF Compressed and the two addresses from the seed, however I realise everyone is heading to HD wallets and I plan to write a BIP32 module as well.

This BIP39 module is correct for all the English test vectors, has unit tests to test as much and I have thoroughly documented my code. Also providing a demo GUI to demonstrate usage.

This is a PCL so it will work on all modern platforms, Windows Phone, Windows RT, Windows Desktop etc. (Demo GUI is Windows Desktop for maximum compatibility as people may not have Windows Phone SDK etc).
",https://github.com/bitcoin/bips/pull/126,['bip-0039.mediawiki'],,,"['rubensayshi', 'sipa', 'slush0', 'luke-jr', 'laanwj']","Where the pullers at? ;P
Ping @slush0 @voisine @ebfull 
![bip39demogui](https://cloud.githubusercontent.com/assets/2297007/5351234/08aec94a-7fa7-11e4-9451-8a3f994471f6.PNG)
Here is image of Demo Gui. One could actually use this to create mnemonic sentences to provide seed bytes etc. if they wished, as it has been designed to show how you would use it.
Please use a more descriptive commit message, ""Update bip-0039.mediawiki"" doesn't tell much.
This is my first pull ever.....it just put that stuff there which is why I wrote the comment there explaining what I was doing? Do you pull stuff based on the title or what? Do I have to find a way to edit the title before you'll pull it is that what you're saying?
Edited the title is that descriptive enough?
Hmmm guess I didn't make it descriptive enough then?
Cool, thanks! I don't do .NET, but any implementation covered by unit tests is welcome!
No worries! Yea all English test vectors pass :) If you would like to fire it up and verify as much, happy to help you get setup in Visual Studio :)
@slush0 unfortunately it would appear that implementations are not welcome unless you meet some kind of selection criteria in the pull request title as per @laanwj remarks and no actions of it being merged/pulled whatever you call it.
@Thashiznets The commit message should explain what is being changed...
@luke-jr is the commit message the title? because I did write a message at the time of commit (first in this thread) specifying what I'd done etc. And this is my first ever contribution to anything and it auto generated the title to be update bips39 blah blah and I thought that the title was acceptable as it was an update to the bips39 and I described what I was updating in the comments here? Titles could surely get quite large if you had to describe everything you were doing in a title surely? However I did amend the title in any case to describe what is being achieved as it is such a subtle update it fits in the title easily.
""Add reference to a .NET implementation"" would be perfectly acceptable as commit message.
So I know I'm on the same page, is the title the commit message? Or is the message I write here independent of the title the commit message?
This is a pull request, it's a github thing where you describe why you want to have some change accepted.

The commit message is the message on the change that becomes part of the repository. The commit message is currently:

```
Update bip-0039.mediawiki

Hello, I have created a .NET version of the BIP39 specification for the community. It is a Portable Class Library so it can be used in anything newish .NET so Windows Phone, WinRT, full blown .NET 4.5 etc.
```

I assume the request is to change the ""Update bip-0039.mediawiki"" to something like ""Add reference to .NET implementation of BIP39"". The message that follows doesn't really belong there.
Ah ok I see, so I have mentioned what I'm doing but not what I'm changing in the doco in that message. Where can I find that message to alter it?
Actually I see that message under the ""commits"" tab, but it seems there is no way for me to edit it :(
Shall I open a new pull request? Or can we agree that I will be more vigilant next time and I shall seek to specify changes in the commit message next time I contribute something and allow this one through this time, chalking it up to my inexperience as it was my first time contributing and I didn't really know.
@Thashiznets I guess you created this PR (including the editing of the file from github) - you'll have to use git to change the commit message, I don't think you can do that from github.

or just close this and do it again ... (which might be easier for you)

If you want to try doing it from the command line that would be something like:
`git clone git@github.com:Thashiznets/bips.git`
`cd bips`
`git checkout patch-1`
`git commit --amend`
_now you should be prompted to edit the message_
`git push -f origin patch-1`

**warning** pushing with force (-f) overwrites what is on github, you should always be careful doing this and try to avoid doing it on branches where you work together with other people.
""Clone failed.
Cannot fetch branches and objects. See console output for details.""

Console Output: ""fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.""
Look this is ridiculous. I'm no longer going to bother, It's not like there is any incentive for me to contribute I just wanted to......but seeing as you clearly don't want me to contribute...no worries.....haters gonna hate I suppose! Fark no wonder Bitcoin is flailing.......if you're that petty that you don't let someone contribute based on such a small thing as they erroneously type a different comment than you expect on their first ever contribution, what hope does a crypto currency have. You have fun killing off anyone that shows an interest in it and perhaps doesn't use linux and/or python and your other tools like git (I'm aware Visual Studio is using git tools in the background, but that is not me) and still expect it to grow.......#dumb

(Thank you to those that tried to help me bypass/please the bureaucracy)
@rubensayshi you guess correctly. I used the web interface on this site. I haven't used git a day in my life, Visual Studio does all the stuff for me. With my repositories, I create them on this site, I put the link from this site in Visual Studio and it does the rest. I click commit to package my code to my repository then click sync and it makes sure what is on my computer is the same as what's on github. That simple......none of this type this here do that there.....this is what makes Visual Studio so great.

Thank you for trying to help me tho.
Just delete this PR and create new one. No neeed to fight git at all.

On Tue, Dec 16, 2014 at 4:11 AM, Thashiznets notifications@github.com
wrote:

> Closed #126 https://github.com/bitcoin/bips/pull/126.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/126#event-208058543.
You could also just have _asked_ if one of us would handle it for you. I'd have been glad to. But if you want to get rude, well have fun, I'm not going to bother.
@laanwj I thought I did handle it? I thought the title was the commit message and I edited it and asked if it was better and you said nothing? How was I supposed to know what the commit message was? And several people as you can see did come on here and try to help me....so after instruction by them I was still not able to achieve what you desired......yea good one mate....I'm the rude one. And if you were glad to edit it how you wanted it, why didn't you just go ahead and do that seeing as it is you that has the issue with it??? I didn't even know that I had edited the incorrect part, let alone that the part you expected me to change was not even editable from the GUI I used to create it..... 
I'm very busy and I don't monitor all these issues 24/7. I also have no obligation to. But if I had seen this it'd be kind of easy to change the message while merging. Anyhow those silly rants don't really speak in your favor, I don't want to help you.
That's the thing....you're not helping me.....I was not contributing for myself.....#duh

But you have an obligation to enforce that I type the right message in the thingy? So you like to take on an authority with no obligation to help anyone who doesn't meet your criteria? It's not a rant dude.....that's all about it.
Hey, just drop the PR, create new one and stop crying here.

On Tue, Dec 16, 2014 at 7:32 AM, Thashiznets notifications@github.com
wrote:

> That's the thing....you're not helping me.....I was not contributing for
> myself.....#duh
> 
> But you have an obligation to enforce that I type the right message in the
> thingy? So you like to take on an authority with no obligation to help
> anyone who doesn't meet your criteria? It's not a rant dude.....that's all
> about it.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/126#issuecomment-67118231.
@slush0 are you serious? There is no point, old mate has decided he ""doesn't want to help me"" ..... and since he has to approve it, it would be a waste of time..... It would just sit there again.
I don't consider clicking the merge button ""helping"" that goes automatic. I just want to make sure that the commit messages make sense to someone looking at the history (ie `git log`). If you submit a new pull that is the same as this one but with the right commit message I'll merge it immediately.
Ok fine @slush0 done! :)
",
luke-jr,121,,BIP0065: Provide warning about miner incentives for proof-of-sacrifice,closed,,"While I think this is an important use case, the current BIP doesn't reasonably support it. Unfortunately, I have to agree that addressing this use case may be more trouble than it's worth right now.
",https://github.com/bitcoin/bips/pull/121,['bip-0065.mediawiki'],,,"['petertodd', 'laanwj']","Given that real-world proof-of-sacrifice applications will be using unlocking far off into the future to get past business cycles I'm pretty skeptical that this will actually be an issue.

In any case a better pull-req would be to describe how a future OP_CHECKBLOCKHEIGHTVERIFY opcode could be used in conjunction with CLTV to solve this problem, e.g:

```
scriptPubKey: CHECKBLOCKHEIGHTVERIFY 52560 ADD CHECKLOCKTIMEVERIFY
```

spent with:

```
scriptSig: <blockheight of transaction containing scriptPubKey>
```
@luke-jr are you planning on reworking this change according to @petertodd's comment, or should this be closed?
",
evoskuil,119,,Replace invalid example address with bip20 address,closed,,"`175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W` has an invalid checksum so these example URIs fail on validating parsers
",https://github.com/bitcoin/bips/pull/119,"['bip-0021.mediawiki', 'docs/Bitcoin Direct Payment.pdf', 'docs/Bitcoin Payment Requests.pdf']",,,"['schildbach', 'TheBlueMatt', 'luke-jr', 'laanwj']","Paging @thebluematt as author.

My two cents: There's nothing about address validation in the document. Performing the validation in the document should work fine with a silly example address. 

It may even be good to use a bad address, for the same reason that RFCs generally use unroutable IP ranges for examples, namely that people don't accidentally end up using it and (say) flooding someone or in this case sending them coins.
The document specifies that the value in question be a bitcoin address. While the example is not normative it should at least be representative. It is not a bitcoin address and therefore might as well be _anything_, making the example fairly pointless, if not counterproductive.
I dont care either way (the address in question was deliberately bad - it was the one on the wikipedia Bitcoin page, hence the last char was replaced with a W).
I ran across this issue in using the BIP-21 examples as test vectors and fodder for [bx uri-decode](https://github.com/libbitcoin/libbitcoin-explorer/wiki/bx-uri-decode) documentation. I've done this in a good number of cases and this is the first time I've encountered an invalid example. There are quite a few valid addresses out there that people can accidentally spend money to. If the intent is to provide a guard against accidental spend then I would at least warn people that the address is invalid so that they don't waste time chasing non-existent bugs.

BTW, the comment on my commit should have said that the replacement address was from the BIP-20 example (vs. BIP-21).
FWIW, from time to time, a user approaches me with a bug: Bitcoin Wallet does not parse certain bitcoin URIs. It turned out they were trying to use the malformed URIs from this document.
If you're changing it to a valid address, I'd recomment using a testnet address. Accidentally sending coins is a lot less serious there.
Maybe change the label to something else too, if it isn't going to be _my_ address. :p
There doesn't seem to be author consensus that changing this is an improvement, so I'm closing this pull.
",
sipa,117,Proposed BIP modification,Several updates to BIP62,closed,,,https://github.com/bitcoin/bips/pull/117,['bip-0062.mediawiki'],,,"['petertodd', 'luke-jr', 'laanwj']","Removed the hashtype requirement (as it's not required for malleability protection, and may be useful otherwise), and added a clarification that even non-evaluated CHECKMULTISIG signatures need to be strict DER (even though the implementation of the opposite is easier, the semantics become more complex to explain). Thanks to @petertodd for pointing that out.
Needs rebase
Stil needs rebase (or close, if no longer relevant).
Closing this - IIRC BIP62 is retracted
","Seems to me the permanent rules should be #1 and #3. It's conceivable we may at some point want executable scriptSig content...
This limitation _might_ be better restricted to v2-only.
Is there a benefit to saying ""v2 blocks become invalid entirely"" vs ""the new rules apply to v2 blocks""? I'm thinking that this could gradually turn past-block-versions into an extra nonce...
Not requiring #2: If it's controversial, we should drop the requirement, but I really no reason.
Requiring #3: no. There may be existing P2SH scripts (unknown to the senders) which do a non-compliant push (for example for the multisig counts).
Fixed. I removed it entirely, as it's not necessary for malleability protection.
Agreed, maybe this needs some more discussion as it diverges further from how BIP34 worked.
@luke-jr I've got a use-case for executable scriptSig content to be able to sign how much fees a tx spends, among many other cases.
Making v2 blocks invalid immediately is problematic as non-upgraded miners will end up creating false confirmations; this isn't a security issue as v2 blocks containing invalid v2 transactions are invalid.

I'd strongly prefer we don't set a precident on this; it's also coercive re: forcing people to upgrade.
And yeah, I think only allowing pushdata ops in P2SH scriptSigs was a mistake.
@petertodd does that mean you agree with @luke-jr's suggestion (make the new consensus rules apply to v2 blocks as well, once 95% threshold is reached)?
Ok, removed rule 2 being mandatory.
@sipa If you use @luke-jr's suggestion, then it's highly likely that v2-producing miners will end up creating invalid blocks given the existing rules, particularly the rule to apply strict DER encoding to even non-evaluated CHECKMULTISIG signatures. (that code isn't even written yet!)
@petertodd it's inevitable to have some forking... the alternative means almost by definition causing 5% of the hashrate to start producing invalid blocks just by them being non-v3.
Sure, point is, that negates my objection as the intended result isn't achieved anyway. So in that case we might as well just reject < v3 blocks. SPV clients should then implement the v2 -> v3 majority rules and also reject < v3 blocks after the switchover.

edited: stupid markdown
Actually, I'm not convinced. There is no actual release currently that allows any P2SH (afaik), and in every currently-standard script checksig failure results in script failure. The only place where the strict DER encoding for non-evaluated signatures matters is in case CHECKSIG failure does not result in script failure.
@sipa Hmm, actually that's a good point; I think it meets my objection to my own objection. (is there a term for that? maybe a nice beautiful German word...)
"
shea256,116,,fix typo in bip-0010,closed,,,https://github.com/bitcoin/bips/pull/116,['bip-0010.mediawiki'],,,,,
sipa,115,,Clarify the interaction between BIP62 rule 6 (clean stack) and P2SH,closed,,,https://github.com/bitcoin/bips/pull/115,['bip-0062.mediawiki'],,,['luke-jr'],"Superseded by #117 (which includes @luke-jr's suggestion).
","IMO this shouldn't apply to all version>=2 transactions - too limiting on future stuff...
"
sipa,113,,"BIP62: Instead of repeating some problem names, give the rules meaningful names",closed,,,https://github.com/bitcoin/bips/pull/113,['bip-0062.mediawiki'],,,['laanwj'],"ACK
Superseded by #117.
",
robjohnson189,109,,Update bip-0044.mediawiki,closed,,"added additional Registered coin types
added mycelium as a Compatible wallet
",https://github.com/bitcoin/bips/pull/109,['bip-0044.mediawiki'],,,['laanwj'],"Adding the compatible wallet is fine. Please don't add any coin types in bip-0044 though.
",
schildbach,106,,"Amend BIP72 by an ""h"" parameter, which contains a hash of the…",closed,,"…PaymentRequest message that is fetched via the ""r"" parameter.

The hash is meant to link the trust anchor (e.g. the QR code) to the payment request message in a secure way. This will solve the problem several apps are comparing address+amount fields as a workaround instead, preventing some advanced BIP70 usecases. When these apps read a matching hash, they need not compare any of the other fields.

Thanks to Julian Haight for helping with the standard.
",https://github.com/bitcoin/bips/pull/106,['bip-0072.mediawiki'],,,"['gavinandresen', 'AndySchroder', 'jgarzik', 'laanwj']","Sounds like a good idea to me.

However various people have protested against non-trivial changes to current BIPs in the past, especially those in common use. Instead of  'amend' BIP72 it may be better to add a new BIP that describes this.

Also this needs a discussion post on the mailing list.
Thanks for reminding me on the discussion post. I have posted now.
Procedural:  We don't patch deployed BIPs.

A new BIP is needed.
@jgarzik I had already said that.
@jgarzik It was never finished, so I thought its a better idea to ""patch"" it. But I'm ok with moving to a new BIP number as well if that makes the majority happy.
New BIP number.
How can we move this forward?

@schildbach Have you proposed this as a new BIP yet?
A new BIP has been drafted up that includes this improvement as well as several others. As soon as @schildbach and I finish fine tuning a few sentances, it will be announced for feedback/review.
Thanks for letting me know @AndySchroder I'll close this issue then.
",
gurnec,104,,Update README statuses to match individual BIPs,closed,,"This is intended to be a simple copy edit fix: there are a number of BIPs whose status has been updated in the individual BIP, but whose status has not been updated in the README file.

Although most of the changes are straightforward, the exact status of BIP15 is a little unclear and may require a bit of additional scrutiny...
",https://github.com/bitcoin/bips/pull/104,"['README.mediawiki', 'bip-0001.mediawiki']",,,"['schildbach', 'gavinandresen', 'laanwj']","BIP72 is Draft for good. It has not been agreed yet, and actually I'm currently working on an amendment that will hopefully finally reach an agreeable state.
> BIP72 is Draft for good. It has not been agreed yet,

This commit is only trying to update the descriptive readme page; the equivalent of fixing some typos. If a normative change to a BIP should be made, it should probably come from a more ""official"" committer... (it looks like it was @gavinandresen who changed it to Final a few months ago).
@schildbach : is this the issue with supporting bluetooth/NFC ?

That should be it's own BIP, in my humble opinion, since it extends functionality and isn't some mistake in the existing BIP72.  Quoting BIP 1: ""The more focused the BIP, the more successful it tends to be.""
It's the issue with the missing trust anchor. I'll submit a PR soon.

Bluetooth support can go into a different BIP, agreed.
#108 has been merged now, I think this one overlaps completely, or not?
@laanwj Except for the minor mismatch in BIP1, they were identical. Thanks for merging one of them, I do think it helps. As far as I'm concerned, this PR can be closed.
",
bitcoinsSG,96,,improved sentence flow & gender neutrality 4 futur,closed,,,https://github.com/bitcoin/bips/pull/96,['bip-0001.mediawiki'],,,"['luke-jr', 'laanwj']","I'm not sure this is really an improvement. But I'm not native English so I leave that up to others.
@laanwj don't worry about it.  I'll submit a pull request with more substance in the future; for now I'll close this one.
","Unnecessary. ""He"" is already gender-neutral in English.
Shouldn't this ""Except"" be ""Especially""? O.o
I was taught otherwise with respect to gender sensitivity, perhaps it's not a big deal. It is your call. ""They"" could also be used even for singulars. See http://writingcenter.unc.edu/handouts/gender-sensitive-language/ if you're inquisitive.
I don't think we need to appease political correctness nonsense. The English language has ""he"" as gender-neutral, and ""they"" as plural.
I wasn't sure about this; the last sentence that is. It seemed a little superfluous, especially given the reference to current time. What is the current time? When the commit was made? Ofcourse, I dare not completely erase it, so I worded it to improve flow. ""Especially"" does sound a lot better. Is the author trying to say that during times of relatively low volume, editors may pass judgements? or that they may take on additional responsibilities? 
"
slush0,93,,Reserve coin type 2 for Litecoin (implemented in Electrum-ltc),closed,,"BIP44 has list of reserved coin types other than Bitcoin, please accept this simple pull request which make reservation for Litecoin.
",https://github.com/bitcoin/bips/pull/93,['bip-0044.mediawiki'],,,"['gmaxwell', 'gavinandresen', 'jgarzik', 'andre-amorim', 'bip39JP', 'luke-jr', 'laanwj']","NACK, Off-topic.
It's on topic in context of BIP44.
Bitcoin Improvement Proposals are for Bitcoin.
Ok, then please remove BIP44 from BIPs completely, we will use our own repository for such specifications. Such discussions about every single line are really annoying.
ACK.
:.  Andre Amorim      .:

Key-ID:

A70B444E

Fingerprint:

FAAD3B6556A8877B938EAB2FC05E2CB0A70B444E

On 16 August 2014 01:51, Gavin Andresen notifications@github.com wrote:

> ACK.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bips/pull/93#issuecomment-52377163.
ACK
@slush0 Discussions are to be _expected_ for BIPs; that's the whole point of collaboration. It isn't merely a tool where one person asserts their pre-decided 'authority' on others, but one where multiple people _discuss_ and come up with a standard that works for everyone. With regard to this specific case, the change clearly goes contrary to the purpose of BIPs; one reasonable/workable alternative would be to reserve all numbers outside of Bitcoin and testnet for an external number repository. I appreciate your efforts to collaborate, but please don't expect to simply get exceptions because you threaten to stop collaborating.

@gavinandresen @jgarzik You're setting a dangerous precedent ACKing things because of threats made. (Edit: My apologies for jumping to conclusions if that isn't your actual reason)
@luke-jr Something receives my ACK here because it is the right thing to do, from a technical perspective.
@jgarzik Please explain how defining standards for Litecoin in any way improves Bitcoin. BIPs have had a certain policy against defining altcoin things up to now.
@luke-jr I understand the idea of keeping BIP about Bitcoin, but in reality, most alt-coin devs come to the Bitcoin bips section to gather information on implementing BIP protocols into their alt softwares.

tbi I think BIP32 is less about Bitcoin and more about crypto in general (as it defines a method to generate Public private keypairs.) and so I think that it seems prudent to have an index of standardized usages in a place where anyone looking up the protocol will see them.

This prevents things such as Hive-js (web.hivewallet.com) which uses the same `m/0'/0/k` for both Bitcoin AND Litecoin. (revealing the same public keys on both blockchains.)

(slightly OT, but this is why I personally think that BIP32 should add a prominent link pointing to BIP44, and the `m/0'/0/k` stuff on BIP32 should be moved to BIP44 as a ""This is what people used before BIP44"" side-note instead, but that's another discussion for another day)
@luke-jr ""Please explain how defining standards for Litecoin in any way improves Bitcoin""  It prevents conflicting or colliding use.    If it were a case that extensive specification were required I'd say instead the LTC specific things should be specified elsewhere and we should have a reference saying that codepoint is reserved for that other use. ... but here where only the fact that its reserved for litecoin is harmless.

Some color on this— there is some amount of discomfort in the Bitcoin technical community where people involved in some altcoin or another exploit Bitcoin's adoption and brand to promote their own thing (e.g. if you call for speakers on Bitcoin you will often be flooded with people who will really spend 80% of the time talking about some alt thing) and create an appearance of increased legitimacy.  This has created some understandable discomfort for Bitcoin people who feel that altcoins are taking without giving back... and it's a legitimate reason to not expend a bunch of resources on some alt BIP proposals. It's often hard to define a good inclusion criteria other than none or all ... but I think at this point we've now already wasted a bunch of effort by discussing it at all, when it's just a harmless entry. 

On that basis—  ACK, though if later it seems that we're being flooded by requests to register other altcoin IDs especially for altcoins which are not widely used ones I'm going to come back and suggest that we go and break out these definitions into some registry of altcoin version IDs, instead of individual specifications (and perhaps suggest we setup some natural rate limiting procedure for it (like paying bitcoin mining fees). :) I don't want to be in the business of gate keeping which altcoins can get listed, and yet also don't really want to be degrading the documents with altcoins which have intentionally offensive names or which are widely regarded as malware or other such nonsense.
Even aside from what's already been discussed, maybe there ought to be a numbered ""crytocurrency namespace id"" registry that can be used by multiple protocols, including this one, but also including others (like the payment protocol, if it didn't use strings already). This avoids not only trying to iterate every possible altcoin here, but also having to iterate altcoins for every protocol that wants to represent them by integer.
Pulls like this have been closed unmerged many times.
See #83, #76
Not sure why it now suddenly gets ACKs.
Wow, the exact same change too. I suggest we go ahead and merge #84 - it's been sitting there for a month and looks quite reasonable.
Okay, I'm fine with #84. If you merge that, please ignore and close this PR.
Closing in favor of #84
",
mikehearn,88,,Draft of a BIP for getutxos message.,closed,,"I'm not sure what the process is for picking a number, so I just grabbed one that's free.

Discussion of anything trivial (spelling etc) here please.

Discussions of anything substantial (design etc) on the mailing list please.
",https://github.com/bitcoin/bips/pull/88,"['README.mediawiki', 'bip-0039.mediawiki', 'bip-0064.mediawiki']",,,"['gmaxwell', 'wozz', 'jrick', 'sipa', 'maraoz', 'jgarzik', 'laanwj']","@mikehearn you should mail gmaxwell at gmaxwell@gmail.com to assign a number (that's from BIP 1)
@gmaxwell Please don't assign BIP45 as that's what we're using for the reference implementation of our bip32+bip43 multisig structure in copay. See: https://github.com/maraoz/bips/blob/master/bip-NNNN.mediawiki. BIPs 44 to 50 should be left for particular BIP43 structures, IMO
QED.

That's why we don't want people to use numbers before requesting them (at least you don't have them in the document itself yet...).
Indeed.  The standard, _documented_ policy is that you cannot self-assign numbers, for precisely reasons like this.
Seems like a timesink to me - we have a numbers list in the README and a list of pending changes to it in github, that's all we need to avoid numbering conflicts. But whatever. Wherever the global counter is kept is neither here nor there. It's the content that matters.
...and we have just had a numbering conflict, precisely because of this.  Just ask @gmaxwell who is the maintainer for a number when it is time.

Additionally, per BIP discussion, automatically assigning (or making up) BIP numbers implies to the general public that the BIP is accepted.  We have already had confusion related to that in the past.

The IETF RFC process should work fine here:  Create an implementation, create a draft, push to the drafts/ area.  Comment feedback comment, get a BIP number.
There is an implementation and I think we had enough feedback on this already in https://github.com/bitcoin/bitcoin/pull/4351 . It was also posted as draft to the mailing list. IMO this should be assigned a number now. One can agree or disagree with the protocol change itself, but I think @mikehearn did a fine job in documenting and implementing it, and there is no need to hold this up further for procedural reasons.
Sure, wasn't intending to. BIP 0064.
It appears to be correct in the implementation, but I believe you meant to use uint32, not uint256, for the height of a ""result object"".

edit: actually, implementation has an int, and not just for the height, but the version as well.  Why is that not a fixed size type?  And why does the signed-ness not match the BIP?
Good catch, thanks!
Squashed and fully renamed to BIP 64. All feedback has been incorporated.
","The last part of this line isn't showing up right.
"
erasmospunk,83,,BIP 44 - Added some alt coins to the registered coin types list,closed,,"Some coins added to the list: Litecoin, Peercoin, Dogecoin, Darkcoin.

@slush0, @prusnak did you had some other order in mind or working on?
",https://github.com/bitcoin/bips/pull/83,['bip-0044.mediawiki'],,,"['prusnak', 'laanwj']","This was rejected last time, see #76 
I see and I kind of agree that if BIP44 is used more this repo will be cluttered with pull requests.

Is it ok if I create a new PR to warn other people that this BIP is not a central directory for the registered coin type?
Yeah that sounds like useful information to avoid more people wasting time.
@erasmospunk We can talk about assigning particular numbers when there already is a working BIP44 wallet for <alt>coin. Then you can ask for assigning a coin type into this document: https://github.com/satoshilabs/docs/blob/master/slips/slip-0044.rst

Feel free to create a PR that modifies the ""Registered coin types"" section to include information about SLIP-0044. (Git repo and deployment here: http://doc.satoshilabs.com/slips/)
That sounds good guys, creating a new PR in a bit.
",
voisine,82,,BIP39 grammar correction,closed,,,https://github.com/bitcoin/bips/pull/82,['bip-0039.mediawiki'],,,,,
AndersBNielsen,79,,Update BIP31 to Active instead of Accepted,closed,,"Pretty self-explanatory. When a BIP is in the current Bitcoin Core production release and is generally accepted, it's status should be ""Active"" instead of ""Accepted"".
",https://github.com/bitcoin/bips/pull/79,"['README.mediawiki', 'bip-0031.mediawiki']",,,['laanwj'],"According to BIP 1 `Some Informational and Process BIPs may also have a status of ""Active"" if they are never meant to be completed. E.g. BIP 1 (this BIP).`
This is not an informational or process bip so IMO this status should go to Final, not Active.
I proposed this  (along with other status changes) on the mailing list, so closing this pull.
",
jprichardson,76,,Update bip-0044.mediawiki,closed,,"Add constants for `Litecoin`, `Litecoin Testnet`, `Dogecoin`, and `Dogecoin Testnet`
",https://github.com/bitcoin/bips/pull/76,['bip-0044.mediawiki'],,,"['gavinandresen', 'dcousens', 'prusnak', 'luke-jr', 'laanwj']","Or even better... some deterministic way to generate the constants for each crypto currency? For sake of compatibility, keep Bitcoin/Testnet at `0` and `1` respectively. 
""BIP"" stands for ""Bitcoin"" improvement process.

This belongs in LIPS/DIPS, in my humble opinion. I don't want to get dragged into which coins deserve constants in BIPS and which ones don't.....
> ""BIP"" stands for ""Bitcoin"" improvement process.

Yup.

> Coin type is a constant, set for each cryptocoin. Cryptocoin developers may ask for registering unused number for their project.
> 
> The list of already allocated coin types is in the chapter ""Registered coin types"" below.

Might I suggest removing the aforementioned then? Perhaps the entire `Coin Type` section? Or make a statement about delegating the constants to the authority/developers of each respective crypto currency?
Agree with @gavinandresen here. Maintaining a list of altcoins is outside of the scope of BIPs.

Let's just leave ours (bitcoin and bitcoin testnet) specified, and leave the rest up to developers of altcoins themselves.
@jprichardson We can talk about assigning particular numbers when there already is a working BIP44 wallet for <alt>coin. Then you can ask for assigning a coin type into this document: https://github.com/satoshilabs/docs/blob/master/slips/slip-0044.rst

Which is regularly deployed here: http://doc.satoshilabs.com/slips/
Is there any reason not to use a deterministic process for this instead of a centralized register?
I understand we are currently constrained to 31 bits and truncating `SHA256('bitcoin')` or `SHA256('litecoin')` is probably less than ideal. 

But we are only constrained to that if we continue to separate coins using a derivation index, instead you could embed the separation into the derivation process.

Perhaps `data = serP(point(kpar)) || ser32(index) || 'bitcoin'` would be simpler?
@dcousens your second idea seems ok, but i'm afraid it's too late to change it now
@prusnak why is it too late?

This is still a draft, and I'd argue the centralization of constants through a 3rd party arbitrator is a critical flaw.
> @dcousens your second idea seems ok, but i'm afraid it's too late to change it now

Why is it too late to change it now? As far as I can tell, BIPs change frequently, and since this is in the draft stage, what could it hurt to change it to something that makes more sense?
Because the change involves changing BIP-0032 which is Accepted for quite some time. That also means this is not the right thread to propose the change.
Out of interest, why was the BIP32 constant `Bitcoin seed` not changed?
It seems like it was the most straight forward and intended value to change to enable a cross-currency BIP32 implementations using a single master seed. 

Was it purely to adhere with BIP43?
BIPs are _Bitcoin_ Improvement Proposals; ""cross-currency"" isn't a goal. (altcoins that wish to use Bitcoin-designed protocols are free to make appropriate changes without worrying about the BIP specification)
@luke-jr I don't disagree, yet this BIP centralizes entirely around a `coin_type`.

> Coin type is a constant, set for each cryptocoin. Cryptocoin developers may ask for registering unused number for their project.
@prusnak it doesn't involve changing BIP32, it involves changing this BIPs use/implementation of BIP32.
@dcousens right. but this is still something i would not rather do as it breaks compatibility with BIP32 and has couple of other disadvantages when it comes to implementation.
@prusnak what are the disadvantages?
",
gavinandresen,74,,Update status of payment protocol BIPS to active,closed,,"Payment protocol has multiple working implementations, so update to Active status.
",https://github.com/bitcoin/bips/pull/74,['README.mediawiki'],,,"['schildbach', 'AndersBNielsen', 'laanwj']","ACK for BIP70 & BIP71.
NACK for BIP72: It's incomplete. (See discussion about chain of trust between BIP21 PR and BIP70 PR)
@schildbach : can you be more specific about what you mean by ""incomplete"" ?  Certainly there are multiple implementations creating BIP72 URLs right now, so I believe 'Active' is the correct status, even if the BIP is imperfect (perfection is not the criteria for Active status).
Ok, I thought you mean ""Accepted"" rather than ""Active"". In this case I revoke my ACKs and change it to NACK for all: Refering to the definition of the Active state in BIP1, BIP7x's should be meant to be completed.

I will reply to the BIP72 issue separately.
~~ACK~~
re BIP72: The problem is trust. If you scan a QR code from a foreign phone (or use tap-to-pay),
you trust that that phone is owned by the one you want to send money to. BIP72 introduces this indirections via r= parameter but it fails to extend the trust to whatever resource is behind the URL.

Mike has once proposed to requiring the BIP70 PR to be signed with a key that matches the address from the BIP21 PR. I think that would be a reasonable easy way fix to the problem.
BIP1 is really fuzzy when it comes to the ""Active"" status and apparently it's not meant for what it sounds like.
As schildbach also mentions - ""Some Informational and Process BIPs may also have a status of ""Active"" if they are never meant to be completed. E.g. BIP 1 (this BIP)."" 
Closing this; according to BIP1 the statuses should be Final, not Active. This was fixed in later pulls.
",
NicolasDorier,69,,Test vectors bip70,closed,,"Some implementation links + test vectors
",https://github.com/bitcoin/bips/pull/69,"['bip-0070.mediawiki', 'bip-0070/NicolasDorierCA.jks', 'bip-0070/NicolasDorierCA.pfx', 'bip-0070/NicolasDorierMerchant.pfx', 'bip-0070/payreq1_sha1.paymentrequest', 'bip-0070/payreq1_sha1_omitteddefault.paymentrequest', 'bip-0070/payreq1_sha256.paymentrequest', 'bip-0070/payreq1_sha256_omitteddefault.paymentrequest', 'bip-0070/payreq2_sha1.paymentrequest', 'bip-0070/payreq2_sha1_omitteddefault.paymentrequest', 'bip-0070/payreq2_sha256.paymentrequest', 'bip-0070/payreq2_sha256_omitteddefault.paymentrequest', 'bip-0070/payreq3_validchain.paymentrequest']",,,"['schildbach', 'gavinandresen', 'wozz', 'mikehearn']","Although not standardized, there seems to be a tendency to use the .paymentrequest filename suffix for files containing BIP70 payment requests. It would make it easier to open your test vectors directly from a web browser.
Fixed
I'm not sure about the spec change at all. Are you sure you aren't just codifying some bug in the either the .NET or PHP protobuf library? The code in bitcoinj doesn't do anything special here and it verifies signatures just fine.
I have not changed the spec with this BIP, I am respecting it.
Does BitcoinJ verifies without_version_details payments in the test vectors ?

If it does not, then there need some clarification to make to the BIP.
What does it means ""verifies signatures just fine"", if the version_details is omitted on the wire ? 
As we talked at https://bitcointalk.org/index.php?topic=629176.20 this is a real interpretation problem we have, and I'm not sure what is intended by the creator of this BIP.

The question is : If the version_details is omitted in the wire, should it be included in the data that is signed ? From BIP70, it is since it specifies the signature include ""All fields serialized in numerical order"" (ie, even if version_details is omitted in the wire, the signature verification must include it)

Again, this is not a protobuf implementation bug, just a point unclear in the spec.
Does someone can put some light on this protocol ?
I re explain the problem for the 10th time.

The question is simple : 
Does the signature of a PaymentRequest from the wire with details_version omitted is the same as the signature of a PaymentRequest from the write with details_version not omitted with default value ?

If the response is yes, then you can pull this request, if the response is no, please make the BIP clearer.
The simple answer (after writing a little test case to see):

No, the signature of a PaymentRequest from the wire with details_version omitted is NOT the same as a request with details_version explicitly set to 1 and serialized.

I'll put making the BIP clearer on my (long) TODO list...
Perfect, so my test case is wrong. I got confused with the following sentence :  
""digital signature over a hash of the protocol buffer serialized variation of the PaymentRequest message, with **all fields serialized in numerical order**""

I need to change the test vectors
I clarified the BIP; see https://github.com/bitcoin/bips/commit/b2c0b87a9c5eac3fe7af3c7eb1655004fde19817
Excellent, I'll rebase and fix my test vectors later this week, thanks !
Thanks Gavin. The behaviour is as I thought it was.
I fixed NBitcoin, as well as the test vectors. I also added my own test certificate (+ private key) so implementers can verify if the signing process is correct.
Excellent; I'll pull as soon as I (or somebody else) has time to make sure the test vectors work with another implementation.

Question: when does the test certificate expire?
It expires in 2064
mikehearn, can you try parse it from BitcoinJ ?
Just tried most of them in bitcoinj. They fail with ""java.security.cert.CertPathValidatorException: subject/issuer name chaining check failed""

Did you get the order of the chain right?

Also: If those are ""vectors"", what's the supposed outcome (asserts)?
Here is a printout of the cert chain to analyze:

X.509 Cert Path: length = 3.
[
=========================================================Certificate 1 start.
[
[
  Version: V3
  Subject: CN=Nicolas Dorier
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 1024 bits
  modulus: 161683607155465416668943753903481315182858223542684446956210635897868237721237604824457500109786209274809315236072303379606790209573309211954183675785196631973482545120129722814911142426163961628316053512425138503661590965838221172088844425122708973402214894645746856968229057115842516587572634944130804939063
  public exponent: 65537
  Validity: [From: Mon May 28 19:03:41 CEST 2012,
               To: Thu May 15 19:03:41 CEST 2064]
  Issuer: CN=Nicolas Dorier
  SerialNumber: [   -01500cb9 0e]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 74 54 87 02 E4 7A 9C 2C   1D 76 23 0D 17 5B 12 9D  tT...z.,.v#..[..
0010: A5 28 4A 86 3F 56 3D EF   CF 5C 1D 36 F4 27 1D A7  .(J.?V=...6.'..
0020: C4 74 45 ED 45 91 8B F8   1B 91 FA DE BF 4F D5 A5  .tE.E........O..
0030: FB 92 13 90 2A EA B8 C9   D3 E5 72 E2 18 E3 5B A9  ...._.....r...[.
0040: 42 62 B5 94 50 F8 B9 8E   E4 42 38 B6 C0 8F 45 1B  Bb..P....B8...E.
0050: 09 A7 BD BC 5A 49 8D 4B   3A B1 9E D5 FE 08 3E 09  ....ZI.K:.....>.
0060: 03 B3 A0 F4 09 B1 6E 2A   30 D9 DA A8 8A 04 54 CE  ......n_0.....T.
0070: BA 99 BB 57 4F 3A B8 6D   8B EB 73 EB 03 00 8C 5E  ...WO:.m..s....^

]
=========================================================Certificate 1 end.

=========================================================Certificate 2 start.
[
[
  Version: V3
  Subject: CN=PositiveSSL CA 2, O=COMODO CA Limited, L=Salford, ST=Greater Manchester, C=GB
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 2048 bits
  modulus: 29402787957702507317780306364213973830182532969652433670394326405162679708957794812952528186671360101402663773281638237822357109677456950883959223788097025228995086097406556923089493348439882508576598699107690681813892595724377039274811465437985619917662261355508210000071168811413336587834829995959703448097021854860923273706823604455971700624064050326599832000490169505468007975041850748683286967883290664896219004304816049616606726172078153275667450514837678595356174391089139848809252947000182466754307532753807371454385714485937701601601364936574689320282390728145208599491243491293099872729668507545052455645123
  public exponent: 65537
  Validity: [From: Thu Feb 16 01:00:00 CET 2012,
               To: Sat May 30 12:48:38 CEST 2020]
  Issuer: CN=AddTrust External CA Root, OU=AddTrust External TTP Network, O=AddTrust AB, C=SE
  SerialNumber: [    076f1246 81459c28 d548d697 c40e001b]

Certificate Extensions: 7
[1]: ObjectId: 1.3.6.1.5.5.7.1.1 Criticality=false
AuthorityInfoAccess [
  [
   accessMethod: caIssuers
   accessLocation: URIName: http://crt.usertrust.com/AddTrustExternalCARoot.p7c, 
   accessMethod: caIssuers
   accessLocation: URIName: http://crt.usertrust.com/AddTrustUTNSGCCA.crt, 
   accessMethod: ocsp
   accessLocation: URIName: http://ocsp.usertrust.com]
]

[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: AD BD 98 7A 34 B4 26 F7   FA C4 26 54 EF 03 BD E0  ...z4.&...&T....
0010: 24 CB 54 1A                                        $.T.
]

]

[3]: ObjectId: 2.5.29.19 Criticality=true
BasicConstraints:[
  CA:true
  PathLen:0
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [URIName: http://crl.usertrust.com/AddTrustExternalCARoot.crl]
]]

[5]: ObjectId: 2.5.29.32 Criticality=false
CertificatePolicies [
  [CertificatePolicyId: [2.5.29.32.0]
[]  ]
]

[6]: ObjectId: 2.5.29.15 Criticality=true
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 99 E4 40 5F 6B 14 5E 3E   05 D9 DD D3 63 54 FC 62  ..@_k.^>....cT.b
0010: B8 F7 00 AC                                        ....
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 9C 36 E3 4E AE F1 8A BB   6C 97 8C 8F 4B 67 D0 9F  .6.N....l...Kg..
0010: D8 84 AA 9F 21 5F 35 A1   5B C4 2B 63 0D E8 BC 77  ....!_5.[.+c...w
0020: 5D A7 C4 37 FD 4B 2D 9E   E8 1D 69 A1 C0 84 CC D1  ]..7.K-...i.....
0030: 6D 8B F3 81 CB 9F 4B 74   B0 49 2A 31 E8 37 40 EB  m.....Kt.I_1.7@.
0040: 1F D9 97 A3 1A 11 D5 26   A7 6E 0F BA D5 BE 2C FD  .......&.n....,.
0050: B4 91 64 DC BE 3B 19 50   0D 7A 95 F3 04 13 A9 BB  ..d..;.P.z......
0060: 47 0F 8B 5C D1 AC C2 7B   77 21 50 DD 5B AB EE F4  G......w!P.[...
0070: A6 D8 D4 4A 53 6B 4D AD   B8 C8 E7 E6 52 58 4D 43  ...JSkM.....RXMC
0080: 4C C2 A2 23 4F 0E C0 20   39 AF DF 4F 42 5B 1E D3  L..#O.. 9..OB[..
0090: 09 F4 18 09 59 2A D9 E8   4A 18 BF 32 FB FA 2D 64  ....Y_..J..2..-d
00A0: 8B 87 CA 5B 2B E8 B8 0B   7E BE 17 12 C7 03 82 29  ...[+..........)
00B0: AF 58 AF 85 84 5D 3D 0A   DF 23 51 C3 CD AF 10 BF  .X...]=..#Q.....
00C0: 80 69 77 91 0A 4F E5 BA   E1 AD 9B CE DF 33 4E 30  .iw..O.......3N0
00D0: 3B E9 8F 66 7F 82 FA 6B   FA DB A3 C0 73 00 E3 D6  ;..f...k....s...
00E0: 12 AF 4D F2 0F 5A 14 51   1F 6D B8 86 81 62 07 CE  ..M..Z.Q.m...b..
00F0: 5C 72 C2 4F F3 57 2A 71   D9 D4 97 85 E6 18 53 B7  \r.O.W*q......S.

]
=========================================================Certificate 2 end.

=========================================================Certificate 3 start.
[
[
  Version: V3
  Subject: CN=AddTrust External CA Root, OU=AddTrust External TTP Network, O=AddTrust AB, C=SE
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 2048 bits
  modulus: 23223460521213001555387570833114089730860753895612098652836669980305042236333373520864248457295413309113206184129614795458813002793321404739348347239478157361314575018921060208560207337879261682185633570259454980009323505955755478574737771466443477069914070664457159874562246026231674202013525055051064032749275350905982802892471956172353456348747163465303302884619908731908096753154575131719129358212869729511062189039464751904900614685539733488960803754548627928530841064764065036079799777523666592044408376641702595881456975606363374738747468052431570879657918206353629078434589859560212766197636528957975011023399
  public exponent: 65537
  Validity: [From: Thu Jun 24 20:57:21 CEST 1999,
               To: Mon Jun 24 21:06:30 CEST 2019]
  Issuer: CN=UTN - DATACorp SGC, OU=http://www.usertrust.com, O=The USERTRUST Network, L=Salt Lake City, ST=UT, C=US
  SerialNumber: [    7ed1a9ab bee36f46 cd6b4e29 349056f3]

Certificate Extensions: 7
[1]: ObjectId: 1.3.6.1.5.5.7.1.1 Criticality=false
AuthorityInfoAccess [
  [
   accessMethod: ocsp
   accessLocation: URIName: http://ocsp.usertrust.com]
]

[2]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 53 32 D1 B3 CF 7F FA E0   F1 A0 5D 85 4E 92 D2 9E  S2........].N...
0010: 45 1D B4 4F                                        E..O
]

]

[3]: ObjectId: 2.5.29.19 Criticality=true
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

[4]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
  [DistributionPoint:
     [URIName: http://crl.usertrust.com/UTN-DATACorpSGC.crl]
]]

[5]: ObjectId: 2.5.29.32 Criticality=false
CertificatePolicies [
  [CertificatePolicyId: [2.5.29.32.0]
[]  ]
]

[6]: ObjectId: 2.5.29.15 Criticality=true
KeyUsage [
  Key_CertSign
  Crl_Sign
]

[7]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: AD BD 98 7A 34 B4 26 F7   FA C4 26 54 EF 03 BD E0  ...z4.&...&T....
0010: 24 CB 54 1A                                        $.T.
]
]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 3C 25 87 28 6C 98 BD 9D   42 1C 5E 1E 64 0F 56 7F  <%.(l...B.^.d.V.
0010: 96 3C F3 B9 F3 69 1A 69   F4 A4 08 D4 20 4D B1 F2  .<...i.i.... M..
0020: 63 27 E1 9F 01 43 37 B0   B1 7A E7 71 C8 7A 21 EE  c'...C7..z.q.z!.
0030: A8 35 C1 9D E6 BC 68 B3   46 80 9A 3D 04 72 3C 2F  .5....h.F..=.r</
0040: 48 FD E1 CC 42 77 0E B2   05 39 A4 00 F8 35 C2 AC  H...Bw...9...5..
0050: 78 C0 FD C7 13 BC 8B 20   4D 5A 35 AF 94 CA 32 B0  x...... MZ5...2.
0060: C6 79 D1 98 2E 3B C2 52   45 C1 9B B7 26 0B CB 04  .y...;.RE...&...
0070: 1A F6 6E 92 44 E1 7C 9C   C1 12 78 A6 19 01 E2 EF  ..n.D.....x.....
0080: 60 FB 7A 57 F3 32 28 06   B5 BA 1D 91 1B 28 5D 64  `.zW.2(......(]d
0090: 6A 5F 53 9C 0E D5 EA CC   45 BD 7D 46 0B AF 53 49  j_S.....E..F..SI
00A0: C6 CC 80 18 5B 5B AD B1   62 13 60 4E 39 59 51 C4  ....[[..b.`N9YQ.
00B0: A6 86 CB F1 0D 6D DE DD   31 0B 5F A3 07 A0 FB 3E  .....m..1._....>
00C0: 46 AA 49 73 04 7D 8A 0B   B0 2F 46 62 8E E1 BD 50  F.Is...../Fb...P
00D0: 65 28 B1 C8 76 4A F4 22   03 0C 55 D4 FC 0C 87 56  e(..vJ.""..U....V
00E0: 7E 0B 65 EF 87 EB 7C F7   25 B7 CD 27 4C DB 3C 09  ..e.....%..'L.<.
00F0: 29 69 17 8E 8B B0 47 E8   DA 60 B7 A7 69 66 FB 0B  )i....G..`..if..

]
=========================================================Certificate 3 end.

]
schildbach, thanks for your help, I effectively added chain certificate to the request that should not be here.
There is only the self signed certificate in the requests now.
Can you try again ?
Retried payreq1_sha1.paymentrequest and payreq2_sha1.paymentrequest, doesn't change anything. They still contain 3 certs each.
Self signed certs are always rejected in BIP70 so I think it'd be better if we used a real cert, as we already do (I think) in the bitcoinj unit tests. I have a couple of SSL certs we can test with, if necessary.
Do you have the private key of such cert mike ?
Well they're private :) But for test vectors the private key should be unnecessary, all we're checking is that the signatures are verified correctly right?
schildbach, this is strange, I double checked, the requests don't have 3 certificates. 
I think the problem is that I stashed my changes, so your Pull might not have worked.
I'd like implementer to be able to test their signature algorithm.
Alternatively I can create a custom Certificate chain, can you deactivate trust verification in bitcoinJ ?
Yes but then what's the point? The tests are supposed to test verification, right?

If necessary we can get a free SSL cert for some throwaway test domain and put the private key into the test vectors, but I really don't think that's needed. The test data should _only_ be checking verification works. Implementors can then make sure their signatures and cert chains are accepted by the main implementations if they have doubts that they got it right. Experience tells us that the info on what certs to include isn't right: lots of people get this wrong, especially as Bitcoin Core is quite permissive about what it allows.
No need for throwaway domain and free SSL, I can create an untrusted CA and emit a MerchantCertificate from it.
I understand that testing verification is enough.
I just don't see why you would not share the private key even for testing purpose, it's free.

For testing, trust checks and time validity checks should be off, so the vector don't suddenly become invalid. If you are willing to change tests to turn off these checks, then I can quickly generate a full chain. Does it sounds good ?
Let's not forget that the important stuff we test in these vectors is just signature verification, not chain verification.
So far most of the bugs people have hit are in chain construction and verification actually, so it does seem important to have various combinations in the test setups.

OK, sure, we can require a custom root cert for unit tests. 
Mike, I will add one test with a valid chain using Gavin's web tool.
This will be usefull.
Note that in bitcoinj, there is already such a custom root cert, along with the private key.

See https://github.com/bitcoinj/bitcoinj/tree/master/core/src/test/resources/com/google/bitcoin/protocols/payments
Ok I updated everything, now all tests have a CA.
As Mike said, it is good to add a test for valid chain checking, so I added one with a valid chain (thanks to gavin's payment request generator)

By testing chain checking against my own custom chain, and Gavin's chain, I've uncovered some bugs in NBitcoin Chain verification, so that was definitively a good idea ;)

Let me know if this pass correctly.
","Test
"
NicolasDorier,68,,"Add Test Vectors, Reference implementations, Fix link BIP70",closed,,"Some help for future implementers of BIP70.
",https://github.com/bitcoin/bips/pull/68,"['bip-0070.mediawiki', 'bip-0070/payreq.dat', 'bip-0070/payreq2.dat', 'bip-0070/payreq_expired.dat']",,,,"Gavin, I think I am wrong on something or I missed something in the spec.
Can you comment on https://bitcointalk.org/index.php?topic=629176.msg6997831#msg6997831
I squashed. If you are good with concerns I expressed https://bitcointalk.org/index.php?topic=629176.msg6997831 you can pull.
I close the pull request for now, I think my test vectors are not correct or I missed something on BIP70. I wait for a response on bitcointalk, and will do a new pull request once it is clearer for me.
",
greenaddress,65,,BIP-0070 extension: instantconfirmation,closed,,"As per discussion in bitcoin-dev IRC, this adds a protocol extention that can be reused by both various merchant and end users as well as various providers of instant confirmation. Feedback and comments very welcome.
",https://github.com/bitcoin/bips/pull/65,"['bip-0070/extensions.mediawiki', 'bip-0070/instantconfirmation.proto', 'bip-0070/paymentrequest.proto']",,,"['schildbach', 'gavinandresen', 'mikehearn', 'jgarzik']","Without having fully understoof the contents of this pull, I feel it should go into a separate BIP extending BIP70 rather than info BIP70 itself. If we keep on amending BIP70, we'll never be able to finalize it.
@schildbach I think what you say may well be true but we've done it this way because we were told it was the process in a  discussion in bitcoin-dev on IRC yesterday as well as because bip70 draft currently states:

> Implementations that need to extend messages in this specification shall use tags starting at 1000, and shall update the extensions page via pull-req to avoid conflicts with other extensions.

We need to improve the context of the change but basically it is meant to be a generic way, via the payment protocol, to ask for instant confirmation and validate it via a signature from a trusted third party that can control whether the wallet end user can or can't double spend.

This is meant as a security and privacy improvement over the greenaddress concept by making all transaction multisignature and avoid address reuse (at least in our case) with deterministic keys. More context here http://blog.greenaddress.it/2014/04/18/when-you-can-and-cant-rely-on-0-confirmations/ and http://ghgreenaddress.files.wordpress.com/2014/04/greenaddressp2sh2of2hd-61.pdf

This is not intended to a be a private extension but to be reusable.
Let's discuss the best way to extend BIP70 on the mailing list.

Comments re: this design specifically. I know X.509 can seem complicated but there are good reasons to use it.

Firstly, your current design assumes merchants have a way to manually fetch a key given the domain name of the wallet. Probably those merchants will just fetch a file on your webserver over HTTPS. So you already need a certificate and have it configured already.

Secondly, your design is very simple. If this BIP became successful then someone would observe that lots of merchants have started trusting your key, but you have no way to notify them in case you need to change your key due to e.g. a server breach. So then you might be tempted to say ""a correct implementation will download the key via HTTPS each time"". But now there's a lot of traffic, so you'd need to amend it once again to tell people that they must respect cache headers. Some of them will forget. You're already replicating at least two features of certificates (expiry time and domain identity) but without the reusable libraries.

Now someone observes that not all wallets are websites. Perhaps a hardware wallet like the TREZOR is upgraded to start tracking which outputs it signed for and refusing to do so again. It wants to take part in this protocol too, using a device-specific key that's embedded into the chips at the factory. But now it doesn't fit with your design because there's no way to do an HTTPS GET from a TREZOR. So you say maybe the manufacturer key could sign device keys in a chain, and then the signature contains the signed device key .... now you have a cert chain.

If this new hardware wallet gets put under a scanning electron microscope and the per-device key is extracted then used for fraud, it'd be nice if there was a way to revoke it without revoking all the devices at once. Now you have OCSP.

Rather than replicating all the features of certificates that evolved over years of improvement, it seems simpler to just reuse the existing libraries for it.
(cc mailing list)

While the _payment protocol_ may be extended, BIP 70 should not be.  Draft a new BIP for any extensions.
@jgarzik By all means! We are extending the payment protocol with protobuffer exts not the BIP!

I guess the bip70 draft needs updates to reflect the intended process as there has been a bit of confusion so far :)

One question I have is: would it be required for the BIP to be out of draft status for the extension to be includable in the list of public extensions? 

Also what is considered 'extending the protocol'  vs 'extending the BIP' ? I am now getting more confused :(
It is OK to register your extension in bip-0070/extensions.mediawiki after it has been implemented and is about to be used.

It is not OK to change BIP 70; if your extension is popular, then you should write another BIP to standardize it.

So NACK to this pull request.
",
NicolasDorier,63,,BIP38 : New reference implementation on NBitcoin,closed,,"New reference implementation on NBitcoin
",https://github.com/bitcoin/bips/pull/63,['bip-0038.mediawiki'],,,,,
schildbach,61,,Remove proposal for wallet structure from BIP32.,closed,,"It remained unused and it is not compatible to BIP43 and the BIPs based on it. If it turns out worthy to keep as a standard, I suggest reviving it under a new BIP number.

As the removed part of the BIP was optional, this change of the standard does not change the compliance state of any BIP32 implementation.
",https://github.com/bitcoin/bips/pull/61,['bip-0032.mediawiki'],,,"['sipa', 'leofidus', 'laanwj']","I'm fine with having BIP32 just describe the technical details and not prescribe how to use it.
I read one ACK and no NACKs. Can we get another ACK?
NAK.

BIPs are unique identifiers for ideas. If we're going to change them over
time it becomes ambiguous, and we need identifying them through ""bip x as
it was on date x"" or ""bip y after section z was removed"".

I'm fine with a notice ""this section is obsolete because of bip z"", but
let's not retroactively modify them, apart from clarifications, examples,
typo corrections, ...
@sipa Note your scenario is exactly what I want to prevent. If we leave BIP32 as is, we will always have to say ""BIP32 first part"" (accepted) and ""BIP32 second part"" (not accepted and obsoleted by BIP43). This is unnecessarly complex/puzzling for new devs in the Bitcoin space trying to catch up on standards with their products.

I think the mistake happened when starting this BIP: We tried to put too much into one document, rather than separating the concerns a bit.
> @sipa Note your scenario is exactly what I want to prevent. If we leave
> BIP32 as is, we will always have to say ""BIP32 first part"" (accepted) and
> ""BIP32 second part"" (not accepted and obsoleted by BIP43).
> 
> I think the mistake happened when starting this BIP: We tried to put too
> much into one document, rather than separating the concerns a bit.

Fair enough. I fully agree BIP32 should have been 2 BIPs in the first place.

Still, I dislike the practice of retroactively changing them. I don't think
we should encourage that.

Regarding the ""Accepted"" term, I think that should go away. Except for BIPs
that actually modify a consensus rule or non-optional protocol change,
there is no need for such a state. Any implementation of ecosystem
infrastructure is free to independently choose to support it or not.
Maybe retroactively separating the two concerns into BIP32a and BIP32b is an option, with BIP32 being defined as the sum (concatenation) of all sub-BIPs?
So if removing is not possible, let's put a deprecation warning above the section, that would be equivalent and then we could finally close this issue.
Closing this as there is no consensus.
",
prusnak,52,,introduce BIP-0064: Hierarchy for Deterministic Wallets,closed,,"This BIP defines logical hierarchy for deterministic wallets based on algorithm described in BIP-0032. It is a particular application of the general idea described there.
",https://github.com/bitcoin/bips/pull/52,"['README.mediawiki', 'bip-0039.mediawiki', 'bip-0064.mediawiki']",,,"['gmaxwell', 'sipa', 'schildbach', 'TierNolan', 'slush0', 'luke-jr', 'gary-rowe']","ACK Draft.
A few commnts:
- Please use the new (less ambiguous) terminology ""hardened derivation"" instead of ""private derivation"".
- Internal chains can have far lower gap limits, as they are instantly used after being issued.
I do not understand the benefit of putting the cointype inside the derivation. The software needs to know what coin you're talking about any way, and you're dropping the only place where this information is serialized (the 4 byte magic).

My suggestion would be to have a BIP32 seed be coin-agnostic, but modify the master node generation algorithm to include the cointype in the HMAC key. That way, each coin can define its own magic, and never risk importing an incompatible chain, while at the same time guaranteeing that no keys will be reused across coins. There's no reason why testnet would be special as the only extra coin.
@sipa We tried to explain this on the mailing list already, there's no need to start the same discussion here again ... 
a) changed private -> hardened in the text
b) changed the wording - internal chain does not need to be scanned for account discovery
@sipa There're actually some reasons mentioned in the BIP text itself. We think that having one master node which allows storing various cryptocurrencies at once (and without privacy issues like reusing pubkeys) is very useful feature.
Continuing the discussion on the mailing list.
Suggestion: add a recommendation that wallet software warns when you're exceeding the gap limit on an external chain.

Another suggestion: make it clear that different ""purpose""s could have a different derivation structure below it. For example:

We propose the following tree structure for BIP32:

<pre>
m / purpose' / *
</pre>

Where the purpose value determines the structure beneath. This BIP defines one purpose (with id 0x40), and associated structure:

<pre>
m / 40' / coin_type' / account' / change / address_index
</pre>

PS: I'm very much in favor of standardizing this further, so don't let my criticism on some details derail this.
Added both suggestions.
Reminder: This is just a PR for the BIPs repository; the BIP itself is Draft status, so there's no reason things cannot be changed after this is merged..
Ok.... anyone here, willing to merge this PR?
The PR has been open for only 8 hours and has sparked some pretty extensive discussion.
Um, @prusnak changed all details what has been requested above. And that discussion on bitcoin-dev, everything has been discussed million times over again and again. This draft is a real consensus of all known consensuses from the whole consensus universum.

Even people who discussed the proposal and dislike that specific design of paths for some reason understand that finding universal solution isn't possible, so our m/purpose'/ is win-win for all edge cases and future uses...
I was not making any comment about the proposal, only that 8 hours is generally an unreasonable expected time-frame for merging a non-trivial merge request.
Is there any standard describing how long to wait with pull requests of initial drafts?
No, there hasn't previously needed to be one.  Can you help me understand the urgency here?
@gmaxwell It's not like this is proposing to make it final/accepted... it's just a Draft, no reason not to merge it as soon as the author posts it IMO.
There's no urgency as well as there's no need to wait... If there's somebody around with merge capabilities, where's the problem?

@luke-jr Thanks, I was going to write the same
@prusnak  Can you change this to BIP 0043 and I'll  go ahead and merge the draft.
@gmaxwell Is there any particular system in registering numbers for new BIPs? We've choosen ""64"" because it has nice ""geeky"" relation to BIP32, on which this BIP is based... 
It's the next available down in the block that had formerly been assigned to you. (I also note that you should have obtained a number per BIP1 and could have avoided any needed changes here. :) )
Oh, BIP1 is not obsolete anymore? ;-)

@gmaxwell I don't need my BIPs in one block... no little exception for us with that number? Even if it's damn geeky to have 2x32? We'll be very very happy and as our ""thank you"" we'll be always talking about you only in very good light! :-)
I don't know that thats appropriate when even the authors of BIP32 have issues with this approach.
@sipa Do you have anything against using BIP64 for this? :-)
To me it feels like this BIP should be split into two. First part about
m / purpose' / *
is great and by the way was also one outcome of our Berlin meetup about this topic. I'd love to see it standardized.

The second part, a proposal for your specific ""purpose 64"" structure I think should wait until there are (preferably more than one) implementations of it. I suspect a lot of the other wallets will pick a (slightly) different structure. No need to put every proprietary structure into a BIP unless its clear there will be at least a minimal level of interoperability.
@schildbach Great to see you have came up to the same conclusion. Please do share more of your Berlin group findings on the mailinglist. We'd love to see such things before we come up with them. :) About the second part: Unfortunately no, it can't wait. We need to ship TREZOR and need to have this standardized before that.
@gmaxwell Please, let's focus on the fact there is a group that, surprise, surprise, wants something standardized (as opposed to lots of other bitcoin ecosystem developers that just go and do their stuff without thinking about interoperability at all). Your behavior creates unnecessary friction and makes the whole process cumbersome, raising again question if it makes sense at all.

To support my stance let me cite from README of this repository: ""We are fairly liberal with approving BIPs, and try not to be too involved in decision making on behalf of the community."" and clearly this is not what we saw. Heck, we haven't even got to the point of approving the BIP, we are just stuck even BEFORE Drafting stage.

To sum it up: either you merge this request as BIP64 or we'll deal with this in another manner.
@prusnak I understand you have your timeline. On the other hand, I think your timeline should not put any pressure on the standardization process.

Even if both parts of the BIP will be merged at the same time, I still think it should be different BIPs. Otherwise, other structure BIPs need to reference to ""BIP64 part 1"" or something like that. Your BIP feels a bit like you want to put TCP and HTTP into one document.

Currently, I think you're the only user of your ""purpose 64"" structure.
- bitcoinj: Will not implement accounts and coin_type, at least not in the first version. Means it needs to pick a different ""purpose"". See hdw_alpha branch.
- Electrum: Thomas has previously stated he wants this reserved field. I'm not sure about if that changed.
- BOP: Has completely different needs as its target is merchants.
- MultiBit: It appears they're either doing their own thing with MultiBit HD or will adopt the bitcoinj structure.
- any others I'm not aware of?

So what are you waiting for? Just release myTrezor and see if someone picks up the structure. We can agree on a BIP once that happens.

By the way, I thought Trezor (the hardware) is agnostic of any structure, other than the BIP32 derivation rules itself? Is that no longer true?
Just chiming in for MultiBit HD. It will follow the Bitcoinj implementation and timeline. We want to be interoperable with a wide range of wallets and this seems to be the best way to achieve that goal. 

We're allowing for multiple accounts, but they won't be present in the first release since the vast majority of our users will never use them.
@schildbach There is no pressure on the standardization process, because currently there is no one going on. There is just unwillingness to merge the draft.
@schildbach About ""BIP64 part 1"" - I see the need to split this into a separate proposal, but I am doing no effort in this direction until this draft is merged in.
@schildbach Yes, right, TREZOR is structure agnostic. We are talking about myTREZOR here. But since it is the only wallet that supports TREZOR atm we need to have the structure set it stone.
myTREZOR is using BOP as its backend server, so it supports BIP64 as of now (although BOP is structure agnostic as well, but knowing the used structure can allow it to improve caching, etc).  Not sure about MultibitHD/BitcoinJ but if they want to use accounts there's no reason why not to use BIP64.
","These steps don't appear on different lines under the markup system.
"
magoo,49,,Reject URI Pollution,closed,,"Ensuring that parameter pollution is avoided in spec, to prevent
spoofing issues between systems passing along URIs.

RE: https://github.com/bitcoin/bitcoin/issues/4046
",https://github.com/bitcoin/bips/pull/49,['bip-0021.mediawiki'],,,"['schildbach', 'tcatm', 'aalness', 'TheBlueMatt', 'laanwj']","Sounds like a good idea to me.
It might be better if the wording were:

""Reject URI's with multiple occurrences of known parameters""

@laanwj suggested on my PR that this should only apply to known parameters.

PR: https://github.com/bitcoin/bitcoin/pull/4050
Yes, my rationale for only applying this to the known parameters mentioned in the BIP (like amount, message) is that future parameters may have a reason for being allowed to repeat.
Although unlikely, it's never good to close future extension possibilities.
Also, we have this ""r="" parameter which is only defined in BIP72. Does that count as a known parameter?
IMO it should be treated as known. BIP 72's language sort of implies there is only one ""r"" parameter but it is not explicit.

Side note: @schildbach I noticed your Android wallet doesn't actually ignore other parameters when ""r"" is used. It verifies they are the same parameters in the subsequent payment request. I actually think this is better handling than what the BIP describes (suggests all parameters be ignored if getting a payment request.) But @gavinandresen may have had a good reason for wording the BIP the way he did.
Seems different cgi's handle duplicate params very differently. Django will accept duplicate params as a list but will only return the list if specifically instructed to, otherwise return the last occurance. PHP will simply ignore all but the last. 

We could enforce that a parameter is designed to be duplicated with square brackets (""var[]"") with otherwise URI's with duplicate non-bracketed params are outright rejected. This notation is acceptable with some CGI's as a parameters so there's precedent in its usage.

Language would look something like: 

> Reject URLs with duplicate parameters, except for parameters strictly defined and handled as additional elements to a list with square brackets, IE: ""var[]=""

I think this would allow for future extension possibilities and also prevent pollution issues. 
@mag00 explicitly adding a [] suffix to parameters that allow duplicates sounds like a good idea to me. This is easier to check than whether a parameter is 'known', which depends on the implementation.

This is analogous to specifying req- for parameters that are required.
Based on my interpretation of http://tools.ietf.org/html/rfc3986 ""[]"" doesn't seem strictly legal for query string elements:

query         = _( pchar / ""/"" / ""?"" )
pchar         = unreserved / pct-encoded / sub-delims / "":"" / ""@""
unreserved    = ALPHA / DIGIT / ""-"" / ""."" / ""_"" / ""~""
pct-encoded   = ""%"" HEXDIG HEXDIG
sub-delims    = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")""
                 / ""_"" / ""+"" / "","" / "";"" / ""=""

And ""[]"" fall under ""gen-delims.""

I'm personally ok with defacto standards but if we want to be completely correct maybe we should go with something like ""var-multi"" where the suffix is ""-multi"". This also allows for things like ""req-var-multi"". Seems a bit less elegant than ""[]"" I'll admit.
Yes, googling around, there seem to be problems in some applications handling the [] pairs in URIs, for example e-mail clients, so it's not that great a convention either.
Can any of the authors/maintainers of the BIP comment here? @thebluematt @tcatm
I don't think there's need to support repeated parameters in BIP21 at all. More complicated payments can be handled by BIP70.
Ok, makes sense I suppose.
BIP21 should, IMHO, only be used for BIP70 payments in the long-term, so I agree with @tcatm.
There is a good use case of multiple r=XXX parameters - fallback mechanisms - being discussed on the mailing list right now: http://permalink.gmane.org/gmane.comp.bitcoin.devel/5774
In the context of the attack described, does it not make more sense to order and number the r parameters. 

On July 1, 2014 6:08:11 AM EDT, ""Wladimir J. van der Laan"" notifications@github.com wrote:

> There is a good use case of multiple r=XXX parameters - fallback
> mechanisms - being discussed on the mailing list right now:
> http://permalink.gmane.org/gmane.comp.bitcoin.devel/5774
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/bitcoin/bips/pull/49#issuecomment-47638782
Well, an URI is inherently ordered. It could be specified that the first occurrence of a parameter should be used, unless mentioned otherwise.
I meant why not just go with r1=&r2=&r3=?
@TheBlueMatt If you read the mailing list - we agreed on exactly that.
It's too late to change BIP 21. This would need to be a new bip with an amandment.
","occurrences
"
schildbach,43,,"Revert ""Add BIP 42: Finite monetary supply for Bitcoin"", ...",closed,,"...now that April Fools' Day is over.

Guys I'm scared! What if someone takes you seriously?
",https://github.com/bitcoin/bips/pull/43,['bip-0042.mediawiki'],,,"['gmaxwell', 'petertodd', 'laanwj', 'sipa']","Nak. This is actually a serious change, though the explanation is tongue in cheek.

I should hope that you don't want the supply of Bitcoins to be weirdly infinite due to a software oversight.
NAK. Let's just leave it be.

Python Improvement Proposals, even the RFCs contain some joke/jest articles. No need to let this turn into dogecoin but we shouldn't take ourselves too serious either.
I believe @schildbach incorrectly assumed this BIP is about making the supply infinite.
@laanwj ACK

@sipa I'll admit so did I at first, before I realized how brilliant you guys were. :)

Kinda reminds of of the Lee Valley Story Tape tape measure: http://www.leevalley.com/us/wood/page.aspx?p=65359&cat=1,43513 Both an April fools joke, and a real product with some niche uses in production woodworking. (covering a regular tape measure with masking tape is often written up as a clever trick)
",
topynate,40,,Multisig transactions standard for large M or N,closed,,"Spends of BIP16 transactions where the serialized script is a multisignature transaction are treated as standard whatever the value of M or N, subject to the limits imposed by maximum serialized script size.
",https://github.com/bitcoin/bips/pull/40,['bip-0016.mediawiki'],,,"['taariq', 'luke-jr']","Interesting. Thank you @topynate topynate. It was my understanding that multisig transactions were only accidentally available for large M of N and were not delivered in the scope of the wiki which was supposed to be limited to 2 of 3. Did I understand this incorrectly?
BIPs should only cover _standardised_ things, not _implementation-specific_ ones such as Bitcoin Core's IsStandard qualifier. I suggest reading ""standard transaction"" as ""this is a common accepted way to do things"", rather than ""accepted by Bitcoin Core IsStandard"".
Having actually looked at the code in question, it seems that this is an edge-case caused by the special handling P2SH redeeming scripts need (i.e. they cannot themselves be P2SH scripts). If it's  implementation-specific weirdness then it probably doesn't need to be in a BIP.
",
johnhenry,34,,Add transactions to BIP 0070,closed,,"Hello. I hope this is the right way to introduce this...
If we allow full transactions in addition to outputs as methods of specifying payment,
the protocol could handle more complex types of transactions including contracts.
For example, during a negotiation involving rapidly adjusting micro-payments (https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party), a merchant may want to continuously send an updated version of a transaction to the client in a payment request rather than a new list of outputs every time. 
Any thoughts?
",https://github.com/bitcoin/bips/pull/34,['bip-0070.mediawiki'],,,"['gavinandresen', 'jgarzik', 'laanwj']","I think this should be a new BIP007x that extends BIP0070.
Have you discussed this on the mailing list?
Agree with @laanwj , this should be its own BIP and should be discussed and implemented before being standardized.
NAK for reasons stated above

(Technical NAK -- not feature refusal, just this needs to be discussed first)
",
cscott,28,,Fix typo for size of derivedhalf1 and derivedhalf2,closed,,"The output of scrypt is 64 bytes; so each derivedhalf should be 32 bytes.
",https://github.com/bitcoin/bips/pull/28,['bip-0038.mediawiki'],,,,"Pull request #29 also contains my changes, in addition to a few more.  Closing in favor of #29.
",
cscott,27,,Clarify that the scrypt `salt` is the `addresshash`,closed,,,https://github.com/bitcoin/bips/pull/27,['bip-0038.mediawiki'],,,"['voisine', 'laanwj']","@cscott Needs rebase

@voisine Any opinion on this?
This fix is already partly in the current version, but I like the rest. Changing salt to addresshash is clearer, otherwise you have to search the document to figure out how salt was created.
Closing this pull due to inactivity.
",
cscott,26,,Fix URL spec's handling of parameter separators.,closed,,"Ensure that the bitcoin URL spec includes the `?` or `&` which separate multiple `bitcoinparam`.  Based on the examples in the rest of the spec, we assume that `?` is always a reasonable separator. The `&` character is also allowed in non-initial positions.
",https://github.com/bitcoin/bips/pull/26,['bip-0021.mediawiki'],,,['laanwj'],"`?` is only allowed in the initial position (between the address and the arguments), and `&` as the seperator between arguments.
The example further down in the spec uses ? as the separator between elements; I can update the patch to fix that as well.

Modern HTML prefers using ; to & as an argument separator (no encoding issues)---should we support that as well?
Oh? In that case I'm not sure. May be an error in the spec. Maybe mail the owners.

Have you tested whether any of the implementations accepts `?` between arguments? 
Switched to `&` and `;`

It would be nice to have an example with `&` and `;` in (for example) the label text, to demonstrate proper escaping.
I'm not sure about adding `;` here as separator.
Do any of the current clients allow this?
Is there any reason to allow different seperators?
The standard reason for recommending the use of `;` is that HTML authors are notoriously bad at properly escaping `&` in URLs.  That is, a proper bitcoin link in HTML should be:

``` html
<a href=""bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=20.3&amp;label=Luke-Jr"">Pay now</a>
```

but almost everyone forgets to escape the `&` properly.  See http://stackoverflow.com/questions/3481664/semicolon-as-url-query-separator for more discussion.

The drawback is that authors now have to ensure that both `&` and `;` in **values** are properly percent-encoded.
Some quick testing reveals that Qt QUrl cannot deal with `;` as parameter separator.
I guess in general custom code needs to be written to handle it, whereas all URI parsing libraries handle `&`.
There doesn't seem to be interest in adding ; as parameter separator.
Closing this issue.
",
benjyz,18,,BIPS as tsv file,closed,,"this is a suggestion for adding BIPS as a tab seperated file. This can be used for 
- searching the BIPS using github's features, see https://github.com/benjyz/bips/blob/master/bips.tsv
- machine readable structure for applications

Its a useful feature to look up BIPS. it provides some features with minimal overhead. 
",https://github.com/bitcoin/bips/pull/18,['bips.tsv'],,,"['petertodd', 'laanwj']","Looks like a good idea to me to have a machine parseable version. 
If you're going to have a machine parseable version, please write a script to generate the non-machine-parseable version version from it so we don't have to update two places manually.

Conversely, what's wrong with extracting it from the existing README.mediawiki? Add a quick script to the repo to do that and spit out your tsv. The format in the README is regular enough to do that.
Agreed, it would be useful to generate the derived version using a script, so that no two documents have to be updated when a BIP is added or changed status.
the media-wiki is not perfectly parseable. easiest then would be to have a generator going from tsv => wiki format. I'll leave for it now.
",
benjyz,5,,Update bip-0037.mediawiki,closed,,"fix typo and link
",https://github.com/bitcoin/bips/pull/5,['bip-0037.mediawiki'],,,"['gmaxwell', 'josephNLD', 'sipa']","I believe ""they are sent"" is the correct and intended language here.
agree with @gmaxwell 
Meta comment: now that BIPs are on github, under what rules can modifications be made? I believe they should require consent from at least the original author.
""require"" is perhaps too strong— what happens if the author is absentee?  And if the change is very obviously correct, pure copyediting, etc?
Ok, my mistake. ""data they receive"" or ""data they are sent to"" might make it a bit clearer. 
""Benjyc, did Alice enjoy the package she was sent?""
Good examples for the grammar.  
Nouns may still be better than pronouns for precision where possible.

Whether it reduces what is received or what is sent is a non-trivial function of where/how the bloom filter is applied and is significant for network billing and storage concerns.
""reduce the amount of transaction data they are sent"" - conveys filtered at remote peer, prior to sending (appropriately).

""reduce the amount of transaction data sent to them by their peers"" - slightly more precise as the BIP doesn't filter what is sent to others.

tl;dr it is fine as it is.
",
